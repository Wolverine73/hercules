/***HEADER -------------------------------------------------------------------------
 |  PROGRAM NAME:     CUSTOM_PROACTIVE_REFILL.SAS
 |
 |  PURPOSE:    TARGETS A CLIENT WHO WOULD LIKE A CUSTOM PROACTIVE MAILING.  THIS
 |              IS A ONE TIME MAILING.
 |              -- SELECT CLIENTS AND CPGS
 |              -- SELECT NDCS (EXPANDED MAINTENANCE)
 |              -- GET 45 DAY POS CLAIMS
 |              -- DO NOT TARGET IF MAIL SERVICE WAS USED WITHIN LAST 90 DAYS
 |              -- APPLY ONLY PARTICIPANTS WITH BOTH MAIL AND POS PBS
 |              -- UNLIKE THE PROACTIVE REFILL NOTIFICATION PROGRAM, THIS PROGRAM
 |                 DOES NOT CHECK FOR REFILL RESTRICTIONS
 |
 |  INPUT:      UDB TABLES ACCESSED BY MACROS ARE NOT LISTED
 |                        &CLAIMSA..TCPG_PB_TRL_HIST,
 |                        SUMMARY.TDRUG_COV_LMT_SUMM,
 |                        &CLAIMSA..TBENEF_BENEFICIAR1,
 |                        &CLAIMSA..TCLIENT1,
 |                        &CLAIMSA..TDRUG1,
 |                        &CLAIMSA.TRXCLM_BASE
 |
 |  OUTPUT:     STANDARD DATASETS IN /RESULTS AND /PENDING DIRECTORIES
 |
 |
 |  HISTORY:    MARCH 2004 - PEGGY WONDERS
 |              JAN 2005 - JOHN HOU
 |                         ADDED CODES TO FOR RETAINING PLAN_CD, GROUP_CD FIELDS WHICH
 |                         ARE NEEDED AS PART OF FILE LAYOUT
 |			JAN, 2007	- KULADEEP M	  ADDED CLAIM END DATE IS NOT NULL WHEN
 |										  FILL_DT BETWEEN CLAIM BEGIN DATE AND CLAIM END
 |										  DATE.
 |
 |	        MAR  2007    - GREG DUDLEY HERCULES VERSION  1.0
 |
 |           07MAR2008 - N.WILLIAMS   - HERCULES VERSION  2.0.01
 |                                      1. INITIAL CODE MIGRATION INTO DIMENSIONS
 |                                         SOURCE SAFE CONTROL TOOL. 
 |                                      2. UPDATE TO ADJUST BULKLOAD TO SQL PASS-THRU FOR TABLE LOADS.
 |
 |           APR. 22, 2008 - CARL STARKS - HERCULES VERSION 2.1.01
 |
 |           ADDED 3 MACRO CALLS TO GET RETAIL CLAIM DATA 
 |           PULL_EDW_RETAIL_CLAIMS IS A NEW MACRO TO PULL CLAIMS FOR RECAP AND RXCLAIM 
 |           PULL_QL_RETAIL_CLAIMS IS A NEW MACRO ALTHOUGH THE LOGIC WAS JUST PULLED 
 |           FROM CUSTOM PROACTIVE REFILL AND MADE INTO A MACRO              
 |           CALL NEW MACRO EDW2UNIX TO DOWNLOAD DATA TO UNIX THEN CALL               
 |           NEW MACRO COMBINE_ADJ TO COMBINE ADJUDICATIONS AND DATA CONVERSION
 |           ADDED LOGIC TO RUN SOME EXISTING MACROS TO RUN BASED ON ADJUDICATION 
 |           ADDED LOGIC TO READ 3 NEW MACRO VARIABLE TO DETERMINE WHICH ADJUDICATION PROCESS THAT
 |           WILL BE RAN (QL_ADJ, RX_ADJ AND RE_ADJ). THE QL_ADJ WILL RUN THE QL PROCESS WHOSE CODE
 |           DID NOT CHANGE MUCH FROM THE OLE ELIGIBILITY CHECK MACRO. THE RX_ADJ WILL RUN RXCLAIM
 |           AND RECAP WILL RUN RECAP THESE ARE 2 NEW PROCESSES ADDED 
 |
 | 			 - Hercules Version  2.1.2.01
 +-------------------------------------------------------------------------------HEADER*/
 data _null_;
  rundate = today();
  call symput('strt_date', cat("'", strip(put(intnx('Quarter',rundate,-1,'B'),mmddyys10.)) ," 00:00:00'"));
  call symput('end_date',  cat("'", strip(put(intnx('Quarter',rundate,-1,'E'),mmddyys10.)) ," 00:00:00'"));
 run;

 %put &strt_date &end_date; 

%LET ERR_FL=0;
options sysparm='initiative_id=11304 phase_seq_nb=1';

/*%set_sysmode(mode = test);*/
%set_sysmode(mode=prod);
%include "/PRG/sas&sysmode.1/hercules/hercules_in.sas";
options mlogic mprint mlogicnest mprintnest;
%UPDATE_TASK_TS(JOB_START_TS);

LIBNAME SUMMARY DB2 DSN=&UDBSPRP SCHEMA=SUMMARY DEFER=YES;
%GLOBAL POS_REVIEW_DAYS POS_REVIEW_DAYS2 CHK_DT CHK_DT2;
/*%LET POS_REVIEW_DAYS2 = 407; /*per HT request*/*/
%LET ERR_FL=0;

%LET PROGRAM_NAME=custom_proactive_refill;
* ---> SET THE PARAMETERS FOR ERROR CHECKING;
 PROC SQL NOPRINT;
    SELECT QUOTE(TRIM(EMAIL)) INTO :PRIMARY_PROGRAMMER_EMAIL SEPARATED BY ' '
    FROM ADM_LKP.ANALYTICS_USERS
    WHERE UPCASE(QCP_ID) IN ("QCPJ241","QCPI208");
 QUIT;
%ON_ERROR(ACTION=ABORT, EM_TO=&PRIMARY_PROGRAMMER_EMAIL,
          EM_SUBJECT="HCE SUPPORT:  Notification of Abend",
          EM_MSG="A problem was encountered.  See LOG file - &PROGRAM_NAME..log for Initiative ID &Initiative_ID");


*SASDOC--------------------------------------------------------------------------
| CALL %RESOLVE_CLIENT
| RETRIEVE ALL CLIENT IDS THAT ARE INCLUDED IN THE MAILING.  IF A CLIENT IS
| PARTIAL, THIS WILL BE HANDLED AFTER DETERMINING CURRENT ELIGIBILITY.
|
| C.J.S MAY2008 
|     ADDED OUTPUT NAMES FOR EDW PROCESSING IN RESOLVE CLIENT
+------------------------------------------------------------------------SASDOC*;
/**HEADER------------------------------------------------------------------------------------
|
| PROGRAM NAME: RESOLVE_CLIENT.SAS
|
| CALL REFERENCE: RESOLVE_CLIENT CALLS
|					1) RESOLVE_CLIENT_QL.SAS
|					2) RESOLVE_CLIENT_RX.SAS
|					2) RESOLVE_CLIENT_RE.SAS
|
| PURPOSE:
|       DETERMINING THE CLIENTS AND THEIR HEIRARCHIES FOR ALL THREE ADJUDICATION ENGINE
|
| INPUT:  
|       MACRO VARIABLES FROM HERCULES_IN.SAS :
|       	INITIATIVE_ID, PROGRAM_ID, TASK_ID, QL_ADJ, RX_ADJ, RE_ADJ,
|			DFL_CLT_INC_EXU_IN, OVRD_CLT_SETUP_IN, DSPLY_CLT_SETUP_CD,
|			TABLE_PREFIX
|		TABLES :
|			PROGRAM-MAINTAINENCE SET-UP
|				HERCULES.TPGMTASK_QL_RUL (QL)
| 				CLAIMSP.TCLIENT_PGM_DLY (QL)
|				CLAIMSA.TCPGRP_CLT_PLN_GR1 (QL)
|				CLAIMSA.TRPTDT_RPT_GRP_DTL (QL) 
|				HERCULES.TPGMTASK_RXCLM_RUL (RX)
|				HERCULES.TPGMTASK_RECAP_RUL (RE)
|				DSS_CMX.V_ALGN_LVL_DENORM (RX/RE)
|			CLIENT SPECIFIC SET-UP
|          		HERCULES.TINIT_CLIENT_RULE (QL/RX/RE)
|          		HERCULES.TINIT_CLT_RULE_DEF (QL/RX/RE)
|				CLAIMSA.TCPGRP_CLT_PLN_GR1 (QL)
|				CLAIMSA.TRPTDT_RPT_GRP_DTL (QL)
|          		CLAIMSA.TCPG_PB_TRL_HIST (QL)
|          		CLAIMSA.TPRESC_BENEFIT (QL)
|			    HERCULES.TINIT_RXCLM_CLT_RL (RX) 
|			    HERCULES.TINIT_RXCLM_CLT_RL (RE) 
|				DSS_CMX.V_ALGN_LVL_DENORM (RX/RE)
|
| OUTPUT: 
|       MACRO VARIABLES
|       	RESOLVE_CLIENT_EXCLUDE_FLAG: 
|				0=INCLUDE CPGs / ALGN_LVL_GID_KEY IN THE &TBL_NAME_OUT IN THE MAILING,
|           	1=EXCLUDE CPGs / ALGN_LVL_GID_KEY IN THE &TBL_NAME_OUT FROM THE MAILING.
|       	RESOLVE_CLIENT_TBL_EXIST_FLAG / RESOLVE_CLIENT_TBL_EXIST_FLAG_RX /
|			RESOLVE_CLIENT_TBL_EXIST_FLAG_RE :
|           	0 = TABLE &TBL_NAME_OUT DOES NOT EXIST
|           	1 = TABLE &TBL_NAME_OUT HAS BEEN CREATED.
|		TABLE:
|			&TBL_NAME_OUT WITH CLIENT_ID AND CLT_PLAN_GROUP_ID
|			&TBL_NAME_OUT2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|			&TBL_NAME_OUT_RX WITH ALGN_LVL_GID_KEY, CARRIER_ID, ACCOUNT_ID, GROUP_CD
|			&TBL_NAME_OUT_RX2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|			&TBL_NAME_OUT_RE WITH ALGN_LVL_GID_KEY, INSURANCE_CD, CARRIER_ID, GROUP_CD
|			&TBL_NAME_OUT_RE2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|
|------------------------------------------------------------------------------------------
| HISTORY: SEPT      - JOHN HOU
|          24FEB2006 - BRIAN STROPICH - ADDED THE UPCASE FUNCTION IN THE ASSIGNMENT OF
|                                       THE MACRO VARIABLE SELECT_STR (HEAT 02530529)
|		   14APR2008 - SR Hercules Version  2.1.01
|									  - MODULARIZED RESOLVE_CLIENT TO RUN FOR ALL 
|                                       3 ADJUDICATION ENGINES
|                                     - EXISTING CODE THAT RAN FOR QL ADJUDICATION
|										HAVE BEEN MOVED TO RESOLVE_CLIENT_QL.SAS, WITH
|										CHANGES TO PROGRAM-MAINTAINENCE SETUP AND ALSO 
|										SOME CHANGES IN INITIATIVE SET-UP
|										(REFER RESOLVE_CLIENT_QL.SAS FOR DETAILS)
|------------------------------------------------------------------------------------------
+---------------------------------------------------------------------------------*HEADER*/
/**HEADER------------------------------------------------------------------------------------
|
| PROGRAM NAME: RESOLVE_CLIENT_QL.SAS
|
| CALL REFERENCE: RESOLVE_CLIENT_QL IS CALLED BY RESOLVE_CLIENT.SAS
|
| PURPOSE:
|       DETERMINING THE CLIENTS AND THEIR CPGS TO BE INCLUDED OR EXCLUDED
|       IN A MAILING.
|
| INPUT:  
|       MACRO VARIABLES FROM HERCULES_IN.SAS :
|       	INITIATIVE_ID, PROGRAM_ID, TASK_ID, QL_ADJ, RX_ADJ, RE_ADJ,
|			DFL_CLT_INC_EXU_IN, OVRD_CLT_SETUP_IN, DSPLY_CLT_SETUP_CD,
|			TABLE_PREFIX
|		TABLES :
|			PROGRAM-MAINTAINENCE SET-UP
|				HERCULES.TPGMTASK_QL_RUL
| 				CLAIMSA.TCLIENT1
|				CLAIMSA.TCPGRP_CLT_PLN_GR1
|				CLAIMSA.TRPTDT_RPT_GRP_DTL 
|			CLIENT SPECIFIC SET-UP
|          		HERCULES.TINIT_CLIENT_RULE,
|          		HERCULES.TINIT_CLT_RULE_DEF
|				CLAIMSA.TCPGRP_CLT_PLN_GR1
|				CLAIMSA.TRPTDT_RPT_GRP_DTL
|          		CLAIMSA.TCPG_PB_TRL_HIST,
|          		CLAIMSA.TPRESC_BENEFIT 
|
| OUTPUT: 
|       MACRO VARIABLES
|       	RESOLVE_CLIENT_EXCLUDE_FLAG: 
|				0=INCLUDE CPGS IN THE &TBL_NAME_OUT IN THE MAILING,
|           	1=EXCLUDE CPGS IN THE &TBL_NAME_OUT FROM THE MAILING.
|       	RESOLVE_CLIENT_TBL_EXIST_FLAG:
|           	0 = TABLE &TBL_NAME_OUT DOES NOT EXIST
|           	1 = TABLE &TBL_NAME_OUT HAS BEEN CREATED.
|		TABLE:
|			&TBL_NAME_OUT WITH CLIENT_ID AND CLT_PLAN_GROUP_ID
|			&TBL_NAME_OUT2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|
|------------------------------------------------------------------------------------------
| HISTORY: SEPT      - JOHN HOU
|          24FEB2006 - BRIAN STROPICH - ADDED THE UPCASE FUNCTION IN THE ASSIGNMENT OF
|                                       THE MACRO VARIABLE SELECT_STR (HEAT 02530529)
|		   14APR2008 - SR Hercules Version  2.1.01
|									  - CHANGED LOGIC FOR PROGRAM MAINTAINENCE SETUP
|                                     - REMOVED THE LOGIC IN INITIATIVE SET-UP THAT 
|                                       WAS SETUP TO HANDLE PARTIAL EXCLUDE (PARTIAL EXCLUDE
|                                       IS NOT ALLOWED IN COMMUNICATION ENGINE)
|									  - SOME QUERIES IN INITIATIVE SET-UP HAVE BEEN CHANGED
|                                       TO BE CONSISTENT WITH THE CODES IN BOB SETUP
|						 - Hercules Version  2.1.2.01
|------------------------------------------------------------------------------------------
+---------------------------------------------------------------------------------*HEADER*/

%MACRO RESOLVE_CLIENT_QL_11304;

%*SASDOC -------------------------------------------------------------------------
 | SETTING UP EXECUTE_CONDITION_FLAG
 | EXECUTES ONLY WHEN MACRO VARIABLE EXECUTE_CONDITION_FLAG = 1, OTHERWISE EXIT
 +---------------------------------------------------------------------------SASDOC;

%IF &EXECUTE_CONDITION_FLAG. = 0 %THEN %DO;
	%PUT NOTE: MACRO WILL NOT EXECUTE BECAUSE EXECUTE_CONDITION IS FALSE;
	%PUT NOTE: EXECUTE_CONDITION = &EXECUTE_CONDITION; 
%END;
%IF &EXECUTE_CONDITION_FLAG.= 0 %THEN 
	%GOTO EXIT;

%*SASDOC ----------------------------------------------------------------------------------
 | PROCESS SETUP BASED ON DSPLY_CLT_SETUP_CD
 | NOTE: DSPLY_CLT_SETUP_CD = 1 - INITIATIVE SETUP (CLIENT SPECIFIC PROCESS)
 |       DSPLY_CLT_SETUP_CD IN (2,3) - PROGRAM MAINTAINENCE SETUP (BOOK OF BUSINESS PROCESS / PROGRAM SET-UP)
 |       IF (DSPLY_CLT_SETUP_CD > 3 OR DSPLY_CLT_SETUP_CD = 0), EXIT THE PROCESS
 |       IF (DSPLY_CLT_SETUP_CD IN (2,3) AND OVRD_CLT_SETUP_IN = 1), RESET DSPLY_CLT_SETUP_CD =1
 +-----------------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN
    %PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), USE PROGRAM MAINTAINENCE SETUP. ;
%ELSE %IF &DSPLY_CLT_SETUP_CD=1 %THEN
	%PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), USE CLIENT SETUP. ;
%ELSE %DO;
	%PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), EXIT THE PROCESS;
%END;

%IF (&DSPLY_CLT_SETUP_CD = 0 OR &DSPLY_CLT_SETUP_CD > 3) %THEN %DO;
    %LET RESOLVE_CLIENT_TBL_EXIST_FLAG = 0;
	%GOTO EXIT;
%END;

/*%IF ((&DSPLY_CLT_SETUP_CD = 2 OR &DSPLY_CLT_SETUP_CD=3) AND &OVRD_CLT_SETUP_IN=1) %THEN */
/*		%LET DSPLY_CLT_SETUP_CD=1;*/
 
%*SASDOC ----------------------------------------------------------------------------------
 | DROP &TBL_NAME_OUT TABLE THAT ALREADY EXISTS IN THE DATABASE
 +-----------------------------------------------------------------------------------SASDOC;

%DROP_DB2_TABLE(TBL_NAME=&TBL_NAME_OUT); 

%*SASDOC -----------------------------------------------------------------------
 | PROGRAM-MAINTAINENCE SETUP: TPROGRAM_TASK.DSPLY_CLT_SETUP_CD IN (2,3)
 | NOTE: 1)DEFAULT INCLUDE / EXCLUDE IS PASSED AT PROGRAMTASK LEVEL, MEANING 
 |       ALL CLIENTS ASSOCIATED WITH THAT PROGRAM_ID AND TASK_ID WILL HAVE THE 
 |       SAME DEFAULT INCLUDE / EXCLUDE, UNLIKE HERCULES SETUP, IF NO ROWS EXIST
 |       IN TPGMTASK_QL_RUL.
 |       2) IF ROWS EXIST IN TPGMTASK_QL_RUL, THEN THE PROCESS RUNS AS PER
 |       THE RULE SPECIFIED IN CLT_SETUP_DEF_CD IN TPGMTASK_QL_RUL,
 |       AND THE DEFAULT INCLUDE / EXCLUDE SPECIFIED IN PROGRAMTASK IS IGNORED
 |       3) THE OUPUT TABLE CREATED IS BASED ON THE DEFAULT INCLUDE / EXCLUDE 
 |       SPECIFIED AT PROGRAMTASK LEVEL, BECAUSE THE PROCESS THAT CALLS 
 |       RESOLVE_CLIENT HAS BEEN HARD-CODED BASED ON THE INCLUDE / EXCLUDE 
 |       AT PROGRAMTASK LEVEL
 |       4) THE PROCESS FOR PROGRAM MAINTAINENCE SETUP IS CODED TO RUN FOR 
 |       DEFAULT EXCLUDE (MEANING THE FINAL TABLE CREATED HAS THE INCLUDE LIST),
 |       BUT IF THE PROGRAM-TASK BEING RUN IS A DEFAULT INCUDE
 |       THEN THE OUTPUT OF THE FINAL TABLE OBTAINED IS INVERSED
 |       5)DEFAULT INCLUDE (DFL_CLT_INC_EXU_IN = 1), MEANS RUN EXCLUSION LOGIC
 |       DEFAULT EXCLUDE (DFL_CLT_INC_EXU_IN = 0), MEANS RUN INCLUSION LOGIC
 +-------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------------------------
 | CHECK IF ATLEAST A ROW EXISTS FOR THE PROGRAM_ID-TASK_ID COMBINATION IN TPGMTASK_QL_RUL.
 | 1)	IF NO ROW EXISTS, USE THE DEFAULT INCLUDE/EXCLUDE SPECIFIED IN TPROGRAMTASK TABLE
 | 2)	IF EVEN A SINGLE ROW EXISTS, IGNORE THE DEFAULT INCLUDE/EXCLUDE SPECIFIED IN TPROGRAMTASK
 | 		AND USE THE CLT_SETUP_DEF_CD SPECIFIED IN TPGMTASK_QL_RUL AT CLIENT LEVEL AND APPLY
 | 		THE CLIENT SPECIFIC RULE ONLY FOR THOSE CLIENTS IN TPGMTASK_QL_RUL TABLE
 |      PROCESS WILL RUN FOR DEFAULT EXCLUDE, BUT IF IT IS DEFAULT INCLUDE IT WILL INVERSE
 |      THE OUTPUT
 +------------------------------------------------------------------------------------------SASDOC;
%put &strt_date &end_date; 

	PROC SQL NOPRINT;
		CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
		SELECT ROWS_EXIST_QL_RUL
		INTO :ROWS_EXIST_QL_RUL
		FROM CONNECTION TO DB2 
		(
		SELECT  COUNT(*) AS ROWS_EXIST_QL_RUL
		FROM &HERCULES..TPGMTASK_QL_RUL A
		WHERE A.PROGRAM_ID = &PROGRAM_ID. 
	   	  AND A.TASK_ID = &TASK_ID.
		  AND CURRENT DATE BETWEEN 
                                   &strt_date. /*A.EFFECTIVE_DT*/ 
                               AND &end_date.  /*A.EXPIRATION_DT*/
   		);
		DISCONNECT FROM DB2;
	QUIT;
	%PUT NOTE: &ROWS_EXIST_QL_RUL;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------------------------
 | IF NO ROW EXISTS IN TPGMTASK_QL_RUL
 +------------------------------------------------------------------------------------------SASDOC;

	%IF &ROWS_EXIST_QL_RUL = 0 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | SETTING UP MACRO VARIABLE CLIENT_ID_CONDITION, WHICH CAN BE USED BY 
 | THE PROCESS CALLING RESOLVE_CLIENT.SAS
 | NOTE: REFERENCE TO MACRO VARIABLE CLIENT_CONDITION, IS OBTAINED 
 | FROM RESOLVE_CLIENT.SAS 
 +-------------------------------------------------------------------------SASDOC;

		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

			%LET RESOLVE_CLIENT_IDS = %STR();

		%END;
		%ELSE %IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;

			PROC SQL NOPRINT;
	        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
	        	SELECT CLIENT_ID INTO :RESOLVE_CLIENT_IDS SEPARATED BY ' , '
	            FROM CONNECTION TO DB2
	   			(
				SELECT DISTINCT AA.CLIENT_ID
				FROM  &CLAIMSA..TCLIENT1 AA
				INNER JOIN
	        		  (SELECT AAA.CLIENT_ID, AAA.CLT_PLAN_GROUP_ID
	                   FROM &CLAIMSA..TCPGRP_CLT_PLN_GR1 AAA
					       ,&CLAIMSA..TRPTDT_RPT_GRP_DTL BBB
					   WHERE AAA.CLT_PLAN_GROUP_ID=BBB.CLT_PLAN_GROUP_ID) A
				ON A.CLIENT_ID = AA.CLIENT_ID
				WHERE DISCONTINUE_POS_IN = 0 OR
					  DISCONTINUE_PCS_IN = 0 OR
					  DISCONTINUE_MOR_IN = 0
				);
				DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%IF &RESOLVE_CLIENT_IDS. NE	%THEN  
			%LET CLIENT_ID_CONDITION = %STR(AND CLIENT_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.)); 
		%ELSE  
			%LET CLIENT_ID_CONDITION = ; 

		%PUT NOTE: RESOLVE_CLIENT_IDS=&RESOLVE_CLIENT_IDS;
		%PUT NOTE: CLIENT_ID_CONDITION = &CLIENT_ID_CONDITION;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 0, RUN THE INCLUSION / EXCLUSION LOGIC
 | TO OBATIN CPGIDs 
 +-------------------------------------------------------------------------SASDOC;
 
		%IF &NO_OUTPUT_TABLES_IN.= 1 %THEN 
			%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE &TBL_NAME_OUT WITH THE LIST OF CLIENT_IDs AND CPGs
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
			CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
			EXECUTE 
			(
			CREATE TABLE &TBL_NAME_OUT. AS
			(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
			 FROM &HERCULES..TINIT_CLIENT_RULE RL,
				  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
			 DEFINITION ONLY NOT LOGGED INITIALLY
			)BY DB2;

			EXECUTE
			(
			ALTER TABLE &TBL_NAME_OUT. ACTIVATE NOT LOGGED INITIALLY 
			) BY DB2;
			DISCONNECT FROM DB2;
		QUIT;

		%IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;

			PROC SQL NOPRINT;
	        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
	        	EXECUTE
	   			(
				INSERT INTO &TBL_NAME_OUT. (CLIENT_ID, CLT_PLAN_GROUP_ID)
				SELECT DISTINCT AA.CLIENT_ID, A.CLT_PLAN_GROUP_ID
				FROM  &CLAIMSA..TCLIENT1 AA
				INNER JOIN
	        		  (SELECT AAA.CLIENT_ID, AAA.CLT_PLAN_GROUP_ID
	                   FROM &CLAIMSA..TCPGRP_CLT_PLN_GR1 AAA
					       ,&CLAIMSA..TRPTDT_RPT_GRP_DTL BBB
					   WHERE AAA.CLT_PLAN_GROUP_ID=BBB.CLT_PLAN_GROUP_ID) A
				ON A.CLIENT_ID = AA.CLIENT_ID
				WHERE DISCONTINUE_POS_IN = 0 OR
					  DISCONTINUE_PCS_IN = 0 OR
					  DISCONTINUE_MOR_IN = 0
				ORDER BY AA.CLIENT_ID, A.CLT_PLAN_GROUP_ID
				) BY DB2;
				DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

		%END;

 		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG = 1;

	%END;

%*SASDOC -----------------------------------------------------------------------------------------
 | IF ROW EXISTS IN TPGMTASK_QL_RUL
 +------------------------------------------------------------------------------------------SASDOC;

	%ELSE %IF &ROWS_EXIST_QL_RUL >= 1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | CREATE A DATASET CPG_HIERARCHIES WITH FULL CPG LIST ALONG WITH CLT_SETUP_DEF_CD THAT IS 
 | SPECIFIED IN TPGMTASK_QL_RUL.
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
			CREATE TABLE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS
        	SELECT * FROM CONNECTION TO DB2
   			(
			SELECT DISTINCT AA.CLIENT_ID, BB.CLT_PLAN_GROUP_ID,
         		   BB.PLAN_CD, BB.PLAN_EXTENSION_CD,
		 		   BB.GROUP_CD, BB.GROUP_EXTENSION_CD,
		 		   BB.BLG_REPORTING_CD, BB.GROUP_CLASS_CD, 
				   BB.SEQUENCE_NB, ' ' AS PLAN_NM, C.CLT_SETUP_DEF_CD
			FROM  &CLAIMSA..TCLIENT1 AA
			INNER JOIN
        		  (SELECT A.*, B.GROUP_CLASS_CD, B.SEQUENCE_NB
                   FROM &CLAIMSA..TCPGRP_CLT_PLN_GR1 A
				       ,&CLAIMSA..TRPTDT_RPT_GRP_DTL B
				   WHERE A.CLT_PLAN_GROUP_ID=B.CLT_PLAN_GROUP_ID) BB
			ON BB.CLIENT_ID = AA.CLIENT_ID
			INNER JOIN
				  &HERCULES..TPGMTASK_QL_RUL C
			ON AA.CLIENT_ID = C.CLIENT_ID AND 
			   C.PROGRAM_ID = &PROGRAM_ID. AND
			   C.TASK_ID = &TASK_ID. AND
			   CURRENT DATE BETWEEN C.EFFECTIVE_DT AND C.EXPIRATION_DT 
			WHERE DISCONTINUE_POS_IN = 0 OR
				  DISCONTINUE_PCS_IN = 0 OR
				  DISCONTINUE_MOR_IN = 0
			ORDER BY AA.CLIENT_ID, BB.CLT_PLAN_GROUP_ID
			);
			DISCONNECT FROM DB2;
		QUIT;

   TITLE1 "CLINET IDs FOR &INITIATIVE_ID. ";
   PROC SQL;
      SELECT DISTINCT(CLIENT_ID)
      FROM DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID.
      ;
   QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | DATASET PLAN_NM FROM CLAIMSA.TPBW_TEMP_CNVRT TABLE FILTERED BASED ON THE
 | RULES PROVIDED IN HERCULES.TPGMTASK_QL_RUL
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
	        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
			CREATE TABLE PLAN_NM AS
	        SELECT * FROM CONNECTION TO DB2
	   		(
		 	SELECT 	BENEFACTOR_CLT_ID AS CLIENT_ID,
		        	PCL_PBT_ID, 
		        	MOR_PBT_ID, 
		        	POS_PBT_ID, 					
					UPPER(LTRIM(RTRIM(PB_LISTING_NM))) AS PLAN_NM
		 	FROM 	&CLAIMSA..TPBW_TEMP_CNVRT A,
		      		(SELECT CLIENT_ID, PLAN_NM 
					FROM &HERCULES..TPGMTASK_QL_RUL RL
					WHERE RL.PROGRAM_ID = &PROGRAM_ID.
					  AND RL.TASK_ID = &TASK_ID.
					  AND CURRENT DATE BETWEEN RL.EFFECTIVE_DT AND RL.EXPIRATION_DT
				  	  AND (PLAN_NM IS NOT NULL OR PLAN_NM <> ' ') ) B
		 	WHERE 	A.BENEFACTOR_CLT_ID = B.CLIENT_ID AND
		       		UPPER(LTRIM(RTRIM(A.PB_LISTING_NM))) =  UPPER(LTRIM(RTRIM(B.PLAN_NM))) 
			ORDER BY CLIENT_ID, PLAN_NM
	  		);
	    	DISCONNECT FROM DB2;

			SELECT COUNT(*) INTO :PLNMCNT
			FROM PLAN_NM;

		QUIT;

		%SET_ERROR_FL;

		%IF &PLNMCNT >= 1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | TRANSPOSE COLUMNS PCL_PBT_ID, MOR_PBT_ID, POS_PBT_ID IN DATASET PLAN_NM AND
 | STORE IT AS PB_ID
 +-------------------------------------------------------------------------SASDOC;

			DATA TEMP1 (KEEP=CLIENT_ID PCL_PBT_ID PLAN_NM RENAME=(PCL_PBT_ID=PB_ID))
			     TEMP2 (KEEP=CLIENT_ID MOR_PBT_ID PLAN_NM RENAME=(MOR_PBT_ID=PB_ID))
			     TEMP3 (KEEP=CLIENT_ID POS_PBT_ID PLAN_NM RENAME=(POS_PBT_ID=PB_ID));
			 SET PLAN_NM;
			RUN;

			PROC SQL;
              CREATE TABLE PLAN_NM AS
			  SELECT *, 'PCL_PBT_ID' AS PBT_TYPE
			  FROM TEMP1
			  UNION
			  SELECT *, 'MOR_PBT_ID' AS PBT_TYPE
			  FROM TEMP2
			  UNION
			  SELECT *, 'POS_PBT_ID' AS PBT_TYPE
			  FROM TEMP3;
			QUIT;

			PROC SORT DATA = PLAN_NM ;
				BY PBT_TYPE;
			RUN;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET PLAN_NM BY REMOVING ROWS BASED ON DELIVERY_SYSTEM_CD EXCLUSIONS 
 | PROVIDED IN HERCULES.TDELIVERY_SYS_EXCL
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE PLAN_NM2 AS
		 SELECT DISTINCT A.CLIENT_ID, A.PLAN_NM, A.PB_ID
		 FROM PLAN_NM A
		 WHERE NOT EXISTS  (SELECT 1
	           				FROM &HERCULES..TDELIVERY_SYS_EXCL B
			   				WHERE INITIATIVE_ID=&INITIATIVE_ID.
	                          AND A.PBT_TYPE = CASE WHEN DELIVERY_SYSTEM_CD = 1 THEN 'PCL_PBT_ID' 
			  			   							WHEN DELIVERY_SYSTEM_CD = 2 THEN 'POS_PBT_ID'
						   							WHEN DELIVERY_SYSTEM_CD = 3 THEN 'MOR_PBT_ID'
					                           END
							);
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET PLAN_NM TO BRING IN CLT_PLAN_GROUP_ID FROM CLAIMSA.TCPG_PB_TRL_HIST
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE PLAN_NM AS
		 SELECT DISTINCT A.CLIENT_ID, A.PLAN_NM, A.PB_ID, B.CLT_PLAN_GROUP_ID
		 FROM PLAN_NM2 A,
		      &CLAIMSA..TCPG_PB_TRL_HIST B
		 WHERE A.PB_ID = B.PB_ID AND
		       TODAY() BETWEEN B.EFF_DT AND B.EXP_DT
         ORDER BY CLIENT_ID, CLT_PLAN_GROUP_ID ;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET CPG_HIERARCHIES TO BRING IN PLAN_NM AS DERIVED ABOVE
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS
		 SELECT A.*, B.PLAN_NM
		 FROM DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. (DROP=PLAN_NM) A
		 LEFT JOIN
		      PLAN_NM B
		 ON A.CLIENT_ID = B.CLIENT_ID AND
		    A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID;
		QUIT;

/*		%RESET_SQL_ERR_CD;*/
/*		%SET_ERROR_FL;*/

		%END;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT INCLUSION: CLT_SETUP_DEF_CD=1.
 | CREATE DATASET CLIENT_CPG_LIST WITH THE CONSTRAINT CLT_SETUP_DEF_CD=1.
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CREATE TABLE DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID. AS
      		SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID, A.CLT_SETUP_DEF_CD
		 	FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
		 	WHERE A.CLT_SETUP_DEF_CD = 1;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RULE_DEF WITH A LIST OF CLIENTID
 | THEIR HIERARCHIES AND SET-UP DEFINITIONS (WHOLE CLIENT, CLIENT WITH EXCLUSIONS,
 | PARTIAL CLIENT INCLUSIONS, FROM TABLES TINIT_CLIENT_RULE & TINIT_CLT_RULE_DEF
 | IN HERCULES SCHEMA, ONLY FOR THE CLIENTS OF INTEREST
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
			CREATE TABLE RULE_DEF AS
        	SELECT * FROM CONNECTION TO DB2
   			(
			SELECT DISTINCT RL.*
        	FROM &HERCULES..TPGMTASK_QL_RUL RL
			WHERE  RL.PROGRAM_ID = &PROGRAM_ID. AND
			   	   RL.TASK_ID = &TASK_ID. AND
			   	   CURRENT DATE BETWEEN RL.EFFECTIVE_DT AND RL.EXPIRATION_DT
			ORDER BY RL.CLIENT_ID
  			);
    		DISCONNECT FROM DB2;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET CPG_INCEXC WITH THE REQUIRED TABLE STRUCTURE.
 | ROWS WILL BE INSERTED INTO THIS TABLE FOR INCLUDES AND EXCLUDES BASED ON HIERARCHY_CONS
 +-------------------------------------------------------------------------SASDOC;

		%LET HIERARCHY_CONS = %STR( AND (RULE.GROUP_CLASS_CD = 0 OR
                 					CPG.GROUP_CLASS_CD = RULE.GROUP_CLASS_CD)
            						AND (RULE.GROUP_CLASS_SEQ_NB = 0 OR
                 					CPG.SEQUENCE_NB = RULE.GROUP_CLASS_SEQ_NB)
            						AND (RULE.BLG_REPORTING_CD = ' ' OR
                 					UPCASE(LEFT(TRIM(RULE.BLG_REPORTING_CD))) = UPCASE(LEFT(TRIM(CPG.BLG_REPORTING_CD))))
            						AND (RULE.PLAN_CD_TX = ' ' OR
                 					UPCASE(LEFT(TRIM(RULE.PLAN_CD_TX))) = UPCASE(LEFT(TRIM(CPG.PLAN_CD))))
            						AND (RULE.PLAN_EXT_CD_TX = ' ' OR
                 					UPCASE(LEFT(TRIM(RULE.PLAN_EXT_CD_TX))) = UPCASE(LEFT(TRIM(CPG.PLAN_EXTENSION_CD))))
            						AND (RULE.GROUP_CD_TX = ' ' OR
                 					UPCASE(LEFT(TRIM(RULE.GROUP_CD_TX))) = UPCASE(LEFT(TRIM(CPG.GROUP_CD))))
            						AND (RULE.GROUP_EXT_CD_TX = ' ' OR 
                 					UPCASE(LEFT(TRIM(RULE.GROUP_EXT_CD_TX))) = UPCASE(LEFT(TRIM(CPG.GROUP_EXTENSION_CD))))
            						AND (RULE.PLAN_NM = ' ' OR 
                 					UPCASE(LEFT(TRIM(RULE.PLAN_NM))) = UPCASE(LEFT(TRIM(CPG.PLAN_NM))))
									);

		PROC SQL NOPRINT;
			CREATE TABLE DATA_RES.CPG_INCEXC_&INITIATIVE_ID.	AS
      		SELECT  CPG.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID, RULE.CLT_SETUP_DEF_CD
			FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS CPG
		     	 ,RULE_DEF RULE
			WHERE CPG.CLIENT_ID = RULE.CLIENT_ID 
		  	  AND CPG.CLT_SETUP_DEF_CD IN (2,3)
		  	&HIERARCHY_CONS. 
			ORDER BY CPG.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 3
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 3
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			INSERT INTO DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.
      		SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID, B.CLT_SETUP_DEF_CD 
		 	FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
		      	 ,DATA_RES.CPG_INCEXC_&INITIATIVE_ID. B
		 	WHERE B.CLT_SETUP_DEF_CD = 3 
		      AND A.CLIENT_ID = B.CLIENT_ID
		   	  AND A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID;
		QUIT;

		%SET_ERROR_FL;

		PROC SORT DATA = DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.; 
			BY CLIENT_ID CLT_PLAN_GROUP_ID;
		RUN;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS AND WHOLE CLIENT EXCLUDE LOGIC.
 | IF FOR A PROGRAM TASK, THERE EXISTS BOTH CLT_SETUP_DEF_CD 2 AND 4, THEN
 | ONLY THE LOGIC FOR CLT_SETUP_DEF_CD = 2 EXECUTES AS IT TAKES CARE OF THE OTHER
 | SCENERIO ALSO.
 | IF EITHER CLT_SETUP_DEF_CD = 2 OR CLT_SETUP_DEF_CD = 4 THEN THE CORRESPONDING
 | LOGIC EXECUTES.
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
			SELECT EXCCOUNT, MAX_DEF_CD
			INTO :EXCCOUNT, :MAX_DEF_CD
        	FROM CONNECTION TO DB2
   			(
			SELECT COUNT(DISTINCT CLT_SETUP_DEF_CD) as EXCCOUNT
			      ,MAX(CLT_SETUP_DEF_CD) AS MAX_DEF_CD
			FROM &HERCULES..TPGMTASK_QL_RUL 
			WHERE PROGRAM_ID = &PROGRAM_ID. 
		      AND TASK_ID = &TASK_ID. 
		  	  AND CURRENT DATE BETWEEN EFFECTIVE_DT AND EXPIRATION_DT
		  	  AND CLT_SETUP_DEF_CD IN (2,4)
  			);
    		DISCONNECT FROM DB2;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 2
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE NOT IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 2, BUT IN CPG_HIERARCHIES WHERE CLT_SETUP_DEF_CD = 2 OR 
 | CLT_SETUP_DEF_CD IS NULL
 +----------------------------------------------------------------------------SASDOC*;
		%IF (&EXCCOUNT = 1 AND &MAX_DEF_CD = 2) OR 
			(&EXCCOUNT = 2 AND &MAX_DEF_CD = 4) 
		%THEN %DO;

/*			PROC SQL NOPRINT;*/
/*				INSERT INTO CLIENT_CPG_LIST*/
/*      			SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID, A.CLT_SETUP_DEF_CD*/
/*		 		FROM  CPG_HIERARCHIES AS A*/
/*         		WHERE (A.CLT_SETUP_DEF_CD = 2 OR A.CLT_SETUP_DEF_CD IS NULL)*/
/*		   	  	  AND NOT EXISTS (SELECT 1*/
/*		                   	  	  FROM CPG_INCEXC B*/
/*                           	      WHERE B.CLT_SETUP_DEF_CD = 2 */
/*								  AND A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID*/
/*						     	  AND A.CLIENT_ID = B.CLIENT_ID*/
/*						     	  );*/
/*			QUIT;*/

			PROC SQL NOPRINT;
				CREATE TABLE DATA_RES.CPG_HIERARCHIES2_&INITIATIVE_ID. AS
      			SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID, A.CLT_SETUP_DEF_CD
		 		FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
                WHERE A.CLT_SETUP_DEF_CD = 2 OR A.CLT_SETUP_DEF_CD IS NULL;
			QUIT;

            PROC SQL;
				CREATE TABLE DATA_RES.CPG_INCEXC2_&INITIATIVE_ID. AS
				SELECT B.CLIENT_ID, B.CLT_PLAN_GROUP_ID
		        FROM DATA_RES.CPG_INCEXC_&INITIATIVE_ID. B
                WHERE B.CLT_SETUP_DEF_CD = 2;
			QUIT;

			DATA DATA_RES.CLIENT_CPG_LIST_TMP_&INITIATIVE_ID.;
				MERGE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID.(WHERE=(CLT_SETUP_DEF_CD = 2 OR CLT_SETUP_DEF_CD IS NULL) IN=A)
				      DATA_RES.CPG_INCEXC_&INITIATIVE_ID.(WHERE=(CLT_SETUP_DEF_CD = 2) IN=B);
			    BY CLIENT_ID CLT_PLAN_GROUP_ID;
                IF A AND NOT B THEN OUTPUT;
            RUN; 

			PROC SQL NOPRINT;
				INSERT INTO DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.
				SELECT CLIENT_ID, CLT_PLAN_GROUP_ID, CLT_SETUP_DEF_CD
				FROM DATA_RES.CLIENT_CPG_LIST_TMP_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%ELSE %IF (&EXCCOUNT = 1 AND &MAX_DEF_CD = 4) 
		%THEN %DO;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 4
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 4
 +----------------------------------------------------------------------------SASDOC*;

			PROC SQL NOPRINT;
				INSERT INTO DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.
      			SELECT  DISTINCT CLIENT_ID, CLT_PLAN_GROUP_ID, CLT_SETUP_DEF_CD
		 		FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. 
		 		WHERE CLT_SETUP_DEF_CD IS NULL; 
			QUIT;

			%SET_ERROR_FL;

		%END;

		PROC SORT DATA = DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID. OUT=DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.; 
			BY CLIENT_ID CLT_PLAN_GROUP_ID;
		RUN;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

			DATA DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.;
				MERGE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. (IN=A)
			      	  DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID. (IN=B);
				BY CLIENT_ID CLT_PLAN_GROUP_ID;
				IF A = 1 AND B = 0 THEN OUTPUT DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.;
			RUN;

			%SET_ERROR_FL;

		%END;

%*SASDOC -----------------------------------------------------------------------
 | GET THE LIST OF CLIENT_IDs AND STORE IT IN MV CLIENT_ID_CONDITION
 +-------------------------------------------------------------------------SASDOC;

		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;
			%LET WHERE_CONS = %STR(WHERE CLT_SETUP_DEF_CD NOT IN (2,3));
		%END;
		%ELSE %IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;
			%LET WHERE_CONS = %STR();
		%END;

		%IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;
		PROC SQL NOPRINT;
			SELECT DISTINCT CLIENT_ID
            INTO :RESOLVE_CLIENT_IDS SEPARATED BY ' , '
			FROM  DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.
        	&WHERE_CONS.;
		QUIT;
		%END;
		%ELSE %DO;
		PROC SQL NOPRINT;
			SELECT DISTINCT CLIENT_ID
            INTO :RESOLVE_CLIENT_IDS SEPARATED BY ' , '
			FROM  DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.
        	&WHERE_CONS.;
		QUIT;
		%END;

		%SET_ERROR_FL;

		%IF &RESOLVE_CLIENT_IDS NE %THEN %DO;
			%LET CLIENT_ID_CONDITION = %STR(AND CLIENT_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.)); 
			%LET CLIENT_ID_CONDITION2 = %STR(AND A.CLIENT_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.)); 
		%END;
		%ELSE %DO;
		    %LET CLIENT_ID_CONDITION =;
		    %LET CLIENT_ID_CONDITION2 =;
		%END;

		%PUT NOTE: RESOLVE_CLIENT_IDS=&RESOLVE_CLIENT_IDS;
		%PUT NOTE: CLIENT_ID_CONDITION = &CLIENT_ID_CONDITION;


		%IF &NO_OUTPUT_TABLES_IN.= 1 %THEN 
			%GOTO EXIT;
%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE &TBL_NAME_OUT. WITH DATASET CLIENT_CPG_LIST2
 +----------------------------------------------------------------------------SASDOC*;
  
/*			DATA &TBL_NAME_OUT.(INSERTBUFF=25 DBCOMMIT=5000);*/
/*				SET DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID. (KEEP = CLIENT_ID CLT_PLAN_GROUP_ID );*/
/*			RUN;*/

		%IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;

			PROC SQL;
				CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
				EXECUTE 
				(
				CREATE TABLE &TBL_NAME_OUT. AS
				(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
				 FROM &HERCULES..TINIT_CLIENT_RULE RL,
					  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
				 DEFINITION ONLY NOT LOGGED INITIALLY
				)BY DB2;

				EXECUTE
				(
				ALTER TABLE &TBL_NAME_OUT. ACTIVATE NOT LOGGED INITIALLY 
				) BY DB2;
			DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

			PROC SQL; 
				INSERT INTO &TBL_NAME_OUT.
				(CLIENT_ID, CLT_PLAN_GROUP_ID)
   				SELECT DISTINCT CLIENT_ID, CLT_PLAN_GROUP_ID 
				FROM DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

			PROC SQL; 
				DROP TABLE DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

			PROC SQL;
				CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
				EXECUTE 
				(
				CREATE TABLE &TBL_NAME_OUT. AS
				(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
				 FROM &HERCULES..TINIT_CLIENT_RULE RL,
					  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
				 DEFINITION ONLY NOT LOGGED INITIALLY
				)BY DB2;

				EXECUTE
				(
				ALTER TABLE &TBL_NAME_OUT. ACTIVATE NOT LOGGED INITIALLY 
				) BY DB2;
			DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

			PROC SQL; 
				INSERT INTO &TBL_NAME_OUT.
				(CLIENT_ID, CLT_PLAN_GROUP_ID)
   				SELECT DISTINCT CLIENT_ID, CLT_PLAN_GROUP_ID 
				FROM DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

			PROC SQL; 
				DROP TABLE DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

		%END;

	%LET RESOLVE_CLIENT_TBL_EXIST_FLAG = 1;

	%END;

%END;

%SET_ERROR_FL;
%ON_ERROR( ACTION=ABORT
          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL
          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID
          ,EM_MSG=%STR(A PROBLEM WAS ENCOUNTERED IN THE &MAC_NAME. MACRO PLEASE CHECK THE LOG ASSOCIATED WITH INITIATIVE_ID &INITIATIVE_ID.));

%*SASDOC -----------------------------------------------------------------------
 | INITIATIVE SETUP: TPROGRAM_TASK.DSPLY_CLT_SETUP_CD=2 OR OVRD_CLT_SETUP_IN = 1
 | NOTE: THE SETUP CAN BE SPLIT INTO THREE CATEGORIES
 |       1) WHOLE CLIENT INCLUSION, DEFAULT EXCLUDE IN COMMUNICATION ENGINE 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 1)
 |       2) CLIENT WITH EXCLUSIONS 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 2)
 |       3) PARTIAL CLIENT -INCLUSIONS ONLY 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 3)
 +-------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | CREATE A COMMA SEPARATED MACRO VARIABLE RESOLVE_CLIENT_IDS WITH THE LIST 
 | OF CLIENT_IDs FROM TPGMTASK_QL_RUL BASED ON PROGRAM_ID AND TASK_ID
 +-------------------------------------------------------------------------SASDOC;

	%IF RESOLVE_CLIENT_EXCLUDE_FLAG=1 %THEN 
		%LET STR_CLT_SETUP_DEF_CD=%STR(AND CLT_SETUP_DEF_CD = 1);
	%ELSE
		%LET STR_CLT_SETUP_DEF_CD=;

	PROC SQL NOPRINT;
 		SELECT DISTINCT CLIENT_ID  
 		INTO :RESOLVE_CLIENT_IDS SEPARATED BY ','
  		FROM &HERCULES..TINIT_CLT_RULE_DEF
   		WHERE INITIATIVE_ID=&INITIATIVE_ID
     	&STR_CLT_SETUP_DEF_CD. 
	 	;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | SETTING UP MACRO VARIABLE CLIENT_ID_CONDITION, WHICH CAN BE USED BY 
 | THE PROCESS CALLING RESOLVE_CLIENT.SAS
 | NOTE: REFERENCE TO MACRO VARIABLE CLIENT_CONDITION, IS OBTAINED 
 | FROM RESOLVE_CLIENT.SAS 
 +-------------------------------------------------------------------------SASDOC;

	%IF &RESOLVE_CLIENT_IDS. NE %THEN  
		%LET CLIENT_ID_CONDITION=%STR(AND CLIENT_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.));
	%ELSE  
		%LET CLIENT_ID_CONDITION=; 

	%PUT NOTE: RESOLVE_CLIENT_IDS=&RESOLVE_CLIENT_IDS;
	%PUT NOTE: CLIENT_ID_CONDITION = &CLIENT_ID_CONDITION;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
	%IF &NO_OUTPUT_TABLES_IN.= 1 %THEN 
		%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET CPG_HIERARCHIES WITH A LIST OF CLIENTID
 | ALONG WITH THEIR HIERARCHIES FROM TABLES TCPGRP_CLT_PLN_GR1 & TRPTDT_RPT_GRP_DTL
 | IN CLAIMSA SCHEMA, ONLY FOR THE CLIENTS OF INTEREST
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
		CREATE TABLE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS
        SELECT * FROM CONNECTION TO DB2
   		(
		SELECT DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID,
         				A.PLAN_CD, A.PLAN_EXTENSION_CD,
		 				A.GROUP_CD, A.GROUP_EXTENSION_CD,
		 				A.BLG_REPORTING_CD, B.GROUP_CLASS_CD, 
						B.SEQUENCE_NB, ' ' AS PLAN_NM, C.CLT_SETUP_DEF_CD
        FROM  &CLAIMSA..TCPGRP_CLT_PLN_GR1 A
		INNER JOIN 
              &HERCULES..TINIT_CLT_RULE_DEF C
        ON A.CLIENT_ID = C.CLIENT_ID AND
           C.INITIATIVE_ID=&INITIATIVE_ID.
		INNER JOIN 
			  &CLAIMSA..TRPTDT_RPT_GRP_DTL B
        ON A.CLT_PLAN_GROUP_ID=B.CLT_PLAN_GROUP_ID
		ORDER BY A.CLIENT_ID, A.CLT_PLAN_GROUP_ID
		);
		DISCONNECT FROM DB2;
	QUIT;

	%SET_ERROR_FL;
%*SASDOC -----------------------------------------------------------------------
 | DATASET PLAN_NM FROM CLAIMSA.TPBW_TEMP_CNVRT TABLE FILTERED BASED ON THE
 | RULES PROVIDED IN HERCULES.TINIT_CLIENT_RULE
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
		CREATE TABLE PLAN_NM AS
        SELECT * FROM CONNECTION TO DB2
   		(
	 	SELECT 	BENEFACTOR_CLT_ID AS CLIENT_ID,
	        	PCL_PBT_ID, 
	        	MOR_PBT_ID, 
	        	POS_PBT_ID, 				
				UPPER(LTRIM(RTRIM(PB_LISTING_NM))) AS PLAN_NM
	 	FROM 	&CLAIMSA..TPBW_TEMP_CNVRT A,
	      		(SELECT CLIENT_ID, PLAN_NM 
				FROM &HERCULES..TINIT_CLIENT_RULE RL
				WHERE RL.INITIATIVE_ID=&INITIATIVE_ID.
			  	  AND (PLAN_NM IS NOT NULL OR PLAN_NM <> '') ) B
	 	WHERE 	A.BENEFACTOR_CLT_ID = B.CLIENT_ID AND	       		
				UPPER(LTRIM(RTRIM(A.PB_LISTING_NM))) =  UPPER(LTRIM(RTRIM(B.PLAN_NM)))
		ORDER BY CLIENT_ID, PLAN_NM
  		);
    	DISCONNECT FROM DB2;

		SELECT COUNT(*) INTO :PLNMCNT
		FROM PLAN_NM;

	QUIT;

	%SET_ERROR_FL;

	%IF &PLNMCNT >= 1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | TRANSPOSE COLUMNS PCL_PBT_ID, MOR_PBT_ID, POS_PBT_ID IN DATASET PLAN_NM AND
 | STORE IT AS PB_ID
 +-------------------------------------------------------------------------SASDOC;

			DATA TEMP1 (KEEP=CLIENT_ID PCL_PBT_ID PLAN_NM RENAME=(PCL_PBT_ID=PB_ID))
			     TEMP2 (KEEP=CLIENT_ID MOR_PBT_ID PLAN_NM RENAME=(MOR_PBT_ID=PB_ID))
			     TEMP3 (KEEP=CLIENT_ID POS_PBT_ID PLAN_NM RENAME=(POS_PBT_ID=PB_ID));
			 SET PLAN_NM;
			RUN;

			PROC SQL;
              CREATE TABLE PLAN_NM AS
			  SELECT *, 'PCL_PBT_ID' AS PBT_TYPE
			  FROM TEMP1
			  UNION
			  SELECT *, 'MOR_PBT_ID' AS PBT_TYPE
			  FROM TEMP2
			  UNION
			  SELECT *, 'POS_PBT_ID' AS PBT_TYPE
			  FROM TEMP3;
			QUIT;

			PROC SORT DATA = PLAN_NM;
				BY PBT_TYPE;
			RUN;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET PLAN_NM BY REMOVING ROWS BASED ON DELIVERY_SYSTEM_CD EXCLUSIONS 
 | PROVIDED IN HERCULES.TDELIVERY_SYS_EXCL
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE PLAN_NM2 AS
		 SELECT DISTINCT A.CLIENT_ID, A.PLAN_NM, A.PB_ID
		 FROM PLAN_NM A
		 WHERE NOT EXISTS  (SELECT 1
	           				FROM &HERCULES..TDELIVERY_SYS_EXCL B
			   				WHERE INITIATIVE_ID=&INITIATIVE_ID.
	                          AND A.PBT_TYPE = CASE WHEN DELIVERY_SYSTEM_CD = 1 THEN 'PCL_PBT_ID' 
			  			   							WHEN DELIVERY_SYSTEM_CD = 2 THEN 'POS_PBT_ID'
						   							WHEN DELIVERY_SYSTEM_CD = 3 THEN 'MOR_PBT_ID'
					                           END
							)
         ORDER BY PB_ID;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET PLAN_NM TO BRING IN CLT_PLAN_GROUP_ID FROM CLAIMSA.TCPG_PB_TRL_HIST
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE PLAN_NM AS
		 SELECT DISTINCT A.CLIENT_ID, A.PLAN_NM, A.PB_ID, B.CLT_PLAN_GROUP_ID
		 FROM PLAN_NM2 A,
		      &CLAIMSA..TCPG_PB_TRL_HIST B
		 WHERE A.PB_ID = B.PB_ID AND
		       TODAY() BETWEEN B.EFF_DT AND B.EXP_DT
         ORDER BY CLIENT_ID, CLT_PLAN_GROUP_ID ;
		QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET CPG_HIERARCHIES TO BRING IN PLAN_NM AS DERIVED ABOVE
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL;
	 CREATE TABLE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS
	 SELECT A.*, B.PLAN_NM
	 FROM DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID.(DROP=PLAN_NM) A
	 LEFT JOIN
	      PLAN_NM B
	 ON A.CLIENT_ID = B.CLIENT_ID AND
	    A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID;
	QUIT;

/*	%RESET_SQL_ERR_CD;*/
/*	%SET_ERROR_FL;*/

	%END;
%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RULE_DEF WITH A LIST OF CLIENTID
 | THEIR HIERARCHIES AND SET-UP DEFINITIONS (WHOLE CLIENT, CLIENT WITH EXCLUSIONS,
 | PARTIAL CLIENT INCLUSIONS, FROM TABLES TINIT_CLIENT_RULE & TINIT_CLT_RULE_DEF
 | IN HERCULES SCHEMA, ONLY FOR THE CLIENTS OF INTEREST
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
		CREATE TABLE RULE_DEF AS
        SELECT * FROM CONNECTION TO DB2
   		(
		SELECT DISTINCT RL.*, SETUP.CLT_SETUP_DEF_CD
        FROM  &HERCULES..TINIT_CLIENT_RULE RL,
              &HERCULES..TINIT_CLT_RULE_DEF SETUP
		WHERE RL.INITIATIVE_ID=&INITIATIVE_ID. 
          AND RL.INITIATIVE_ID=SETUP.INITIATIVE_ID
          AND RL.CLIENT_ID = SETUP.CLIENT_ID
		ORDER BY RL.CLIENT_ID
  		);
    	DISCONNECT FROM DB2;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT INCLUSION: CLT_SETUP_DEF_CD=1.
 | CREATE DATASET CLIENT_CPG_LIST WITH THE CONSTRAINT CLT_SETUP_DEF_CD=1.
 +----------------------------------------------------------------------------SASDOC*;

	PROC SQL NOPRINT;
		CREATE TABLE DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID. AS
      	SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID
		 FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
		 WHERE A.CLT_SETUP_DEF_CD = 1;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET CPG_INCEXC WITH THE REQUIRED TABLE STRUCTURE.
 | ROWS WILL BE INSERTED INTO THIS TABLE FOR INCLUDES AND EXCLUDES BASED ON HIERARCHY_CONS
 +-------------------------------------------------------------------------SASDOC;

	%LET HIERARCHY_CONS = %STR( AND (RULE.GROUP_CLASS_CD IS NULL OR
                 					CPG.GROUP_CLASS_CD = RULE.GROUP_CLASS_CD)
            					AND (RULE.GROUP_CLASS_SEQ_NB IS NULL OR
                 					CPG.SEQUENCE_NB = RULE.GROUP_CLASS_SEQ_NB)
            					AND (RULE.BLG_REPORTING_CD IS NULL OR
                 					UPCASE(LEFT(TRIM(RULE.BLG_REPORTING_CD))) = UPCASE(LEFT(TRIM(CPG.BLG_REPORTING_CD))))
            					AND (RULE.PLAN_CD_TX IS NULL OR  
                 					UPCASE(LEFT(TRIM(RULE.PLAN_CD_TX))) = UPCASE(LEFT(TRIM(CPG.PLAN_CD))))
            					AND (RULE.PLAN_EXT_CD_TX IS NULL OR
                 					UPCASE(LEFT(TRIM(RULE.PLAN_EXT_CD_TX))) = UPCASE(LEFT(TRIM(CPG.PLAN_EXTENSION_CD))))
            					AND (RULE.GROUP_CD_TX IS NULL OR
                 					UPCASE(LEFT(TRIM(RULE.GROUP_CD_TX))) = UPCASE(LEFT(TRIM(CPG.GROUP_CD))))
            					AND (RULE.GROUP_EXT_CD_TX IS NULL OR 
                 					UPCASE(LEFT(TRIM(RULE.GROUP_EXT_CD_TX))) = UPCASE(LEFT(TRIM(CPG.GROUP_EXTENSION_CD))))
            					AND ((RULE.PLAN_NM IS NULL OR RULE.PLAN_NM = ' ') OR
                 					UPCASE(LEFT(TRIM(RULE.PLAN_NM))) = UPCASE(LEFT(TRIM(CPG.PLAN_NM))))
								);

	PROC SQL NOPRINT;
		CREATE TABLE DATA_RES.CPG_INCEXC_&INITIATIVE_ID.	AS
      	SELECT  CPG.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID, RULE.CLT_SETUP_DEF_CD
		FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS CPG
		     ,RULE_DEF RULE
		WHERE CPG.CLIENT_ID = RULE.CLIENT_ID 
		  AND CPG.CLT_SETUP_DEF_CD IN (1,2,3)
		  &HIERARCHY_CONS. 
		ORDER BY CPG.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 2
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE NOT IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 2
 +----------------------------------------------------------------------------SASDOC*;

	PROC SQL NOPRINT;
		INSERT INTO DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.
      	SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID
		 FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
         WHERE A.CLT_SETUP_DEF_CD = 2
		   AND NOT EXISTS (SELECT B.CLIENT_ID, B.CLT_PLAN_GROUP_ID
		                   FROM DATA_RES.CPG_INCEXC_&INITIATIVE_ID. B
                           WHERE A.CLIENT_ID = B.CLIENT_ID
						     AND B.CLT_SETUP_DEF_CD = 2
						     AND A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID);
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 3
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 3
 +----------------------------------------------------------------------------SASDOC*;

	PROC SQL NOPRINT;
		INSERT INTO DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.
      	SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID
		 FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
		      ,DATA_RES.CPG_INCEXC_&INITIATIVE_ID. B
		 WHERE B.CLT_SETUP_DEF_CD = 3 
		   AND A.CLIENT_ID = B.CLIENT_ID
		   AND A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE CLIENT_CPG_LIST IN &DB2_TMP. WITH DATASET CLIENT_CPG_LIST
 +----------------------------------------------------------------------------SASDOC*;

/*	DATA &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID.(INSERTBUFF=25 DBCOMMIT=5000);*/
/*		SET DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID. (KEEP = CLIENT_ID CLT_PLAN_GROUP_ID );*/
/*	RUN;*/

	PROC SQL;
		CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
		EXECUTE 
		(
		CREATE TABLE &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID. AS
		(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
		 FROM &HERCULES..TINIT_CLIENT_RULE RL,
			  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
		 DEFINITION ONLY NOT LOGGED INITIALLY
		)BY DB2;

		EXECUTE
		(
		ALTER TABLE &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID. ACTIVATE NOT LOGGED INITIALLY 
		) BY DB2;
		DISCONNECT FROM DB2;
	QUIT;

	%SET_ERROR_FL;

	PROC SQL; 
		INSERT INTO &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID.
		(CLIENT_ID, CLT_PLAN_GROUP_ID)
   		SELECT DISTINCT CLIENT_ID, CLT_PLAN_GROUP_ID 
		FROM DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.;
	QUIT;

	%SET_ERROR_FL;

	PROC SQL; 
		DROP TABLE DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------------
 | MERGE WITH CPG HISTORY TABLES TO GET CURRENT CPGs. 
 | NEED TO AWARE THAT WHEN USING THE CURRENT CPGs TO SELECT CLAIMS SOME CLAIMS 
 | WILL BE LEFT WHEN CLAIMS WERE COVERED UNDER OLDER CPGS.
 +------------------------------------------------------------------------------SASDOC*;

	PROC SQL;
		CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
		EXECUTE 
		(
		CREATE TABLE &TBL_NAME_OUT. AS
		(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
		 FROM &HERCULES..TINIT_CLIENT_RULE RL,
			  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
		 DEFINITION ONLY NOT LOGGED INITIALLY
		)BY DB2;

		EXECUTE
		(
		ALTER TABLE &TBL_NAME_OUT. ACTIVATE NOT LOGGED INITIALLY 
		) BY DB2;
		DISCONNECT FROM DB2;
	QUIT;

	PROC SQL;
     	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
     	EXECUTE
     	(
		INSERT INTO &TBL_NAME_OUT. (CLIENT_ID, CLT_PLAN_GROUP_ID)
		SELECT DISTINCT CPG_IN.*
      	FROM &CLAIMSA..TCPGRP_CLT_PLN_GR1 CLT, 
             &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID. CPG_IN
      	WHERE CPG_IN.CLIENT_ID =CLT.CLIENT_ID
          AND CPG_IN.CLT_PLAN_GROUP_ID=CLT.CLT_PLAN_GROUP_ID
          AND EXISTS
            (SELECT 1
             FROM &CLAIMSA..TCPG_PB_TRL_HIST CPG,
                  &CLAIMSA..TPRESC_BENEFIT PB
             WHERE CLT.CLT_PLAN_GROUP_ID = CPG.CLT_PLAN_GROUP_ID
               AND CPG_IN.CLT_PLAN_GROUP_ID = CPG.CLT_PLAN_GROUP_ID
               AND CPG.PB_ID = PB.PB_ID
               AND CPG.EFF_DT <= CURRENT DATE
               AND CPG.EXP_DT > CURRENT DATE
               AND PB.BEGIN_FILL_DT <= CURRENT DATE
               AND PB.END_FILL_DT > CURRENT DATE
             )
      	)BY DB2;
      	DISCONNECT FROM DB2;
    QUIT;

	%SET_ERROR_FL;

	%RUNSTATS(TBL_NAME=&TBL_NAME_OUT);

	%DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID.);
   	%NOBS(&TBL_NAME_OUT);

    %IF &NOBS %THEN 
		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG=1;
	%ELSE 
		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG=0;

%END;

%EXIT:;

%*SASDOC -----------------------------------------------------------------------------
 | IF TBL_NAME_IN AND TBL_NAME_OUT2 ARE PASSED AS INPUT PARAMETERS, THEN
 | IF &EXECUTE_CONDITION_FLAG.=1 THEN 
 |       POPULATE &TBL_NAME_OUT2. BASED ON &TBL_NAME_IN. AND &TBL_NAME_OUT.
 | ELSE JUST CREATE &TBL_NAME_OUT2. AS AN ALIAS OF &TBL_NAME_IN. 
 +------------------------------------------------------------------------------SASDOC*;


%IF &TBL_NAME_IN. NE AND &TBL_NAME_OUT2. NE AND &ERR_FL=0 %THEN %DO;
	%DROP_DB2_TABLE(TBL_NAME=&TBL_NAME_OUT2.);

 	%IF &EXECUTE_CONDITION_FLAG.=1 %THEN %DO;	

  		PROC SQL;
   			CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);

   			EXECUTE
			(
			CREATE TABLE &TBL_NAME_OUT2.	AS
      		(SELECT  A.*
			 FROM  &TBL_NAME_IN. AS A
      		)DEFINITION ONLY NOT LOGGED INITIALLY
	       	) BY DB2;

   			EXECUTE
	  		(
			ALTER TABLE &TBL_NAME_OUT2. ACTIVATE NOT LOGGED INITIALLY
			) BY DB2;    
   			DISCONNECT FROM DB2;
  		QUIT;

   		%SET_ERROR_FL;

		PROC SQL NOPRINT;
        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
        	EXECUTE
   			(
			INSERT INTO &TBL_NAME_OUT2.
    	    SELECT A.*
		    FROM &TBL_NAME_IN. A
            LEFT JOIN
		 		 (SELECT *
                  FROM &TBL_NAME_OUT.
                  WHERE CLT_PLAN_GROUP_ID &HIERARCHY_CONDITION. ) B
            ON A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID
			)BY DB2;
   			DISCONNECT FROM DB2;
  		QUIT;

		%SET_ERROR_FL;
		%RUNSTATS(TBL_NAME=&TBL_NAME_OUT2.);

	%END; /* END OF &EXECUTE_CONDITION_FLAG.=1, TRUE */ 
	%ELSE %DO;
		PROC SQL;
   			CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
   			EXECUTE
			(CREATE ALIAS &TBL_NAME_OUT2.  
				FOR &TBL_NAME_IN. 
			) BY DB2;
			DISCONNECT FROM DB2;
		QUIT;

		%SET_ERROR_FL;

	%END; /* END OF &EXECUTE_CONDITION_FLAG.=1, FALSE */ 

%END;

%MACRO DROP_SAS_DSN(DSN = );

%IF %SYSFUNC(EXIST(&DSN)) %THEN %DO;
	PROC SQL; 
		DROP TABLE &DSN.;
	QUIT;
%END;

%MEND DROP_SAS_DSN;


/*%DROP_SAS_DSN(DSN = DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CPG_INCEXC_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CPG_HIERARCHIES2_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CPG_INCEXC2_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CLIENT_CPG_LIST_TMP_&INITIATIVE_ID.);*/

/*%ON_ERROR( ACTION=ABORT*/
/*          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL*/
/*          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID*/
/*          ,EM_MSG=%STR(A PROBLEM WAS ENCOUNTERED IN THE &MAC_NAME. MACRO PLEASE CHECK THE LOG ASSOCIATED WITH INITIATIVE_ID &INITIATIVE_ID.));*/

%MEND RESOLVE_CLIENT_QL_11304;


%MACRO RESOLVE_CLIENT_11304(TBL_NAME_IN = ,
                      TBL_NAME_IN_RX = ,
                      TBL_NAME_IN_RE = ,

					  TBL_NAME_OUT = ,
					  TBL_NAME_OUT_RX = ,
					  TBL_NAME_OUT_RE = ,

					  TBL_NAME_OUT2 = ,
					  TBL_NAME_OUT_RX2 = ,
					  TBL_NAME_OUT_RE2 = ,

					  NO_OUTPUT_TABLES_IN = 0 ,
					  NO_OUTPUT_TABLES_IN_RX = 0 ,
					  NO_OUTPUT_TABLES_IN_RE = 0 ,

					  EXECUTE_CONDITION = %STR(1=1)
					 );

%*SASDOC -------------------------------------------------------------------------
 | INITIALIZE THE GLOBAL ERROR FLAG ERR_FL = 0, WHICH IS SET TO 1 BY SET_ERR_FL MACRO
 +---------------------------------------------------------------------------SASDOC;

%LET ERR_FL = 0;

%*SASDOC -------------------------------------------------------------------------
 | MACRO VARIABLES OBTAINED FROM HERCULES_IN.SAS
 +---------------------------------------------------------------------------SASDOC;

%PUT NOTE: INITIATIVE_ID = &INITIATIVE_ID;
%PUT NOTE: QL_ADJ = &QL_ADJ;
%PUT NOTE: RX_ADJ = &RX_ADJ;
%PUT NOTE: RE_ADJ = &RE_ADJ;
%PUT NOTE: PROGRAM_ID = &PROGRAM_ID;
%PUT NOTE: TASK_ID = &TASK_ID;
%PUT NOTE: DFL_CLT_INC_EXU_IN = &DFL_CLT_INC_EXU_IN;
%PUT NOTE: OVRD_CLT_SETUP_IN = &OVRD_CLT_SETUP_IN;
%PUT NOTE: DSPLY_CLT_SETUP_CD = &DSPLY_CLT_SETUP_CD;
%PUT NOTE: DB2_TMP = &DB2_TMP;
%PUT NOTE: TABLE_PREFIX = &TABLE_PREFIX;

%*SASDOC -------------------------------------------------------------------------
 | MACRO VARIABLES OBTAINED FROM USER INPUT / DEFAULT INPUT
 +---------------------------------------------------------------------------SASDOC;

%PUT NOTE: TBL_NAME_IN = &TBL_NAME_IN;
%PUT NOTE: TBL_NAME_IN_RX = &TBL_NAME_IN_RX;
%PUT NOTE: TBL_NAME_IN_RE = &TBL_NAME_IN_RE;
%PUT NOTE: TBL_NAME_OUT = &TBL_NAME_OUT;
%PUT NOTE: TBL_NAME_OUT_RX = &TBL_NAME_OUT_RX;
%PUT NOTE: TBL_NAME_OUT_RE = &TBL_NAME_OUT_RE;
%PUT NOTE: TBL_NAME_OUT2 = &TBL_NAME_OUT2;
%PUT NOTE: TBL_NAME_OUT_RX2 = &TBL_NAME_OUT_RX2;
%PUT NOTE: TBL_NAME_OUT_RE2 = &TBL_NAME_OUT_RE2;
%PUT NOTE: NO_OUTPUT_TABLES_IN = &NO_OUTPUT_TABLES_IN;
%PUT NOTE: NO_OUTPUT_TABLES_IN_RX = &NO_OUTPUT_TABLES_IN_RX;
%PUT NOTE: NO_OUTPUT_TABLES_IN_RE = &NO_OUTPUT_TABLES_IN_RE;
%PUT NOTE: EXECUTE_CONDITION = &EXECUTE_CONDITION;

%*SASDOC -------------------------------------------------------------------------
 | DEFINE GLOBAL MACRO VARIABLES
 | THESE MACRO VARIABLES ARE RESOLVED IN THIS PROCESS AND ARE PASSED ON TO 
 | OTHER PROCESSES THAT CALL RESOLVE_CLIENT.SAS
 +---------------------------------------------------------------------------SASDOC;

%GLOBAL RESOLVE_CLIENT_EXCLUDE_FLAG
		RESOLVE_CLIENT_TBL_EXIST_FLAG
		RESOLVE_CLIENT_TBL_EXIST_FLAG_RX
		RESOLVE_CLIENT_TBL_EXIST_FLAG_RE
		RESOLVE_CLIENT_IDS
		RESOLVE_CARRIER_IDS_RX
		RESOLVE_CLIENT_IDS_RE
		CLIENT_ID_CONDITION
        CLIENT_ID_CONDITION2
/*		LVL_GID_CONDITION_RX*/
/*		LVL_GID_CONDITION_Re*/
        PRIMARY_PROGRAMMER_EMAIL;

%*SASDOC -------------------------------------------------------------------------
 | OBTAIN PRIMARY_PROGRAMMER_EMAIL ADDRESS FROM ADM_LKP.ANALYTICS_USERS
 +---------------------------------------------------------------------------SASDOC;

PROC SQL NOPRINT;
	SELECT QUOTE(TRIM(LEFT(EMAIL)))
	INTO   :PRIMARY_PROGRAMMER_EMAIL SEPARATED BY ' '
	FROM   ADM_LKP.ANALYTICS_USERS
	WHERE  UPCASE(QCP_ID) IN ("QCPJ241","QCPI208");
QUIT;

%SET_ERROR_FL;

%*SASDOC -------------------------------------------------------------------------
 | MACRO VARIABLES THAT ARE INITIALIZED TO DEFAULT VALUES OR 
 | CREATED BASED OFF OTHER MACRO VARIABLES 
 +---------------------------------------------------------------------------SASDOC;

%GLOBAL MAC_NAME;
%LET MAC_NAME = RESOLVE_CLIENT;
%LET RESOLVE_CLIENT_IDS = ;

%IF &DB2_TMP. = 	%THEN
	%LET DB2_TMP=&USER;

%IF &TBL_NAME_OUT = 	%THEN 
	%LET TBL_NAME_OUT = &DB2_TMP..&TABLE_PREFIX._QL;
%IF &TBL_NAME_OUT_RX = 	%THEN 
	%LET TBL_NAME_OUT_RX = &ORA_TMP..&TABLE_PREFIX._RX;
%IF &TBL_NAME_OUT_RE = 	%THEN 
	%LET TBL_NAME_OUT_RE = &ORA_TMP..&TABLE_PREFIX._RE;

%*SASDOC -------------------------------------------------------------------------
 | FOR IMPLICIT CONNECTS IN ORACLE
 | LIBNAME STATEMENT SHOULD BE REMOVED FROM THE CODE AFTER IT HAS BEEN ADDED TO
 | HERCULES_IN.SAS
 +---------------------------------------------------------------------------SASDOC;

/*%LET TBL_NAME_OUT_RE_IMP = &ORA_TMP..&TABLE_PREFIX._RE;*/
/*%LET TBL_NAME_OUT_RX_IMP = &ORA_TMP..&TABLE_PREFIX._RX;*/

%*SASDOC -------------------------------------------------------------------------
 | SETTING UP EXECUTE_CONDITION_FLAG
 +---------------------------------------------------------------------------SASDOC;

%LET EXECUTE_CONDITION_FLAG = %SYSFUNC(SIGN((&EXECUTE_CONDITION)));
%PUT NOTE: EXECUTE_CONDITION_FLAG=&EXECUTE_CONDITION_FLAG;

%*SASDOC -------------------------------------------------------------------------
 | SETTING UP RESOLVE_CLIENT_EXCLUDE_FLAG , CPG_CONDITION , CLIENT_CONDITION MACRO VARIABLE
 | NOTE: ALL THESE FLAGS ARE SET AT INITIATIVE / PROGRAM_TASK LEVEL AND 
 |       NOT AT INITIATIVE - ADJUDICATION / PROGRAM_TASK - ADJUDICATION LEVEL
 +---------------------------------------------------------------------------SASDOC;

/*%IF &DFL_CLT_INC_EXU_IN.=1 AND &OVRD_CLT_SETUP_IN.=0 	*/
%IF &DFL_CLT_INC_EXU_IN.=1 
	%THEN 
		%LET RESOLVE_CLIENT_EXCLUDE_FLAG=1;	
	%ELSE 
		%LET RESOLVE_CLIENT_EXCLUDE_FLAG=0;

%IF &RESOLVE_CLIENT_EXCLUDE_FLAG=1 
	%THEN %DO;
			 %LET HIERARCHY_CONDITION=%STR(IS NULL);
			 %LET CLIENT_CONDITION=NOT;
	%END;
	%ELSE %DO;
			 %LET HIERARCHY_CONDITION=%STR(IS NOT NULL);
			 %LET CLIENT_CONDITION=;
	%END;

%*SASDOC -------------------------------------------------------------------------
 | SANITY CHECK TO MAKE SURE THE INITIATIVE_ID PASSED BY HERCULES_IN.SAS 
 | EXISTS IN TINITIATIVE AND THE CORRESPONDING PROGRAM_ID AND TASK_ID EXISTS
 | IN TPROGRAM AND TPROGRAM_TASK
 +---------------------------------------------------------------------------SASDOC;

PROC SQL NOPRINT;
	SELECT COUNT(*)
	INTO :RECORD_CNT
	FROM &CLAIMSA..TPROGRAM A, 
		 &HERCULES..TINITIATIVE B,
         &HERCULES..TPROGRAM_TASK C
	WHERE B.INITIATIVE_ID = &INITIATIVE_ID.
      AND B.PROGRAM_ID = A.PROGRAM_ID
      AND B.PROGRAM_ID = C.PROGRAM_ID
      AND B.TASK_ID = C.TASK_ID;
QUIT;

%SET_ERROR_FL;

%*SASDOC -------------------------------------------------------------------------
 | RESOLVE_CLIENT EXECUTES ONLY WHEN THE SANITY CHCEK ABOVE RETURNS ONE ROW
 +---------------------------------------------------------------------------SASDOC;

%IF &RECORD_CNT = 1 %THEN %DO;

	%IF &QL_ADJ = 1 %THEN
		%RESOLVE_CLIENT_QL_11304;
	%IF &RX_ADJ = 1 %THEN
		%RESOLVE_CLIENT_RX;
	%IF &RE_ADJ = 1 %THEN 
		%RESOLVE_CLIENT_RE;

%END;
%ELSE %IF &RECORD_CNT = 0 %THEN %DO;
	%PUT WARNING: NO MATCHING INITIATIVE_ID/PROGRAM_ID/TASK_ID WAS FOUND.;
%END;
%ELSE %IF &RECORD_CNT > 1 %THEN %DO;
	%PUT WARNING: DUPLICATES FOUND FOR THE CORRESPONDING INITIATIVE_ID/PROGRAM_ID/TASK_ID;
%END;

%LET MAC_NAME = ;

%MEND RESOLVE_CLIENT_11304;

/*%LET CLT_SETUP_DEF_CD=2;*/

%RESOLVE_CLIENT_11304(TBL_NAME_OUT=&DB2_TMP..&TABLE_PREFIX._CLT_CPG_QL,
                TBL_NAME_OUT_RX=&ORA_TMP..&TABLE_PREFIX._CLT_CPG_RX,
                TBL_NAME_OUT_RE=&ORA_TMP..&TABLE_PREFIX._CLT_CPG_RE) ;

%MACRO LOAD_CLIENT;
%IF &QL_ADJ = 1 %THEN %DO;
   %GLOBAL CLIENT_IDS;
      PROC SQL NOPRINT;
       SELECT DISTINCT CLIENT_ID INTO :CLIENT_IDS SEPARATED BY ','
       FROM &DB2_TMP..&TABLE_PREFIX._CLT_CPG_QL;
    QUIT;
    %PUT NOTE:	CLIENT_IDS = &CLIENT_IDS;
%END;
%MEND LOAD_CLIENT;

%LOAD_CLIENT;

*SASDOC--------------------------------------------------------------------------
| CALL %GET_NDC TO DETERMINE THE MAINTENANCE NDCS
+------------------------------------------------------------------------SASDOC*;

%GET_NDC(DRUG_NDC_TBL=&DB2_TMP..&TABLE_PREFIX._NDC_QL,
         DRUG_NDC_TBL_RX=&ORA_TMP..&TABLE_PREFIX._NDC_RX,
         DRUG_NDC_TBL_RE=&ORA_TMP..&TABLE_PREFIX._NDC_RE
        );
*SASDOC--------------------------------------------------------------------------
| CREATE POS_REVIEW_DAYS MACRO VARIABLE BY READING ACT_NBR_OF_DAYS
| FROM HERCULES.TPHASE_RVR_FILE TABLE 
|		01OCT2008 - K.MITTAPALLI- HERCULES VERSION  2.1.0.2
+------------------------------------------------------------------------SASDOC*;
PROC SQL;
SELECT ACT_NBR_OF_DAYS INTO : POS_REVIEW_DAYS
  FROM &HERCULES..TPHASE_RVR_FILE
 WHERE INITIATIVE_ID = &INITIATIVE_ID
   AND PHASE_SEQ_NB  = &PHASE_SEQ_NB
 ;QUIT;

*SASDOC--------------------------------------------------------------------------
| CREATE MACRO VARIABLES FOR DATES.
|		01OCT2008 - K.MITTAPALLI- HERCULES VERSION  2.1.0.2
+------------------------------------------------------------------------SASDOC*;
/*** NOTE: ADJUST THESE MACRO VARIABLE PER HEAT TICKETS REQUEST ***/
%let POS_REVIEW_DAYS2=159;
%let POS_REVIEW_END=69;

  DATA _NULL_;
  IF &POS_REVIEW_DAYS. >= &POS_REVIEW_DAYS2. THEN DO;
  CALL SYMPUT('CLAIMS_BGN_DT',PUT((TODAY()-&POS_REVIEW_DAYS), YYMMDD10.));
  CALL SYMPUT('CHK_DT',  "'"||PUT(TODAY()-&POS_REVIEW_DAYS, YYMMDD10.)||"'");
  END;
	  ELSE IF &POS_REVIEW_DAYS. < &POS_REVIEW_DAYS2. THEN DO;
	  CALL SYMPUT('CLAIMS_BGN_DT',PUT((TODAY()-&POS_REVIEW_DAYS2), YYMMDD10.));
	  CALL SYMPUT('CHK_DT',  "'"||PUT(TODAY()-&POS_REVIEW_DAYS2, YYMMDD10.)||"'");
	  END;
  CALL SYMPUT('CLAIMS_END_DT',PUT(TODAY()-&POS_REVIEW_END,YYMMDD10.));  
  CALL SYMPUT('CHK_DT2',  "'"||PUT(TODAY()-&POS_REVIEW_DAYS2, YYMMDD10.)||"'");
  RUN;
  %PUT NOTE: CLAIMS_BGN_DT = &CLAIMS_BGN_DT;
  %PUT NOTE: CLAIMS_END_DT = &CLAIMS_END_DT;
  %PUT NOTE: CHK_DT = &CHK_DT;
*SASDOC--------------------------------------------------------------------------
| CALL CLAIMS_PULL_EDW MACRO IN ORDER TO PULL CLAIMS INFORMATION FROM EDW.
|		01OCT2008 - K.MITTAPALLI- HERCULES VERSION  2.1.0.2
+------------------------------------------------------------------------SASDOC*;

%CLAIMS_PULL_EDW(DRUG_NDC_TABLE_RX = &ORA_TMP..&TABLE_PREFIX._NDC_RX, 
                 DRUG_NDC_TABLE_RE = &ORA_TMP..&TABLE_PREFIX._NDC_RE, 
                 RESOLVE_CLIENT_TABLE_RX = &ORA_TMP..&TABLE_PREFIX._CLT_CPG_RX,
                 RESOLVE_CLIENT_TABLE_RE = &ORA_TMP..&TABLE_PREFIX._CLT_CPG_RE
                 );

				 
/***HEADER -------------------------------------------------------------------------
 |  MACRO NAME:     PULL_QL_RETAIL_CLAIMS.SAS
 |
 |  PURPOSE:    TARGETS A CLIENT WHO WOULD LIKE A CUSTOM PROACTIVE MAILING.  THIS
 |              IS A ONE TIME MAILING.
 |              -- Select clients and CPGs
 |              -- get 45 day POS claims
 |              -- do not target if Mail service was used within last 90 days
 |              -- This run for QL only
 |  INPUT:      
 |                        &claimsa..&claim_his_tbl
 |                          &claimsa..TDRUG1
 |
 |  OUTPUT:     Standard datasets in /results and /pending directories
 |
 |
 |  HISTORY:    MAY 2008 - CARL STARKS  Hercules Version  2.1.01
 |                        This is a new macro created to pull claims for QL 
 |                         the logic is the same from the original program.
 |                         the logic was move from the program and made into a macro
 |                         the only change was the input and output files names are
 |                         passed to the macro using macro variables tbl_name_out
 |                         and tnl_name_in 
 +-------------------------------------------------------------------------------HEADER*/


%macro pull_ql_retail_claims_adhoc(tbl_name_in1=,tbl_name_in=,tbl_name_out=,
         ADJ_ENGINE=,CLIENT_IDS=);

options mprint mlogic source2 symbolgen;


DATA _NULL_;

%IF &RESOLVE_CLIENT_EXCLUDE_FLAG = 1 %THEN %DO;
  
    CALL SYMPUT('CLIENT_COND',TRIM(LEFT("NOT EXISTS")));
%END;
%ELSE %IF 
      &RESOLVE_CLIENT_EXCLUDE_FLAG = 0 %THEN  %DO;
       CALL SYMPUT('CLIENT_COND',TRIM(LEFT("EXISTS")));
%END;
RUN;


%IF &PROGRAM_ID NE 105 %THEN %DO;
   %LET WHERECONS = %STR( 	AND &CLIENT_COND. (SELECT 1 FROM &TBL_NAME_IN1. CLT
                       		WHERE A.CLT_PLAN_GROUP_ID = CLT.CLT_PLAN_GROUP_ID ));
%END;
%ELSE %DO;
   %LET WHERECONS = %STR();
%END;

/*  PROC SQL;*/
/*    CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);*/
/*    EXECUTE(CREATE INDEX &TBL_NAME_IN.X1*/
/*          on &TBL_NAME_IN.*/
/*            (NHU_TYPE_CD,*/
/*             DRUG_NDC_ID)*/
/*          ) BY DB2;*/
/*    DISCONNECT FROM DB2;*/
/*  QUIT;*/
  
  %grant(tbl_name=&TBL_NAME_IN.); 
  %RUNSTATS(TBL_NAME=&TBL_NAME_IN.);  


*SASDOC --------------------------------------------------------------------
|
|  Identify the retail maintenance Rx claims during the last &pos_review_days
|  who have not filled any scripts at Mail during the last 90 days.
+--------------------------------------------------------------------SASDOC*;
%drop_db2_table(tbl_name=&tbl_name_out.);			/* AK - commented out - Please roll back this change */
 PROC SQL;
   CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);

     EXECUTE(CREATE TABLE &tbl_name_out.		
                 (PT_BENEFICIARY_ID INTEGER NOT NULL,
                  CDH_BENEFICIARY_ID INTEGER NOT NULL,
                  CLIENT_ID INTEGER NOT NULL,
                  CLT_PLAN_GROUP_ID2 INTEGER NOT NULL,
				  ADJ_ENGINE CHAR(2),
                  BIRTH_DT DATE,
                  DRUG_NDC_ID DECIMAL(11) NOT NULL,
                  NHU_TYPE_CD SMALLINT NOT NULL,
                  DRUG_ABBR_PROD_NM CHAR(12),
                  DRUG_CATEGORY_ID INTEGER ) NOT LOGGED INITIALLY) BY DB2;
   DISCONNECT FROM DB2;
 QUIT;

 PROC SQL;
    CONNECT TO DB2 AS DB2(DSN=&UDBSPRP AUTOCOMMIT=NO);
     EXECUTE(ALTER TABLE &tbl_name_out.
             ACTIVATE NOT LOGGED INITIALLY  ) BY DB2;

     EXECUTE(INSERT INTO &tbl_name_out.
             SELECT
                     A.PT_BENEFICIARY_ID,
                     A.CDH_BENEFICIARY_ID,
                     A.CLIENT_ID,
                     A.CLT_PLAN_GROUP_ID as CLT_PLAN_GROUP_ID2,					 
					 MAX(&ADJ_ENGINE) AS ADJ_ENGINE,
                     MAX(A.PT_BIRTH_DT),
                     MAX(A.DRUG_NDC_ID),
                     MAX(A.NHU_TYPE_CD),
                     C.DRUG_ABBR_PROD_NM,
                     B.DRUG_CATEGORY_ID
           FROM    &claimsa..&claim_his_tbl A,
                   &tbl_name_in. B,
                   &claimsa..TDRUG1 C
/*           WHERE  A.FILL_DT BETWEEN (CURRENT DATE - &POS_REVIEW_DAYS DAYS) AND &CLAIMS_END_DT*/
	           WHERE  A.FILL_DT BETWEEN (CURRENT DATE - 150 DAYS) AND '2011-06-30'
	     AND  A.BILLING_END_DT IS NOT NULL
             AND  A.DELIVERY_SYSTEM_CD IN (3)
	     &WHERECONS.
             AND  A.DRUG_NDC_ID = B.DRUG_NDC_ID
             AND  A.NHU_TYPE_CD = B.NHU_TYPE_CD
             AND  A.DRUG_NDC_ID = C.DRUG_NDC_ID
             AND  A.NHU_TYPE_CD = C.NHU_TYPE_CD

             GROUP BY
                     A.PT_BENEFICIARY_ID,
                     A.CDH_BENEFICIARY_ID,
                     A.CLIENT_ID,
                     A.CLT_PLAN_GROUP_ID,
                     C.DRUG_ABBR_PROD_NM,
                     B.DRUG_CATEGORY_ID
           HAVING SUM(RX_COUNT_QY)>0
          AND PT_BENEFICIARY_ID NOT IN
                     (SELECT distinct
                             PT_BENEFICIARY_ID
                       FROM   &claimsa..&claim_his_tbl A
                       WHERE  A.FILL_DT BETWEEN (CURRENT DATE - 90 DAYS) AND CURRENT DATE
					   AND    A.BILLING_END_DT IS NOT NULL
                       AND    A.DELIVERY_SYSTEM_CD = 2  
                              &WHERECONS. )
      )BY DB2;
  DISCONNECT FROM DB2;
 QUIT;

 %set_error_fl;
 %on_error(ACTION=ABORT, EM_TO=&primary_programmer_email,
          EM_SUBJECT="HCE SUPPORT:  Notification of Abend",
          EM_MSG="A problem was encountered.  See LOG file - &PROGRAM_NAME..log for Initiative ID &Initiative_ID");


 %RUNSTATS(TBL_NAME=&tbl_name_out.);

%mend pull_ql_retail_claims_adhoc;


%MACRO QL_PROCESS;
*SASDOC --------------------------------------------------------------------
|
|  IDENTIFY THE RETAIL MAINTENANCE QL CLAIMS DURING THE LAST &POS_REVIEW_DAYS
|  WHO HAVE NOT FILLED ANY SCRIPTS AT MAIL DURING THE LAST 90 DAYS.
| MAY2008 C.J.S
| LOGIC ADDED SO THAT THIS MACRO WILL ONLY RUN IF QL WAS SELECTED TO RUN FROM
| JAVA SCREENS
+--------------------------------------------------------------------SASDOC*;

%PULL_QL_RETAIL_CLAIMS_ADHOC (TBL_NAME_IN1=&DB2_TMP..&TABLE_PREFIX._CLT_CPG_QL,
                       TBL_NAME_IN=&DB2_TMP..&TABLE_PREFIX._NDC_QL, 
                       TBL_NAME_OUT=&DB2_TMP..&TABLE_PREFIX._CLAIMS_QL,
                        ADJ_ENGINE='QL',CLIENT_IDS = &CLIENT_IDS);

     %DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CPG_PB);

      PROC SQL;
        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
          EXECUTE(CREATE TABLE &DB2_TMP..&TABLE_PREFIX._CPG_PB
                 (
		       CLT_PLAN_GROUP_ID	INTEGER			NOT NULL,
		       CLIENT_ID	        INTEGER			NOT NULL,
		       PLAN_CD	        	CHARACTER(8) 	NOT NULL,
		       PLAN_EXTENSION_CD	CHARACTER(8) 	NOT NULL,
		       GROUP_CD	        	CHARACTER(15)	NOT NULL,
		       GROUP_EXTENSION_CD	CHARACTER(5)	NOT NULL,
		       BLG_REPORTING_CD		CHARACTER(15)	NOT NULL,
		       PLAN_GROUP_NM	    CHARACTER(30)	NOT NULL,        
		       POS_PB               INTEGER,
		       MAIL_PB              INTEGER,
		       PAPR_PB              INTEGER /*per HT request*/
                  ) NOT LOGGED INITIALLY) BY DB2;
        DISCONNECT FROM DB2;
      QUIT;
 
      PROC SQL;
         CONNECT TO DB2 AS DB2(DSN=&UDBSPRP AUTOCOMMIT=NO);
          EXECUTE(ALTER TABLE &db2_tmp..&TABLE_PREFIX._CPG_PB 
                  ACTIVATE NOT LOGGED INITIALLY  ) BY DB2;

          EXECUTE(INSERT INTO &db2_tmp..&TABLE_PREFIX._CPG_PB 
                  SELECT E.CLT_PLAN_GROUP_ID,E.CLIENT_ID, 
                         E.PLAN_CD, E.PLAN_EXTENSION_CD,
                         E.GROUP_CD, E.GROUP_EXTENSION_CD,
                         E.BLG_REPORTING_CD,
                         E.PLAN_GROUP_NM,
/*per HT request*/     MAX(CASE
                           WHEN A.DELIVERY_SYSTEM_CD = 1 THEN PB_ID
                            ELSE 0
                        END) AS PAPR_PB,
                       MAX(CASE
                           WHEN A.DELIVERY_SYSTEM_CD = 3 THEN PB_ID
                            ELSE 0
                        END) AS POS_PB,
                        MAX(CASE
                           WHEN A.DELIVERY_SYSTEM_CD = 2 THEN PB_ID
                           ELSE 0
                        END) AS MAIL_PB
                   FROM &CLAIMSA..TCPG_PB_TRL_HIST  A,
                        &DB2_TMP..&TABLE_PREFIX._CLT_CPG_QL D,
                        &CLAIMSA..TCPGRP_CLT_PLN_GR1  E
                   WHERE D.CLT_PLAN_GROUP_ID = A.CLT_PLAN_GROUP_ID
                      AND   D.CLT_PLAN_GROUP_ID = E.CLT_PLAN_GROUP_ID
                      AND   A.EXP_DT > CURRENT DATE
                      AND   A.EFF_DT < CURRENT DATE
/*per HT request*/    AND   A.DELIVERY_SYSTEM_CD IN (3)
                  GROUP BY E.CLT_PLAN_GROUP_ID,E.CLIENT_ID,
                      E.PLAN_CD, E.PLAN_EXTENSION_CD,
                      E.GROUP_CD, E.GROUP_EXTENSION_CD,
                      E.BLG_REPORTING_CD,
                      E.PLAN_GROUP_NM
                  HAVING COUNT(DISTINCT A.DELIVERY_SYSTEM_CD)=2             
             )BY DB2;
        DISCONNECT FROM DB2;
    QUIT;
  %SET_ERROR_FL;
  %ON_ERROR(ACTION=ABORT, EM_TO=&PRIMARY_PROGRAMMER_EMAIL,
          EM_SUBJECT="HCE SUPPORT:  Notification of Abend",
          EM_MSG="A problem was encountered.  See LOG file - &PROGRAM_NAME..log for Initiative ID &Initiative_ID");

   %RUNSTATS(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CPG_PB);

*SASDOC--------------------------------------------------------------------------
| CALL %GET_MOC_PHONE
| ADD THE MAIL ORDER PHARMACY AND CUSTOMER SERVICE PHONE TO THE CPG FILE
|C.J.S  APR2008
| ADDED ADJ LOGIC SO MACRO WILL RUN FOR QL ONLY
+------------------------------------------------------------------------SASDOC*;
    %GET_MOC_CSPHONE(TBL_NAME_IN=&DB2_TMP..&TABLE_PREFIX._CPG_PB,
                  TBL_NAME_OUT=&DB2_TMP..&TABLE_PREFIX._CPG_MOC);
%MEND QL_PROCESS;

*SASDOC --------------------------------------------------------------------
|   C.J.S MAY2008
|  IDENTIFY THE RETAIL MAINTENANCE RX/RE CLAIMS DURING THE LAST &POS_REVIEW_DAYS
|  WHO HAVE NOT FILLED ANY SCRIPTS AT MAIL DURING THE LAST 90 DAYS.
| MAY2008 C.J.S
| LOGIC ADDED SO THAT THIS MACRO WILL ONLY RUN IF RX WAS SELECTED TO RUN FROM
| JAVA SCREENS
+--------------------------------------------------------------------SASDOC*;
       	
%MACRO RX_RE_PROCESS(TBL_NM_RX_RE,INPT_TBL_RX_RE,EDW_ADJ,CLAIMS_TBL,
					 TBL_NM_RX_RE2,MODULE2);

*SASDOC --------------------------------------------------------------------
|   C.J.S MAY2008
|   CALL DELIVERY_SYS_CHECK MACRO TO RESOLVE IF ANY OF THE DELIVERY SYSTEMS 
|	SHOULD BE EXCLUDED FROM THE INITIATIVE.  IF SO, FORM A STRING THAT WILL 
|	BE INSERTED INTO THE SQL THAT QUERIES CLAIMS.
+--------------------------------------------------------------------SASDOC*;

%INCLUDE "/PRG/sas&sysmode.1/hercules/macros/delivery_sys_check_adhoc.sas";
*SASDOC --------------------------------------------------------------------
|   C.J.S MAY2008
|  THIS PROC AQL STEP DOES A JOIN AGAINST VARIOUS TABLES IN ORDER TO PULL
|  THE RETAIL CLAIMS
+--------------------------------------------------------------------SASDOC*;

PROC SQL;
CONNECT TO ORACLE(PATH=&GOLD);
CREATE TABLE &ORA_TMP..RETAIL_USERS_&MODULE2._&INITIATIVE_ID. AS
SELECT * FROM CONNECTION TO ORACLE 
(
 SELECT DISTINCT
CLAIM.MBR_GID				AS MBR_GID,
CLAIM.PAYER_ID				AS PAYER_ID,
CLAIM.ALGN_LVL_GID_KEY		AS ALGN_LVL_GID_KEY,
CLAIM.PT_BENEFICIARY_ID 	AS PT_BENEFICIARY_ID,
CLAIM.MBR_ID				AS MBR_ID,
CLAIM.CDH_BENEFICIARY_ID 	AS CDH_BENEFICIARY_ID,
CLAIM.CLIENT_ID				AS CLIENT_ID,
CLAIM.CLIENT_LEVEL_1 		AS CLIENT_LEVEL_1,
CLAIM.CLIENT_LEVEL_2 		AS CLIENT_LEVEL_2,
CLAIM.CLIENT_LEVEL_3 		AS CLIENT_LEVEL_3,
MAX(CLAIM.ADJ_ENGINE)		AS ADJ_ENGINE,
CLAIM.LAST_FILL_DT  		AS LAST_FILL_DT,
MAX(0) 						AS LTR_RULE_SEQ_NB,
MAX(CLAIM.REFILL_FILL_QY) 	AS REFILL_FILL_QY,
MAX(CLAIM.DRUG_NDC_ID) 		AS DRUG_NDC_ID,
MAX(CLAIM.NHU_TYPE_CD) 		AS NHU_TYPE_CD,
&CREATE_DELIVERY_SYSTEM_CD_RE. ,
&CREATE_DELIVERY_SYSTEM_CD_RX. 
FROM &CLAIMS_TBL. CLAIM,
      DSS_CLIN.V_PHMCY_DENORM PHMCY
WHERE CLAIM.PHMCY_GID=PHMCY.PHMCY_GID
    (CLAIM.DSPND_DATE BETWEEN TO_DATE(&CHK_DT,'yyyy-mm-dd') AND SYSDATE)	  
	  &DS_STRING_RE.
	  &DS_STRING_RX.
GROUP BY 
CLAIM.MBR_GID,
CLAIM.PAYER_ID, 
CLAIM.ALGN_LVL_GID_KEY,
CLAIM.PT_BENEFICIARY_ID,
CLAIM.MBR_ID,
CLAIM.CDH_BENEFICIARY_ID,
CLAIM.CLIENT_ID,
CLAIM.CLIENT_LEVEL_1,
CLAIM.CLIENT_LEVEL_2,
CLAIM.CLIENT_LEVEL_3,
CLAIM.LAST_FILL_DT
HAVING SUM(CLAIM.RX_COUNT_QY) > 0 );
DISCONNECT FROM ORACLE;
QUIT;


PROC SQL;
	CONNECT TO ORACLE(PATH=&GOLD);
	CREATE TABLE &ORA_TMP..MAIL_USERS_&MODULE2._&INITIATIVE_ID. AS
    SELECT * FROM CONNECTION TO ORACLE
	(
		SELECT DISTINCT PT_BENEFICIARY_ID
		FROM &CLAIMS_TBL. CLAIM
		WHERE (DSPND_DATE BETWEEN TO_DATE(&CHK_DT2,'yyyy-mm-dd') AND SYSDATE)		
		&MAIL_DELVRY_CD.
		ORDER BY PT_BENEFICIARY_ID

	);
	DISCONNECT FROM ORACLE;
QUIT;


%DROP_ORACLE_TABLE(TBL_NAME=&TBL_NM_RX_RE);

PROC SQL;
	CREATE TABLE &TBL_NM_RX_RE. AS
	SELECT DISTINCT A.*
	FROM &ORA_TMP..RETAIL_USERS_&MODULE2._&INITIATIVE_ID. A
	LEFT JOIN
		 &ORA_TMP..MAIL_USERS_&MODULE2._&INITIATIVE_ID. B
	ON A.PT_BENEFICIARY_ID = B.PT_BENEFICIARY_ID
  WHERE B.PT_BENEFICIARY_ID IS NULL;
 QUIT;


%DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RETAIL_USERS_&MODULE2._&INITIATIVE_ID.);
%DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..MAIL_USERS_&MODULE2._&INITIATIVE_ID.);

*SASDOC--------------------------------------------------------------------------
| CALL %GET_MOC_PHONE
| ADD THE MAIL ORDER PHARMACY AND CUSTOMER SERVICE PHONE TO THE CPG FILE
|C.J.S  APR2008
| CHANGED INPUT AND OUTPUT NAMES AND ADDED ADJ LOGIC SO MACRO WILL RUN FOR RX/RE
+------------------------------------------------------------------------SASDOC*;

    %GET_MOC_CSPHONE(MODULE=&MODULE2.,
					 TBL_NAME_IN =&TBL_NM_RX_RE., 
                     TBL_NAME_OUT=&TBL_NM_RX_RE2.);

%MEND RX_RE_PROCESS;
%MACRO PROCESS;
%IF &RX_ADJ EQ 1 %THEN 
%RX_RE_PROCESS(&ORA_TMP..&TABLE_PREFIX.PT_CLAIMS_GROUP_RX
			  ,&ORA_TMP..&TABLE_PREFIX._CLT_CPG_RX
			  ,2
			  ,&ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX
			  ,&ORA_TMP..&TABLE_PREFIX.PT_CLAIM_MOC_RX
			  ,RX);
%IF &RE_ADJ EQ 1 %THEN 
%RX_RE_PROCESS(&ORA_TMP..&TABLE_PREFIX.PT_CLAIMS_GROUP_RE
			  ,&ORA_TMP..&TABLE_PREFIX._CLT_CPG_RE
			  ,3
			  ,&ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE
			  ,&ORA_TMP..&TABLE_PREFIX.PT_CLAIM_MOC_RE
			  ,RE);
 %IF &QL_ADJ EQ 1 %THEN %QL_PROCESS;
%MEND PROCESS;
%PROCESS;

*SASDOC-------------------------------------------------------------------------
| DETERMINE ELIGIBILITY FOR THE CARDHOLDLER AS WELL AS PARTICIPANT (IF
| AVAILABLE).
|C.J.S  APR2008
| PASS NEW INPUT AND OUTPUT NAMES FOR RECAP AND RXCLAIM
+-----------------------------------------------------------------------SASDOC*;

 %ELIGIBILITY_CHECK(TBL_NAME_IN=&DB2_TMP..&TABLE_PREFIX._CLAIMS_QL,
                   TBL_NAME_IN_RX=&ORA_TMP..&TABLE_PREFIX.PT_CLAIM_MOC_RX, 
                   TBL_NAME_IN_RE=&ORA_TMP..&TABLE_PREFIX.PT_CLAIM_MOC_RE, 
                   TBL_NAME_OUT=&DB2_TMP..&TABLE_PREFIX._CPG_ELIG_QL,
                   TBL_NAME_RX_OUT2=&ORA_TMP..&TABLE_PREFIX._CPG_ELIG_RX,
                   TBL_NAME_RE_OUT2=&ORA_TMP..&TABLE_PREFIX._CPG_ELIG_RE,
                   CLAIMSA=&CLAIMSA);
    
*SASDOC ------------------------------------------------------------------------
 | FIND THE LATEST BILLING_END_MONTH FOR THE SUMMARY TABLES. USE COPAY SUMMARY
 | FOR FASTEST RESULTS.
 | C.J.S MAY2008
 | ADDED CODE SO THAT THIS ONLY RUN FOR QL
 +-----------------------------------------------------------------------SASDOC*;

%MACRO REFILL_DATA;
%IF &QL_ADJ = 1 %THEN %DO;

     PROC SQL NOPRINT;
       SELECT MAX(BILLING_END_MONTH)
             INTO :MAX_COPAY_DATE
       FROM SUMMARY.TCOPAY_PLAN_SUMM;
     QUIT;

*SASDOC -----------------------------------------------------------------------------
 |
 |   USE SUMMARY.TDRUG_COV_LMT_SUMM TO DELETE DRUG CATEGORIES NOT BEING COVERED WHILE
 |   CALCULATING THE REFILL_FILL_QY (SUBTRACT 1 FROM ANNUAL_REFILL_QY).  KEEP ONLY
 |   THE ELIGIBLE CPGS, PARTICIPANTS
 |
 |     NOTE: REFILL_FILL_QY OR ANNUAL_FILL_QY MAY HAVE VALUES LIKE '9999' WHICH MEANS
 |           NO REFILL LIMIT AND SHOULD BE TREATED SAME AS NULL
 |
 + ----------------------------------------------------------------------------SASDOC*;


     %DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CLAIMS2_QL);

       PROC SQL;
         CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
         CREATE TABLE &DB2_TMP..&TABLE_PREFIX._CLAIMS2_QL AS
         SELECT * FROM CONNECTION TO DB2
            (SELECT DISTINCT
                0 as LTR_RULE_SEQ_NB,
                A.PT_BENEFICIARY_ID,
                A.CDH_BENEFICIARY_ID,
                A.BIRTH_DT,
                A.CLIENT_ID,
                A.CLT_PLAN_GROUP_ID2,
				A.ADJ_ENGINE,
                CLIENT_NM,
                c.PLAN_CD,
                c.GROUP_CD,
                c.BLG_REPORTING_CD,
                DRUG_ABBR_PROD_NM,
                CASE
                  WHEN (REFILL_FILL_QY >= 1 AND REFILL_FILL_QY < 9999) THEN REFILL_FILL_QY
                  WHEN (ANNUAL_FILL_QY > 1 AND ANNUAL_FILL_QY < 9999) THEN (ANNUAL_FILL_QY - 1)
                END as REFILL_FILL_QY,
                       MOC_PHM_CD,
                        CS_AREA_PHONE
            FROM &DB2_TMP..&TABLE_PREFIX._CLAIMS_QL A,
                 &DB2_TMP..&TABLE_PREFIX._CPG_ELIG_QL B,
                 &DB2_TMP..&TABLE_PREFIX._CPG_MOC C,
                 &CLAIMSA..TCLIENT1 E,
            SUMMARY.TDRUG_COV_LMT_SUMM D
            where A.PT_BENEFICIARY_ID = B.PT_BENEFICIARY_ID
                AND   A.CLIENT_ID = E.CLIENT_ID
                AND   C.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID
/*                AND   D.BILLING_END_MONTH = 201102*/
                AND   D.BILLING_END_MONTH = &MAX_COPAY_DATE
                AND   C.POS_PB = D.PB_ID
                AND   A.DRUG_CATEGORY_ID = D.DRUG_CATEGORY_ID);
        DISCONNECT FROM DB2;
       QUIT;
      %SET_ERROR_FL;
      %ON_ERROR(ACTION=ABORT, EM_TO=&PRIMARY_PROGRAMMER_EMAIL,
             EM_SUBJECT="HCE SUPPORT:  Notification of Abend",
             EM_MSG="A problem was encountered.  See LOG file - &PROGRAM_NAME..log for Initiative ID &Initiative_ID");

      %LET ERR_FL=0;
       %RUNSTATS(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CLAIMS2_QL);

%END;   /* END QL PROCESS FOR REFILLS*/


%MEND  REFILL_DATA;
%REFILL_DATA;

*SASDOC--------------------------------------------------------------------------
| MAY2008 C.J.S 
| THIS PROCESS WILL DOWNLOAD EDW DATA TO UNIX FOR EACH ADJUDICATION.
|
+------------------------------------------------------------------------SASDOC*;
 
%MACRO PROCESS1;

%IF &QL_ADJ EQ 1 %THEN %DO;

%DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CLAIMS3_QL);
DATA &DB2_TMP..&TABLE_PREFIX._CLAIMS3_QL(DROP = CLT_PLAN_GROUP_ID2);
 SET &DB2_TMP..&TABLE_PREFIX._CLAIMS2_QL;
 CLIENT_LEVEL_1 = PUT(CLT_PLAN_GROUP_ID2,$20.);
 CLIENT_LEVEL_2 = ' ';
 CLIENT_LEVEL_3 = ' ';
RUN;

%EDW2UNIX(TBL_NM_IN=&DB2_TMP..&TABLE_PREFIX._CLAIMS3_QL
		 ,TBL_NM_OUT=DATA.&TABLE_PREFIX._CLAIMS2_QL
          ,ADJ_ENGINE=1  );
%END;
%IF &RX_ADJ EQ 1 %THEN %DO;
%EDW2UNIX(TBL_NM_IN=&ORA_TMP..&TABLE_PREFIX._CPG_ELIG_RX
		 ,TBL_NM_OUT=DATA.&TABLE_PREFIX._CPG_ELIG_RX
         ,ADJ_ENGINE=2   );
%END;
%IF &RE_ADJ EQ 1 %THEN %DO;
%EDW2UNIX(TBL_NM_IN=&ORA_TMP..&TABLE_PREFIX._CPG_ELIG_RE
		 ,TBL_NM_OUT=DATA.&TABLE_PREFIX._CPG_ELIG_RE
         ,ADJ_ENGINE=3  );
%END;

%MEND PROCESS1;
%PROCESS1;

*SASDOC--------------------------------------------------------------------------
| MAY2008 C.J.S
| CALL THE MACRO %COMBINE_ADJUDICATIONS. THE LOGIC IN THE MACRO COMBINES THE CLAIMS
| THAT WERE PULLED FOR ALL THREE ADJUDICATIONS.
|
+------------------------------------------------------------------------SASDOC*;
 

%COMBINE_ADJ(TBL_NM_QL=DATA.&TABLE_PREFIX._CLAIMS2_QL,
             TBL_NM_RX=DATA.&TABLE_PREFIX._CPG_ELIG_RX,
             TBL_NM_RE=DATA.&TABLE_PREFIX._CPG_ELIG_RE,
             TBL_NM_OUT=&DB2_TMP..&TABLE_PREFIX.PT_DRUG_GROUP_COMB
             ); 


 *SASDOC-------------------------------------------------------------------------
 | GET BENEFICIARY ADDRESS AND CREATE SAS FILE LAYOUT.
 | JUL2004 C.J.S
 | INPUT FILE NAME CHANGED
 +-----------------------------------------------------------------------SASDOC*;
 %CREATE_BASE_FILE(TBL_NAME_IN=&DB2_TMP..&TABLE_PREFIX.PT_DRUG_GROUP_COMB);

 *SASDOC-------------------------------------------------------------------------
 | CALL %CHECK_DOCUMENT TO SEE IF THE STELLENT ID(S) HAVE BEEN ATTACHED.
 +-----------------------------------------------------------------------SASDOC*;

 %CHECK_DOCUMENT;

 *SASDOC-------------------------------------------------------------------------
 | CHECK FOR AUTORELEASE OF FILE.
 +-----------------------------------------------------------------------SASDOC*;
 %AUTORELEASE_FILE(INIT_ID=&INITIATIVE_ID, PHASE_ID=&PHASE_SEQ_NB);


 *SASDOC-------------------------------------------------------------------------
 | DROP THE TEMPORARY UDB TABLES
 +-----------------------------------------------------------------------SASDOC*;
 %DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CLT_CPG_QL);
 %DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CPG_ELIG);
 %DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CPG_MOC);
 %DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CLAIMS);
 %DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._CLAIMS2);
 %DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..&TABLE_PREFIX._NDC);

 *SASDOC-------------------------------------------------------------------------
 | INSERT DISTINCT RECIPIENTS INTO TCMCTN_PENDING IF THE FILE IS NOT AUTORELEASE.
 | THE USER WILL RECEIVE AN EMAIL WITH THE INITIATIVE SUMMARY REPORT.  IF THE
 | FILE IS AUTORELEASED, %RELEASE_DATA IS CALLED AND NO EMAIL IS GENERATED FROM
 | %INSERT_TCMCTN_PENDING.
 +-----------------------------------------------------------------------SASDOC*;

 %INSERT_TCMCTN_PENDING(INIT_ID=&INITIATIVE_ID, PHASE_ID=&PHASE_SEQ_NB);
 %ON_ERROR(ACTION=ABORT, EM_TO=&PRIMARY_PROGRAMMER_EMAIL,
           EM_SUBJECT="HCE SUPPORT:  Notification of Abend",
           EM_MSG="A problem was encountered.  See LOG file - &PROGRAM_NAME..log for Initiative Id &INITIATIVE_ID");

**SASDOC -----------------------------------------------------------------------------
 | GENERATE CLIENT_INITIATIVE_SUMMARY REPORT
 + ----------------------------------------------------------------------------SASDOC*;

 PROC SQL;
 SELECT MAX(REQUEST_ID) INTO :MAX_ID
 FROM HERCULES.TREPORT_REQUEST;
 QUIT;
%PUT  &MAX_ID;

PROC SQL;
INSERT INTO HERCULES.TREPORT_REQUEST
(REQUEST_ID, REPORT_ID, REQUIRED_PARMTR_ID, SEC_REQD_PARMTR_ID, JOB_REQUESTED_TS,
 JOB_START_TS, JOB_COMPLETE_TS, HSC_USR_ID , HSC_TS , HSU_USR_ID , HSU_TS )

VALUES
(%EVAL(&MAX_ID.+1), 11, &INITIATIVE_ID., &PHASE_SEQ_NB., %SYSFUNC(DATETIME()), %SYSFUNC(DATETIME()), 
 NULL, 'QCPAP020' , %SYSFUNC(DATETIME()), 'QCPAP020', %SYSFUNC(DATETIME()));

QUIT;

options sysparm="request_id=%EVAL(&MAX_ID.+1)" ;
%INCLUDE "/PRG/sastest1/hercules/reports/client_initiative_summary.sas";

**SASDOC -----------------------------------------------------------------------------
 | GENERATE RECEIVER_LISTING REPORT
 + ----------------------------------------------------------------------------SASDOC*;

 PROC SQL;
 SELECT MAX(REQUEST_ID) INTO :MAX_ID
 FROM HERCULES.TREPORT_REQUEST;
 QUIT;
%PUT  &MAX_ID;

PROC SQL;
INSERT INTO HERCULES.TREPORT_REQUEST
(REQUEST_ID, REPORT_ID, REQUIRED_PARMTR_ID, SEC_REQD_PARMTR_ID, JOB_REQUESTED_TS,
 JOB_START_TS, JOB_COMPLETE_TS, HSC_USR_ID , HSC_TS , HSU_USR_ID , HSU_TS )

VALUES
(%EVAL(&MAX_ID.+1), 15, &INITIATIVE_ID., &PHASE_SEQ_NB., %SYSFUNC(DATETIME()), %SYSFUNC(DATETIME()), 
 NULL, 'QCPAP020' , %SYSFUNC(DATETIME()), 'QCPAP020', %SYSFUNC(DATETIME()));

QUIT;

options sysparm="request_id=%EVAL(&MAX_ID.+1)" ;
%INCLUDE "/PRG/sastest1/hercules/reports/receiver_listing.sas";
 *SASDOC-------------------------------------------------------------------------
 | UPDATE THE JOB COMPLETE TIMESTAMP.
 +-----------------------------------------------------------------------SASDOC*;
 %UPDATE_TASK_TS(JOB_COMPLETE_TS);


