/* HEADER ----------------------------------------------------------------------
|  PROGRAM:  client_initiative_summary.sas
|
|  LOCATION: /PRG/sas&sysmode.1/hercules/reports/client_initiative_summary.sas
|
|  PURPOSE:
|  This report provides a breakdown of letters by client for an initiative/
|  phase as well as distinct receivers and subjects (when applicable).  If
|  there are multiple receiver types, the letters are detailed by receiver
|  and totaled by client as well.  If there is one receiver, the report has
|  a single row per client.
|
|  LOGIC:
|      1.  Determine the location of the data depending on whether the dataset
|          has been archived.  If the dataset was archived, this means that
|          the data is now located in UDB.
|      2.  In the next phase, this report can be requested from the Java screen.
|          If Java, the request report is sent to the browser.  If the Java
|          "indicator" is false, the report is being requested from a
|          Task-Program and the report is sent to the patientlist network drive
|          When the network drive applies, it is sent to the Program subfolder
|          and the initiative_phase are appended to the title.
|           (e.g. CUSTOM_MAILINGS\reports\12344_Client_Initiative_summary.pdf)
|
|   INPUT:
|         CLAIMSA.TCLIENT1
|         HERCULET.TCMCTN_SUBJECT_HIS
|         HERCULET.TCMCTN_RECEIVR_HIS
|         HERCULET.TPHASE_RVR_FILE
|         HERCULET.TINITIATIVE
|     SAS dataset in pending directory generated by initiative
|
|   OUTPUT:
|   If the report is requested from the task-program, output is sent to the
|   patient list drive.  Otherwise the report is being requested from Java
|   and sent to the browser.
|
|   AUTHOR/DATE: Sayeed Shariff/September 2003.
|
|   MODIFICATIONS: 1) Sayeed Shariff/January 2004.
|                  2) J.Chen/March 17, 2004 - Comment out hard-coding of sysmode
|                     and call to %set_sysmode macro
|                  3) S.Shariff/June 9, 2004 - Added functionality for
|                     letter_type_qy_cd = 3
|                                  4) S.Shariff/June 15,2004 - Added functionality for the
|                                         report to be called from Java.
| History ----------------------------------------------------------------------
| HERCULES VERSION 2.01.01
| 10/16/2008 - G. Dudley - Commented out special coding logic for RTM
|------------------------------------------------------------------------HEADER */;

%macro client_initiative_summary;

*%set_sysmode;

%include "/herc&sysmode./prg/hercules/reports/client_initiative_summary_in.sas";

*SASDOC--------------------------------------------------------------------------
%| Determine location of data depending on whether the dataset has been archived.
%| If a mailing has multiple files, the datasets are not archived until both have
%| reached final release or are cancelled.  Therefore, there can only be one
%| status for this report.  We do not report on cancelled mailings.
%+------------------------------------------------------------------------SASDOC*;

DATA WORK.TCLT_RPT_1;
 SET &HERCULES..TPHASE_RVR_FILE(WHERE=(INITIATIVE_ID=&INITIATIVE_ID
                AND PHASE_SEQ_NB=&PHASE_SEQ_NB AND ARCHIVE_STS_CD IN (0,1)));
KEEP CMCTN_ROLE_CD FILE_ID ARCHIVE_STS_CD DATA_CLEANSING_CD;
CALL SYMPUT('CMCTN_ROLE_CD' || TRIM(LEFT(_N_)), TRIM(LEFT(CMCTN_ROLE_CD)));
CALL SYMPUT('FILE_ID' || TRIM(LEFT(_N_)), TRIM(LEFT(FILE_ID)));
RUN;

PROC SQL NOPRINT;
  SELECT TRIM(LEFT(PUT(COUNT(*),8.) )) INTO : N_files
    FROM WORK.TCLT_RPT_1;
QUIT;

%PUT  N_files=&N_files;

PROC SQL NOPRINT;
SELECT ARCHIVE_STS_CD INTO :Archive_status_cd
FROM WORK.TCLT_RPT_1 ;
QUIT;

%*SASDOC=====================================================================;
%* Program 73 (R to M) Override:
%* Forces report to look at DB2 tables instead of the datasets.
%* 10/16/2008 - G. Dudley - Commented out special coding logic for RTM
%*====================================================================SASDOC*;
/*%IF (&PROGRAM_ID = 73) %THEN %DO;*/
/*        %IF (&ARCHIVE_STATUS_CD=0) %THEN %DO;*/
/*                %LET ARCHIVE_STATUS_CD=1;*/
/*        %END;*/
/*%END;*/
/*%PUT  Archive_status_cd=&Archive_status_cd;*/

%*SASDOC=====================================================================;
%* Create a SAS table that will hold the summarized data.
%*====================================================================SASDOC*;

PROC SQL;
  CREATE TABLE WORK.CLIENT_INIT_DETAILS1
         ( INITIATIVE_ID num,
           PHASE_SEQ_NB num,
           PROGRAM_ID num,
           TASK_ID num,
           TITLE_TX char(50),
           CLIENT_NM char(30),
           CLIENT_ID num,
           CLIENT_CD char(5),
           CMCTN_ROLE_CD num,
           No_Subjects num,
           No_Letters num,
           JC_DATE num format=datetime20.);

QUIT;

*SASDOC--------------------------------------------------------------------------
%| Summarize the data depending on the location.  If the data is not archived,
%| it is necessary to determine if there are multiple datasets to append to
%| the summary table.
%+------------------------------------------------------------------------SASDOC*;

%LET ARCHIVE_STATUS_CD=%TRIM(&ARCHIVE_STATUS_CD);
%IF (&ARCHIVE_STATUS_CD=0) %THEN %DO;

  %*SASDOC=====================================================================;
  %* Following Loop Runs through the Update/Insert for each CMCTN_ROLE_CD
  %*====================================================================SASDOC*;

  %DO  i=1 %TO &N_files;

        PROC SQL NOPRINT;
        SELECT  DATA_CLEANSING_CD,
                        FILE_ID
        INTO :Data_Cleansing_Cd,
                 :File_Id
        FROM    WORK.TCLT_RPT_1
        WHERE   CMCTN_ROLE_CD = &&CMCTN_ROLE_CD&i;
        QUIT;

     %if (&Data_Cleansing_Cd=1) %then %do;
       %LET STR_DATA_QUALITY_CD = %STR(DATA_QUALITY_CD IN (1,2));
     %end;

     %if (&Data_Cleansing_Cd ne 1) %then %do;
       %LET STR_DATA_QUALITY_CD = %STR(DATA_QUALITY_CD IN (1));
     %end;

     %if (&letter_type_qy_cd=1) %then %do;

      %LET STR_SUBJECT = %STR(COUNT(distinct SUBJECT_ID));

      PROC SQL;
        CREATE TABLE work.pending AS
            SELECT      distinct CLIENT_ID,
                    COUNT(distinct SUBJECT_ID) AS Subjects,
                    COUNT(distinct put(RECIPIENT_ID, 12.) || put(SUBJECT_ID, 9.)) AS LETTERS
            FROM        DATA_PND.&TABLE_PREFIX._&&CMCTN_ROLE_CD&i
            WHERE   &STR_DATA_QUALITY_CD
            GROUP BY CLIENT_ID;
      QUIT;

    %end;


    %if (&letter_type_qy_cd=2) %then %do;

         PROC SQL noprint;
            SELECT  COUNT(FILE_ID)
            INTO    :FILE_ID_COUNT
            FROM    &HERCULES..TFILE_FIELD
            WHERE   FILE_ID = &FILE_ID
            AND             FIELD_ID = 13;
      QUIT;

        %put file_id_count=&FILE_ID_COUNT;

            %if &FILE_ID_COUNT = 0 %then %do;
                    %LET STR_SUBJECT =(count(distinct RECIPIENT_ID));
            %end;
            %if &FILE_ID_COUNT > 0 %then %do;
                    %LET STR_SUBJECT =(count(distinct SUBJECT_ID));
            %end;

      PROC SQL noprint;
        CREATE TABLE work.pending AS
            SELECT   distinct RECIPIENT_ID,
                     1 AS LETTERS,
                     CLIENT_ID,
                     &STR_SUBJECT AS Subjects
            FROM
                     DATA_PND.&TABLE_PREFIX._&&CMCTN_ROLE_CD&i
            WHERE    &STR_DATA_QUALITY_CD;

      QUIT;
    %end;

        %if (&letter_type_qy_cd=3) %then %do;
          PROC SQL NOPRINT;
        CREATE   TABLE WORK.PENDING AS
        SELECT   CLIENT_ID,
                 COUNT(distinct SUBJECT_ID) AS Subjects,
                 COUNT(DISTINCT put(SUBJECT_ID, best12.) || put(DRUG_NDC_ID, best12.)) AS LETTERS
        FROM     DATA_PND.&TABLE_PREFIX._&&CMCTN_ROLE_CD&i
                WHERE    &STR_DATA_QUALITY_CD
        GROUP BY CLIENT_ID;
      QUIT;
      %end;

        PROC SQL;
          CREATE TABLE _TEMP_1 AS
           SELECT
                    Z.INITIATIVE_ID,
                    E.PHASE_SEQ_NB,
                    Z.PROGRAM_ID,
                    Z.TASK_ID,
                    Z.TITLE_TX,
                    E.JOB_COMPLETE_TS AS JC_DATE
               FROM    (&HERCULES..TINITIATIVE Z  INNER JOIN
                        &HERCULES..TINITIATIVE_PHASE E
                        ON  Z.INITIATIVE_ID = &INITIATIVE_ID
                        AND  Z.INITIATIVE_ID = E.INITIATIVE_ID
                        AND  E.PHASE_SEQ_NB = &PHASE_SEQ_NB);
        QUIT;

        PROC SQL;
          CREATE TABLE _TEMP_2 AS
           SELECT
                CASE
                  WHEN C.CLIENT_NM IS NOT NULL THEN C.CLIENT_NM
                  ELSE 'BOOK OF BUSINESS'
                END AS CLIENT_NM,
                C.CLIENT_ID,
                C.CLIENT_CD,
                &&CMCTN_ROLE_CD&i AS CMCTN_ROLE_CD,
                B.SUBJECTS        AS No_Subjects,
                B.LETTERS         AS No_Letters
           FROM  (WORK.PENDING B LEFT JOIN
                 &CLAIMSA..TCLIENT1 C ON
                 B.CLIENT_ID = C.CLIENT_ID);
        QUIT;

        PROC SQL;
                   INSERT INTO WORK.CLIENT_INIT_DETAILS1
           SELECT
                        A.INITIATIVE_ID,
                        A.PHASE_SEQ_NB,
                        A.PROGRAM_ID,
                        A.TASK_ID,
                        A.TITLE_TX,
                        B.CLIENT_NM,
                        B.CLIENT_ID,
                        B.CLIENT_CD,
                        B.CMCTN_ROLE_CD,
                        B.No_Subjects,
                        B.No_Letters,
                        A.JC_DATE
               FROM     WORK._TEMP_1  A,
                        WORK._TEMP_2  B;
        QUIT;

%end; *END OF LOOP;
%end;

%IF (&ARCHIVE_STATUS_CD=1) %THEN %DO;

        PROC SQL;
        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
              CREATE TABLE WORK.CLIENT_INIT_DETAILS1 AS
                SELECT * FROM CONNECTION TO DB2
             (
                SELECT
                        A.INITIATIVE_ID,
                        A.PHASE_SEQ_NB,
                        Z.PROGRAM_ID,
                        Z.TASK_ID,
                        Z.TITLE_TX,
                        CASE
                          WHEN D.CLIENT_NM IS NOT NULL THEN CLIENT_NM
                          ELSE 'BOOK OF BUSINESS'
                        END AS CLIENT_NM,
                        D.CLIENT_ID,
                        D.CLIENT_CD,
                        C.CMCTN_ROLE_CD,
                        COUNT(distinct C.SUBJECT_ID) AS No_Subjects,
                        COUNT(distinct B.CMCTN_ID) AS No_Letters,
                        DATE(E.JOB_COMPLETE_TS) AS JC_DATE
                FROM
                        ((((( &HERCULES..TINITIATIVE          Z                                 INNER JOIN
                              &HERCULES..TINITIATIVE_PHASE    E
                                 ON   Z.INITIATIVE_ID = &INITIATIVE_ID
                                 AND  Z.INITIATIVE_ID = E.INITIATIVE_ID
                                 AND  E.PHASE_SEQ_NB = &PHASE_SEQ_NB)                   INNER JOIN
                                  &HERCULES..TPHASE_RVR_FILE      A
                                 ON   E.INITIATIVE_ID = A.INITIATIVE_ID
                                 AND  E.PHASE_SEQ_NB = A.PHASE_SEQ_NB)                  INNER JOIN
                                  &HERCULES..TCMCTN_RECEIVR_HIS   B
                                 ON   A.INITIATIVE_ID   =   B.INITIATIVE_ID
                                 AND  A.PHASE_SEQ_NB    =   B.PHASE_SEQ_NB
                                 AND  A.CMCTN_ROLE_CD   =   B.CMCTN_ROLE_CD)    INNER JOIN
                              &HERCULES..TCMCTN_SUBJECT_HIS   C
                                 ON   B.INITIATIVE_ID   =   C.INITIATIVE_ID
                                 AND  B.PHASE_SEQ_NB    =   C.PHASE_SEQ_NB
                                 AND  B.CMCTN_ROLE_CD   =   C.CMCTN_ROLE_CD
                                 AND  B.CMCTN_ID        =   C.CMCTN_ID)                 LEFT JOIN
                              &CLAIMSA..TCLIENT1              D
                                 ON  C.CLIENT_ID = D.CLIENT_ID)

                GROUP BY
                        A.INITIATIVE_ID,
                        A.PHASE_SEQ_NB,
                        Z.PROGRAM_ID,
                        Z.TASK_ID,
                        Z.TITLE_TX,
                        D.CLIENT_NM,
                        D.CLIENT_CD,
                        D.CLIENT_ID,
                        C.CMCTN_ROLE_CD,
                        DATE(E.JOB_COMPLETE_TS));
        DISCONNECT FROM DB2;
        QUIT;

%end;

*SASDOC--------------------------------------------------------------------------
| Select summary data for an initiative/phase.
+------------------------------------------------------------------------SASDOC*;
PROC SQL;
CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
    CREATE TABLE CLIENT_INIT_DETAILS as
        SELECT
                INITIATIVE_ID,
                PHASE_SEQ_NB,
                PROGRAM_ID,
                TASK_ID,
                TITLE_TX,
                CLIENT_ID,
                CLIENT_NM,
                compbl(CLIENT_NM||left(' ('||left(put(CLIENT_ID,32.)||')')))
                as CLIENT_NM_ID,
                CLIENT_CD,
                CMCTN_ROLE_CD,
                No_Subjects,
                No_Letters,
                JC_DATE
        FROM WORK.CLIENT_INIT_DETAILS1;
DISCONNECT FROM DB2;
QUIT;


/* Add formatted variables to communication component data. */
%add_fmt_vars(CLIENT_INIT_DETAILS,
              FCLIENT_INIT_DETAILS_1,
              F_,
              TASK_ID,
              PROGRAM_ID,
              CMCTN_ROLE_CD);
*SASDOC--------------------------------------------------------------------------
| If there is more than one receiver (same as n_files), concatenante them
| and seperate them with an 'AND'.
+------------------------------------------------------------------------SASDOC*;
PROC SQL noprint;
SELECT distinct(F_CMCTN_ROLE_CD)
  INTO :FCLIENT_INIT_DETAILS_1 separated BY ' AND '
  FROM FCLIENT_INIT_DETAILS_1;

SELECT TITLE_TX
  INTO :TITLE_TX
  FROM FCLIENT_INIT_DETAILS_1;

CREATE TABLE FCLIENT_INIT_DETAILS_1 AS
        SELECT *, "&FCLIENT_INIT_DETAILS_1" AS RECEIVERS
        FROM FCLIENT_INIT_DETAILS_1;
QUIT;


proc sql;
      select  translate(trim(left(short_tx)),'_',' /&')
      into    :sub_dir
      from    &hercules..tinitiative   init,
              &claimsa..tprogram       prog
      where   init.initiative_id     = &initiative_id        and
              prog.program_id        = init.program_id ;
quit;

%let sub_dir=%cmpres(&sub_dir);

*SASDOC--------------------------------------------------------------------------
| If the report is not called from Java, then give the PDF file the destination on
| the patientlist drive.
+------------------------------------------------------------------------SASDOC*;

%macro set_filename;
%IF (&JAVA_CALL. = %str()) %THEN %DO;
filename RPTFL FTP "\users\patientlist\&sub_dir\Reports\&INITIATIVE_ID._client_initiative_details.pdf"  mach='sfb006.psd.caremark.int' RECFM=S;
%END;
%mend;
%set_filename;



*SASDOC--------------------------------------------------------------------------
| PDF file options and formats.
+------------------------------------------------------------------------SASDOC*;
%let _hdr_clr=blue;
%let _col_clr=black;
%let _hdr_fg =blue;
%let _hdr_bg =lightgrey;
%let _tbl_fnt="Arial";
options orientation=portrait papersize=letter nodate number pageno=1
        leftmargin  ="1.05in"
        rightmargin ="0.00"
        topmargin   ="0.75in"
        bottommargin="0.25in";
ods listing close;
ods pdf file=RPTFL
        startpage=off
/*        style=my_pdf*/
          style=printer
notoc;
ods escapechar "^";
title1 j=c "^S={font_face=arial
                font_size=12pt
                font_weight=bold}Hercules Communication Engine^S={}";
title2 j=c "^S={font_face=arial
                font_size=14pt
                font_weight=bold}Client Initiative Summary Report^S={}";
title3 j=c "^S={font_face=arial
                font_size=10pt
                foreground=&_hdr_clr
                font_weight=bold}&TITLE_TX";

footnote1 j=r "^S={font_face=arial
                font_size=7pt
                font_weight=bold}Caremark IT Analytics^S={}";
footnote2 j=r "^S={font_face=arial
                font_size=7pt
                font_weight=bold}Report Generated: %sysfunc(datetime(),datetime19.)^S={}";
footnote3 j=r "^S={font_face=arial
                font_size=7pt
                font_weight=bold}Report ID: 11^S={}";

*SASDOC--------------------------------------------------------------------------
| Run_Report chooses which report style to run based on the
| n_files (receivers).
+------------------------------------------------------------------------SASDOC*;


%MACRO RUN_REPORT;
   %IF &n_files=1 %THEN %DO;
        %INCLUDE "/PRG/sas&sysmode.1/hercules/reports/client_initiative_summary_r1.sas";
   %END;

   %IF &n_files>1 %THEN %DO;
        %INCLUDE "/PRG/sas&sysmode.1/hercules/reports/client_initiative_summary_r2.sas";
   %END;
%MEND RUN_REPORT;

%RUN_REPORT;

%mend client_initiative_summary;

*SASDOC--------------------------------------------------------------------------
| If the report is called from Java, call the client_initiative_summary macro.
| If not, there is no need since the program-tasks include and call the macro.
+------------------------------------------------------------------------SASDOC*;

%macro check_origin2;
%global JAVA_CALL;
%IF (&JAVA_CALL ne %STR()) %THEN %DO;
%client_initiative_summary;
%END;
%mend;

%set_sysmode(mode=prod);
%check_origin2;
