*SASDOC--------------------------------------------------------------------------
| CALL CLAIMS_PULL_EDW_NEGFRM MACRO IN ORDER TO PULL CLAIMS INFORMATION FROM EDW.
+------------------------------------------------------------------------SASDOC*;
%MACRO CLAIMS_PULL_EDW_NEGFRM (DRUG_NDC_TABLE_RX = &ORA_TMP..&TABLE_PREFIX._NDC_RX,
					           DRUG_NDC_TABLE_RE = &ORA_TMP..&TABLE_PREFIX._NDC_RE, 
					           DRUG_RVW_DATES_TABLE = &ORA_TMP..&TABLE_PREFIX._RVW_DATES,
					           RESOLVE_CLIENT_TABLE_RX = &ORA_TMP..&TABLE_PREFIX._RX ,
					           RESOLVE_CLIENT_TABLE_RE = &ORA_TMP..&TABLE_PREFIX._RE,   
							   RESOLVE_CLIENT_TABLE_RE_MIGR = &ORA_TMP..&TABLE_PREFIX._CLT_CPG_RE_MIGR
								);



	%MACRO EDW_CLAIMS(ADJ_ENGINE=);

			DATA _NULL_;
				  CALL SYMPUT('CLM_BEGIN_DT_CONV', "TO_DATE(&CLM_BEGIN_DT,'YYYY-MM-DD')" );
				  CALL SYMPUT('CLM_END_DT_CONV', "TO_DATE(&CLM_END_DT,'YYYY-MM-DD')" );

				  CALL SYMPUT('CLM_BEGIN_DT_PLUS_1WK', "TO_DATE('" ||PUT(INTNX('WEEK',INPUT("&CLM_BEGIN_DT",YYMMDD10.),-1,'BEGIN'),YYMMDD10.) || "','YYYY-MM-DD')" );
				  CALL SYMPUT('CLM_END_DT_PLUS_1WK', "TO_DATE('" || PUT(INTNX('WEEK',INPUT("&CLM_END_DT",YYMMDD10.),+1,'END'),YYMMDD10.) || "','YYYY-MM-DD')" );
			RUN;

			%IF %SYSFUNC(EXIST(&DRUG_RVW_DATES_TABLE.)) AND
				%SYSFUNC(EXIST(&&DRUG_NDC_TABLE_&ADJ_ENGINE)) %THEN %DO; 

				%LET CLM_BEGIN_DT_PLUS_1WK = %STR(RVWDT.CLAIM_BEGIN_DT - 7);
				%LET CLM_END_DT_PLUS_1WK = %STR(RVWDT.CLAIM_END_DT + 7);
				%LET RVW_DATES_TABLE = %STR(,&DRUG_RVW_DATES_TABLE. RVWDT);
				%LET RVW_DATES_CONS = %STR(AND NDC.DRG_GROUP_SEQ_NB = RVWDT.DRG_GROUP_SEQ_NB
										   AND NDC.DRG_SUB_GRP_SEQ_NB = RVWDT.DRG_SUB_GRP_SEQ_NB);
			%END;
			%ELSE %DO;
				%LET RVW_DATES_TABLE = %STR();
				%LET RVW_DATES_CONS = %STR();
			%END;

			%PUT NOTE: CLM_BEGIN_DT_CONV = &CLM_BEGIN_DT_CONV;
			%PUT NOTE: CLM_END_DT_CONV = &CLM_END_DT_CONV;
			%PUT NOTE: CLM_BEGIN_DT_PLUS_1WK = &CLM_BEGIN_DT_PLUS_1WK;
			%PUT NOTE: CLM_END_DT_PLUS_1WK = &CLM_END_DT_PLUS_1WK;

			/** CONSTRAINTS BASED ON DRUG SET-UP **/
			PROC SQL NOPRINT;
			 SELECT DRG_DEFINITION_CD, 
					DFL_CLT_INC_EXU_IN
			 INTO :DRG_DEFINITION_CD,
				  :RESOLVE_CLIENT_EXCLUDE_FLAG
			 FROM &HERCULES..TINITIATIVE INIT
				 ,&HERCULES..TPROGRAM_TASK PGMTASK
			 WHERE INIT.INITIATIVE_ID = &INITIATIVE_ID.
			   AND INIT.PROGRAM_ID = PGMTASK.PROGRAM_ID
			   AND INIT.TASK_ID = PGMTASK.TASK_ID;
			QUIT;
			
			%PUT NOTE: DRG_DEFINITION_CD = &DRG_DEFINITION_CD.;
			%PUT NOTE: RESOLVE_CLIENT_EXCLUDE_FLAG = &RESOLVE_CLIENT_EXCLUDE_FLAG.;
			%PUT &&DRUG_NDC_TABLE_&ADJ_ENGINE;

			%IF %SYSFUNC(EXIST(&&DRUG_NDC_TABLE_&ADJ_ENGINE)) AND &DRG_DEFINITION_CD. = 2 %THEN %DO;
				%LET DRUG_NDC_TABLE = %STR(,&&DRUG_NDC_TABLE_&ADJ_ENGINE NDC 
										   &RVW_DATES_TABLE.);
				%LET DRUG_CONS = %STR(AND DRUG.DRUG_GID = NDC.DRUG_GID
									  &RVW_DATES_CONS.); 
				%LET SELECT_DRUG_SEQ = %STR(,NDC.DRUG_CATEGORY_ID  
											,NDC.GPI_GROUP   
											,NDC.GPI_CLASS);
				%LET SELECT_DRUG_SEQ_GROUP = %STR(,NDC.DRUG_CATEGORY_ID  
											,NDC.GPI_GROUP   
											,NDC.GPI_CLASS);
			%END;
			%ELSE %IF NOT %SYSFUNC(EXIST(&&DRUG_NDC_TABLE_&ADJ_ENGINE)) AND &DRG_DEFINITION_CD. = 2 %THEN %DO;
				%LET DRUG_NDC_TABLE = %STR();
				%LET DRUG_CONS = %STR();
				%LET SELECT_DRUG_SEQ = %STR(,59 AS DRUG_CATEGORY_ID  
											,'  ' AS GPI_GROUP   
											,'  ' AS GPI_CLASS);
				%LET SELECT_DRUG_SEQ_GROUP = %STR( );
			%END;
			%ELSE %IF %SYSFUNC(EXIST(&&DRUG_NDC_TABLE_&ADJ_ENGINE)) %THEN %DO;
				%LET DRUG_NDC_TABLE = %STR(,&&DRUG_NDC_TABLE_&ADJ_ENGINE NDC
										   &RVW_DATES_TABLE.); 
				%LET DRUG_CONS = %STR(AND DRUG.DRUG_GID = NDC.DRUG_GID
									  &RVW_DATES_CONS.); 
				%LET SELECT_DRUG_SEQ = %STR(,NDC.DRG_GROUP_SEQ_NB 
											,NDC.DRG_SUB_GRP_SEQ_NB);
				%LET SELECT_DRUG_SEQ_GROUP = %STR(,NDC.DRG_GROUP_SEQ_NB 
											,NDC.DRG_SUB_GRP_SEQ_NB);
			%END;
			%ELSE %DO;
				%LET DRUG_NDC_TABLE = %STR();
				%LET DRUG_CONS = %STR();
				%LET SELECT_DRUG_SEQ = %STR(,1 AS DRG_GROUP_SEQ_NB
											,1 AS DRG_SUB_GRP_SEQ_NB);
				%LET SELECT_DRUG_SEQ_GROUP = %STR( );
			%END;

			PROC SQL;
				SELECT TRGT_RECIPIENT_CD INTO :TRGT_RECIPIENT_CD
				FROM HERCULES.TPROGRAM_TASK 
				WHERE PROGRAM_ID = &PROGRAM_ID. AND
				TASK_ID = &TASK_ID.;
			QUIT;

			%IF &TRGT_RECIPIENT_CD EQ 1 OR &TRGT_RECIPIENT_CD EQ 4 %THEN %DO;
			  %LET PRSCR_CONS = %STR();
			%END;
			%ELSE %IF &PROGRAM_ID = 105 %THEN %DO;
			  %LET PRSCR_CONS = %STR(AND PRCTR.ENTITY_IND = 1 );		
			%END;
			%ELSE %DO;
			  %LET PRSCR_CONS = %STR(AND PRCTR.REC_SRC_FLG = 0
									 AND PRCTR.PRCTR_ID_TYP_CD IN ('DH', 'FW', 'NP'));
			%END;

			%DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..ALGN_LVL_LIST_&INITIATIVE_ID._&ADJ_ENGINE.);

/*CCW4: ADD CHECK FOR MIGR TABLE ALSO */
			%IF %SYSFUNC(EXIST(&&RESOLVE_CLIENT_TABLE_&ADJ_ENGINE)) 
				OR %SYSFUNC(EXIST(&RESOLVE_CLIENT_TABLE_RE_MIGR)) %THEN %DO;
				%IF &RESOLVE_CLIENT_EXCLUDE_FLAG = 1 %THEN %DO;
					%LET CLT_JOIN = %STR(LEFT JOIN);
					%LET CLT_JOIN_CONS = %STR(AND B.ALGN_LVL_GID_KEY IS NULL);
				%END;
				%ELSE %DO;
					%LET CLT_JOIN = %STR(INNER JOIN);
					%LET CLT_JOIN_CONS = %STR();
				%END;
/*CCW4: PULL QL_CLIENT_ID FROM EDW FOR RX AND RE */
				PROC SQL NOPRINT;
					CONNECT TO ORACLE(PATH=&GOLD );
				CREATE TABLE &ORA_TMP..ALGN_LVL_LIST_&INITIATIVE_ID._&ADJ_ENGINE. AS
				SELECT * FROM CONNECTION TO ORACLE
					( 
					SELECT DISTINCT A.ALGN_LVL_GID_KEY
									&HIERARCHY_LIST.
								   ,A.PAYER_ID
								   ,A.CUST_NM AS CLIENT_NM
								   ,A.QL_CLNT_ID AS QL_CLIENT_ID

					FROM  DSS_CLIN.V_ALGN_LVL_DENORM A
					&CLT_JOIN.
/*						  &&RESOLVE_CLIENT_TABLE_&ADJ_ENGINE B*/
					&CC_RE_MIGR_TBL. B
					ON A.ALGN_LVL_GID_KEY = B.ALGN_LVL_GID_KEY
					WHERE A.SRC_SYS_CD = %BQUOTE('&SRC_SYS_CD')
/*					  AND SYSDATE BETWEEN A.ALGN_GRP_EFF_DT AND A.ALGN_GRP_END_DT*/
					&CC_EFF_EXP_COND.
					 &CLT_JOIN_CONS.
					ORDER BY A.ALGN_LVL_GID_KEY
					) ;
					DISCONNECT FROM ORACLE;
				QUIT;
				
				
				%LET CLIENT_TABLE = %STR(,&ORA_TMP..ALGN_LVL_LIST_&INITIATIVE_ID._&ADJ_ENGINE. CLT);
				%let CLIENT_VARS  = %STR(,CLT.ALGN_LVL_GID_KEY
										 ,CLT.QL_CLIENT_ID AS CLIENT_ID
										 ,CLT.CLIENT_NM 
										 ,CLT.CLIENT_LEVEL_1
										 ,CLT.CLIENT_LEVEL_2
										 ,CLT.CLIENT_LEVEL_3);			
			%END;

			%ELSE %DO;
			%PUT NOTE: CCW4 DO NOT EXIST = &&RESOLVE_CLIENT_TABLE_&ADJ_ENGINE;
/*CCW4: PULL QL_CLIENT_ID FROM EDW FOR RX AND RE */
/*		AND DO NOT CHECK ALGN_GRP_END_DT FOR RE HISTORY*/
				PROC SQL NOPRINT;
					CONNECT TO ORACLE(PATH=&GOLD );
					CREATE TABLE &ORA_TMP..ALGN_LVL_LIST_&INITIATIVE_ID._&ADJ_ENGINE. AS
					SELECT * FROM CONNECTION TO ORACLE
					( 
					SELECT DISTINCT A.ALGN_LVL_GID_KEY
									&HIERARCHY_LIST.
								   ,A.PAYER_ID
								   ,A.CUST_NM AS CLIENT_NM
								   ,A.QL_CLNT_ID AS QL_CLIENT_ID
					FROM  DSS_CLIN.V_ALGN_LVL_DENORM A
					WHERE A.SRC_SYS_CD = %BQUOTE('&SRC_SYS_CD')
/*					  AND SYSDATE BETWEEN A.ALGN_GRP_EFF_DT AND A.ALGN_GRP_END_DT*/
					&CC_EFF_EXP_COND.
					ORDER BY A.ALGN_LVL_GID_KEY
					) ;
					DISCONNECT FROM ORACLE;
				QUIT;
				
				%LET CLIENT_TABLE = %STR(,&ORA_TMP..ALGN_LVL_LIST_&INITIATIVE_ID._&ADJ_ENGINE. CLT);

			%END;

					PROC SQL NOPRINT;
						SELECT COUNT(*) INTO : REFILL_FILL_QTY
						FROM &HERCULES..TFILE_FIELD AS A,
						&HERCULES..TFIELD_DESCRIPTION AS B,
						&HERCULES..TPHASE_RVR_FILE AS C
						WHERE INITIATIVE_ID=&INITIATIVE_ID
						AND PHASE_SEQ_NB=&PHASE_SEQ_NB
						AND A.FILE_ID = C.FILE_ID
						AND A.FIELD_ID = B.FIELD_ID
						AND LEFT(TRIM(FIELD_NM)) IN ('REFILL_FILL_QY')
						;
					QUIT;

					
		/** IF REFILL_FILL_QTY IS POPULATED IN TFILE AND TFILE_FIELD FOR 
		    THE INITIATIVE THEN JOIN AGAINST V_CLAIM AND OBTAIN 
		    SBMTD_REFIL_ATHZD (RX) OR ATHZD_REFIL_QTY (RE) AS REFILL_FILL_QTY 
		    OTHERWISE LEAVE REFILL_FILL_QTY AS NULL  **/

					%IF &REFILL_FILL_QTY >= 1 %THEN %DO;
						%IF &ADJ_ENGINE. = RX %THEN %DO;
							%LET REFIL_QTY_CLM_TABLE = %STR(,&DSS_CLIN..V_CLAIM VCLM);
						%END;
						%ELSE %IF &ADJ_ENGINE. = RE %THEN %DO;
							%LET REFIL_QTY_CLM_TABLE = %STR(,&DSS_CLIN..V_CLAIM_ALV VCLM);
						%END;
						%LET REFIL_QTY_CLM_TABLE_CONS = %STR(AND CLAIM.CLAIM_GID = VCLM.CLAIM_GID
															 AND VCLM.BATCH_DATE BETWEEN &CLM_BEGIN_DT_PLUS_1WK. AND &CLM_END_DT_PLUS_1WK.);
					%END;
					%ELSE %DO;
						%LET REFIL_QTY_CLM_TABLE = %STR();
						%LET REFIL_QTY_CLM_TABLE_CONS = %STR();
						%LET REFILL_QTY = %STR(,0 AS REFILL_FILL_QY);
					%END;

/*			%INCLUDE "/PRG/sas&sysmode.1/hercules/macros/delivery_sys_check.sas";*/
			%INCLUDE "/herc&sysmode/prg/hercules/macros/delivery_sys_check.sas";


			DATA _NULL_;
				CALL SYMPUT ('START_TM',PUT(%SYSFUNC(DATETIME()), DATETIME23.));
			RUN;
			%PUT NOTE: PULL FROM CLAIMS - START TIME - &START_TM;
		 *CCW4: DROP TEMP RE MIGR TABLE ALSO;
 		%IF &CC_RE_MIGR_IND = 1 %THEN %DO;
			%DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR);
 		%END;
/*		NF - commented drop begin*/
			%DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
			%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
			%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP2_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
			%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP3_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
/*		NF - commented drop ends*/
*SASDOC--------------------------------------------------------------------------
|24MAR2009 - Hercules Version  2.1.2.02
|G. DUDLEY - REMOVED LOGIC TO EXTRACT DATA FOR REFILL_FILL_QTY AND SET COLUMN
|            TO ZERO INSTEAD
+------------------------------------------------------------------------SASDOC*;

		
			PROC SQL;
				CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
				EXECUTE
				(
					CREATE TABLE &ORA_TMP..TMP_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. AS

				  SELECT  %BQUOTE(/)%BQUOTE(*) + ORDERED full(ndc) use_hash(RVWDT) full(RVWDT) use_hash(drug) 
				  	full(drug) use_hash(claim) full(claim) use_hash(clnt) full(clnt) 
				  	use_hash(prctr) full(prctr) use_hash(phmcy) full(phmcy) 
                      %BQUOTE(*)%BQUOTE(/)

							%BQUOTE(')&ADJ_ENGINE.%BQUOTE(') AS ADJ_ENGINE	
							,CLT.ALGN_LVL_GID_KEY
							,CLT.QL_CLIENT_ID AS CLIENT_ID
							,CLT.CLIENT_NM 
							,CLT.CLIENT_LEVEL_1
							,CLT.CLIENT_LEVEL_2
							,CLT.CLIENT_LEVEL_3
							,PRCTR.PRCTR_ID AS PRACTITIONER_ID 
							,PRCTR.QL_PRSCR_ID AS PRESCRIBER_ID
							,PRCTR.ENTITY_IND
							,PRCTR.DEGR_1_CD
							,PHMCY.NABP_CODE_6
							,CLAIM.PAYER_ID
							,CLAIM.MBR_GID
							,CLAIM.PHMCY_GID
							,CLAIM.PRCTR_GID
							,CLAIM.DSPND_DATE
							,CLAIM.BATCH_DATE
							,CLAIM.AMT_COPAY AS MEMBER_COST_AT
							,CLAIM.BNFT_LVL_CODE
							,SUBSTR(CLAIM.PTNT_BRTH_DT, 1, 10) AS BIRTH_DT
/*							 pull max per Negative Formulary requirments;*/
							,MAX(SUBSTR(CLAIM.DSPND_DATE, 1, 10)) AS LAST_FILL_DT
							,CLAIM.CLAIM_TYPE AS RX_COUNT_QY
							,DRUG.DRUG_GID
							,DRUG.GCN_CODE 
							,DRUG.GCN_NBR 
							,CAST(DRUG.QL_NHU_TYPE_CD AS INT) AS NHU_TYPE_CD
							,CAST(DRUG.NDC_CODE AS INT) AS DRUG_NDC_ID
							&SELECT_DRUG_SEQ.
							,DRUG.DSG_FORM AS DRUG_ABBR_DSG_NM
							,DRUG.BRAND_NAME AS DRUG_ABBR_PROD_NM
							,DRUG.STRGH_DESC AS DRUG_ABBR_STRG_NM
							,DRUG.QL_DRUG_BRND_CD as DRUG_BRAND_CD
							,0 AS REFILL_FILL_QY
							,0 AS LTR_RULE_SEQ_NB
							,CLAIM.FRMLY_GID         /*N. WILLIAMS - 26mar2009 added*/
							,CLAIM.CLAIM_GID         /*N. WILLIAMS - 26mar2009 added*/

					FROM 	 &DSS_CLIN..V_DRUG_DENORM DRUG
					 		 &DRUG_NDC_TABLE.
							,&DSS_CLIN..V_CLAIM_CORE_PAID CLAIM
							 &CLIENT_TABLE.
							,&DSS_CLIN..V_PRCTR_DENORM PRCTR
							,&DSS_CLIN..V_PHMCY_DENORM PHMCY   
							 &REFIL_QTY_CLM_TABLE. 
					WHERE	CLAIM.DSPND_DATE BETWEEN &CLM_BEGIN_DT_CONV AND &CLM_END_DT_CONV 
						AND CLAIM.BATCH_DATE IS NOT NULL
						AND	CLAIM.SRC_SYS_CD = %BQUOTE('&SRC_SYS_CD')
						AND CLAIM.CLAIM_WSHD_CD IN ('P', 'W')
						AND (CLAIM.MBR_SUFFX_FLG = 'Y' OR CLAIM.MBR_SUFFX_FLG IS NULL)
						AND CLAIM.QL_VOID_IND <= 0
						AND CLAIM.ALGN_LVL_GID = CLT.ALGN_LVL_GID_KEY 
						AND CLAIM.PRCTR_GID = PRCTR.PRCTR_GID
						AND DRUG.QL_NHU_TYPE_CD IS NOT NULL
						&PRSCR_CONS.
						&DRUG_CONS.
						AND CLAIM.PHMCY_GID = PHMCY.PHMCY_GID
						AND CLAIM.DRUG_GID = DRUG.DRUG_GID
						&DS_STRING_RX_RE.
						&REFIL_QTY_CLM_TABLE_CONS.
				GROUP BY
			       		CLT.ALGN_LVL_GID_KEY,
      					CLT.QL_CLIENT_ID,
       					CLT.CLIENT_NM,
       					CLT.CLIENT_LEVEL_1,
       					CLT.CLIENT_LEVEL_2,
       					CLT.CLIENT_LEVEL_3,
       					PRCTR.PRCTR_ID,
       					PRCTR.QL_PRSCR_ID,
       					PRCTR.ENTITY_IND,
       					PRCTR.DEGR_1_CD,
       					PHMCY.NABP_CODE_6,
       					CLAIM.PAYER_ID,
       					CLAIM.MBR_GID,
       					CLAIM.PHMCY_GID,
       					CLAIM.PRCTR_GID,
       					CLAIM.DSPND_DATE,
       					CLAIM.BATCH_DATE,
       					CLAIM.AMT_COPAY,
       					CLAIM.BNFT_LVL_CODE,
       					CLAIM.PTNT_BRTH_DT,
       					CLAIM.CLAIM_TYPE,
       					DRUG.DRUG_GID,
       					DRUG.GCN_CODE,
       					DRUG.GCN_NBR,
       					DRUG.QL_NHU_TYPE_CD,
       					DRUG.NDC_CODE
						&SELECT_DRUG_SEQ_GROUP.,
       					DRUG.DSG_FORM,
       					DRUG.BRAND_NAME,
       					DRUG.STRGH_DESC,
       					DRUG.QL_DRUG_BRND_CD,
       					CLAIM.FRMLY_GID,
       					CLAIM.CLAIM_GID
/*					ORDER BY PAYER_ID, MBR_GID*/
				) BY ORACLE;
			DISCONNECT FROM ORACLE;
			QUIT;		

		DATA _NULL_;
			CALL SYMPUT ('END_TM',PUT(%SYSFUNC(DATETIME()), DATETIME23.));
		RUN;
		%PUT NOTE: PULL FROM CLAIMS END TIME - &END_TM;

		PROC SQL;
			SELECT COUNT(*) INTO :EDW_CLAIM_CNT
			FROM &ORA_TMP..TMP_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. ;
		QUIT;

		%PUT NOTE: &ORA_TMP..TMP_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT;

		/*		CCW4 : CC_RE_MIGR_IND CONDITION ADDED 	*/
		%IF &EDW_CLAIM_CNT. > 0 OR &CC_RE_MIGR_IND. = 1 %THEN %DO;

			PROC SQL;
			CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
			EXECUTE
				(
				 CREATE TABLE &ORA_TMP..TMP2_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. AS
				 SELECT PAYER_ID, MBR_GID, COUNT(*) AS CNT
				 FROM &ORA_TMP..TMP_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.
				 GROUP BY PAYER_ID, MBR_GID
				 ORDER BY PAYER_ID, MBR_GID
				) BY ORACLE;
			DISCONNECT FROM ORACLE;
			QUIT;

			PROC SQL;
				SELECT COUNT(*) INTO :EDW_CLAIM_CNT2
				FROM &ORA_TMP..TMP2_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.
			QUIT;
			%PUT "NOTE: CLAIM COUNT FOR DISTINCT MBR_GID+PAYER_ID - &EDW_CLAIM_CNT2";

			PROC SQL;
				SELECT COUNT(*) INTO :EDW_CLAIM_CNT
				FROM &ORA_TMP..TMP2_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. ;
			QUIT;

			%PUT NOTE: &ORA_TMP..TMP2_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT;
			
			%IF &EDW_CLAIM_CNT2. >= 25000000 
			%THEN %LET AVOID_IX_LKP = %STR(/1);
			%ELSE %LET AVOID_IX_LKP = %STR();

			DATA _NULL_;
				CALL SYMPUT ('START_TM',PUT(%SYSFUNC(DATETIME()), DATETIME23.));
			RUN;
			%PUT NOTE: JOIN CLAIMS WITH MBR START TIME - &START_TM;
*SASDOC--------------------------------------------------------------------------
|26FEB2009 - Hercules Version  2.1.2.02
|G. DUDLEY - ADDED THE "MBR_REUSE_RISK_FLG" TO THE QUERY TO EXTRACT MEMBER
|            DEMOGRAPHICS FROM THE V-MBR VIEW.  THIS WILL BE USED TO EXCLUDE 
|            SUSPECT MEMBERS DUE TO POSSIBLE MEBER ID REUSE.
|09AUG2012 - S.BILETSKY - CCW4 - ONLY FOR MIGRATED CLIENTS LOOK FOR RE HISTORY 
|			 ONLY IF QL_PT_BENEFICIARY_ID EXISTS IN TMP2_CLAIMS_PULL_INITIATIVE_RX 
|
+------------------------------------------------------------------------SASDOC*;

			PROC SQL;
				CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
				EXECUTE
				(
					CREATE TABLE &ORA_TMP..TMP3_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. AS
					SELECT CLAIM.*
							,MBR.QL_BNFCY_ID AS PT_BENEFICIARY_ID
							,MBR.QL_CARDHLDR_BNFCY_ID AS CDH_BENEFICIARY_ID
							,MBR.MBR_ID AS MBR_ID
							,MBR.MBR_FIRST_NM
							,MBR.MBR_LAST_NM				
							,MBR.ADDR_LINE1_TXT			
							,MBR.ADDR_LINE2_TXT			
							,MBR.ADDR_CITY_NM				
							,MBR.ADDR_ST_CD				
							,MBR.ADDR_ZIP_CD	
							,MBR.SRC_SUFFX_PRSN_CD
							,coalesce(MBR.LANG_CD, MBR.LANG_CODE)AS LANGUAGE_INDICATOR	 /*N. WILLIAMS - 26mar2009 added*/
					FROM 	
							&ORA_TMP..TMP2_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. CLAIM     
							,&DSS_CLIN..V_MBR MBR
					WHERE
							MBR.PAYER_ID&AVOID_IX_LKP. &PAYER_ID_CONS.
						AND CLAIM.PAYER_ID&AVOID_IX_LKP. = MBR.PAYER_ID&AVOID_IX_LKP.
						AND CLAIM.MBR_GID&AVOID_IX_LKP. = MBR.MBR_GID&AVOID_IX_LKP.
						AND MBR.MBR_REUSE_RISK_FLG IS NULL
				) BY ORACLE;
			DISCONNECT FROM ORACLE;
			QUIT;

			PROC SQL;
				SELECT COUNT(*) INTO :EDW_CLAIM_CNT
				FROM &ORA_TMP..TMP3_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. ;
			QUIT;
			%PUT NOTE: &ORA_TMP..TMP3_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT;

/*			%LOAD_PARTICIPANT_EXCLUSION;*/
/*			%PARTICIPANT_EXCLUSIONS(TBL_NAME_IN = &ORA_TMP..TMP3_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);*/

		/*CCW4 : ACCORDING TO MIGR IND CREATE CLAIMS MIGR TABLE*/

			PROC SQL;
			CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
			EXECUTE
				(	&CC_CREATE_CLAIMS_RE_COND. AS
					SELECT  
							CLAIM.*
							,MBR.PT_BENEFICIARY_ID
							,MBR.CDH_BENEFICIARY_ID
							,MBR.MBR_ID
							,MBR.MBR_FIRST_NM
							,MBR.MBR_LAST_NM				
							,MBR.ADDR_LINE1_TXT			
							,MBR.ADDR_LINE2_TXT			
							,MBR.ADDR_CITY_NM				
							,MBR.ADDR_ST_CD				
							,MBR.ADDR_ZIP_CD
							,MBR.SRC_SUFFX_PRSN_CD
							,MBR.LANGUAGE_INDICATOR	 /*N. WILLIAMS - 26mar2009 added*/
							,FRMFL.FRMLY_NB    AS FORMULARY_ID /*N. WILLIAMS - 26mar2009 added*/
					FROM 	
							&ORA_TMP..TMP_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. CLAIM     
							,&ORA_TMP..TMP3_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. MBR
							,&DSS_CLIN..V_FRMLY_PROMNT_NDC_STUS                    FRMFL
					WHERE
							CLAIM.MBR_GID = MBR.MBR_GID
						AND CLAIM.PAYER_ID = MBR.PAYER_ID
						AND CLAIM.DRUG_GID = FRMFL.DRUG_GID 
						AND CLAIM.FRMLY_GID = FRMFL.FRMLY_GID 
						&CC_ELIG_RE_COND.
					ORDER BY
							 CLAIM.MBR_GID
							,CLAIM.ALGN_LVL_GID_KEY
							,CLAIM.DRUG_GID
							,CLAIM.PHMCY_GID
							,CLAIM.PRCTR_GID
				) BY ORACLE;
			DISCONNECT FROM ORACLE;
			QUIT;

		%put NOTE: *************************************************************************;
		%put NOTE: SQL COMPLETE ************************************************************;
		%put NOTE: *************************************************************************;

			PROC SQL;
				SELECT COUNT(*) INTO :EDW_CLAIM_CNT
				FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. ;
			QUIT;
			%PUT NOTE: &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT;

			DATA _NULL_;
				CALL SYMPUT ('END_TM',PUT(%SYSFUNC(DATETIME()), DATETIME23.));
			RUN;
			%PUT NOTE: JOIN CLAIMS WITH MBR END TIME - &END_TM;

		%END;
		%ELSE %DO;
			%LET ERR_FL = 1;
			%ON_ERROR( ACTION=ABORT
			  ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL
			  ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID
			  ,EM_MSG=%STR(CLAIMS_PULL_EDW MACRO RETURNED 0 ROWS FOR ADJ &ADJ_ENGINE. 
						   SO THE EXECUTION OF THE MAILING PROGRAM HAS BEEN FORCED TO ABORT));
		%END;

/*		NF - commented drop begin*/
		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP2_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP3_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
/*		NF - commented drop end*/
	%MEND EDW_CLAIMS;

	%IF &RX_ADJ. = 1 %THEN %DO;
		%LET SRC_SYS_CD = %STR(X);
		%LET PAYER_ID_CONS = %STR(< 100000);
		%LET HIERARCHY_LIST = %STR(	,A.EXTNL_LVL_ID1 AS CLIENT_LEVEL_1
									,A.EXTNL_LVL_ID2 AS CLIENT_LEVEL_2
									,A.EXTNL_LVL_ID3 AS CLIENT_LEVEL_3	);
		%LET REFILL_QTY = %STR(,VCLM.SBMTD_REFIL_ATHZD AS REFILL_FILL_QY);
		%LET CARRIER_FIELD = CLIENT_LEVEL_1;
		%LET CC_EFF_EXP_COND = %STR(AND SYSDATE BETWEEN A.ALGN_GRP_EFF_DT AND A.ALGN_GRP_END_DT );
		%LET CC_ELIG_RE_COND = %STR( );
		%LET CC_CREATE_CLAIMS_RE_COND = %STR(CREATE TABLE &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE. );
		%LET CC_RE_MIGR_TBL = %STR(&RESOLVE_CLIENT_TABLE_RX);

		%PUT NOTE: NFPROCESS RX CLIENT &DSPLY_CLT_SETUP_CD &CC_RE_MIGR_IND &RE_ADJ;

		%EDW_CLAIMS(ADJ_ENGINE = RX);
	%END;


%*SASDOC ----------------------------------------------------------------------------------
 | CCW4 : SET RE_ADJ AND MIGR_IND TO 1 IF MIGR TABLE EXIST 
 |			TO RUN MIGRATED RECORDS FROM RE FOR CLIENT SPECIFIC
 | 
 | 		IF CLIENT MIGRATED FROM RE TO RX: 
 |			1. DO NOT CHECK ALGN_GRP_END_DT FOR HISTORY RE
 |			2. DO NOT PULL RE HISTORY CLAIMS IF PT_BENEFICIARY_ID IS NOT IN RX PULL
 +-----------------------------------------------------------------------------------SASDOC;

	%IF &DSPLY_CLT_SETUP_CD=1 %THEN %DO;
		
		%IF %SYSFUNC(EXIST(&ORA_TMP..TINIT_CLT_MGRTN_RE_&INITIATIVE_ID.))=1 %THEN %DO;
/*			IF CC_RE_MIGR_IND = 1 AND RE_ADJ = 1*/
			%LET SRC_SYS_CD = %STR(R);
			%LET PAYER_ID_CONS = %STR(BETWEEN 500000 AND 2000000);
			%LET HIERARCHY_LIST = %STR(	,A.RPT_OPT1_CD AS CLIENT_LEVEL_1
				   	   			,A.EXTNL_LVL_ID1 AS CLIENT_LEVEL_2
				   	   			,A.EXTNL_LVL_ID3 AS CLIENT_LEVEL_3	);
			%LET REFILL_QTY = %STR(,VCLM.ATHZD_REFIL_QTY AS REFILL_FILL_QY);
			%LET CARRIER_FIELD = CLIENT_LEVEL_2;

			%LET CC_EFF_EXP_COND = %STR( );
			%LET CC_ELIG_RE_COND = %STR(AND MBR.PT_BENEFICIARY_ID IN 
									(SELECT DISTINCT RX.PT_BENEFICIARY_ID FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX RX));
			%LET CC_CREATE_CLAIMS_RE_COND = %STR(CREATE TABLE &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE._MIGR);
			%LET CC_RE_MIGR_TBL = %STR(&RESOLVE_CLIENT_TABLE_RE_MIGR);

			%PUT NOTE: NFPROCESS MIGRATED RE CLIENT &DSPLY_CLT_SETUP_CD &CC_RE_MIGR_IND &RE_ADJ;

			%EDW_CLAIMS(ADJ_ENGINE = RE);
DATA &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR_BKUP;
  SET &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR;
RUN;
/*CCW4		CONVERT RE HISTORY TABLE INTO RX ONLY FOR MIGRATED CLIENTS*/

			PROC SQL;
				CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
				EXECUTE (
					UPDATE &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR 
					SET ADJ_ENGINE = 
					(SELECT DISTINCT ADJ_ENGINE FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX) , 
					CLIENT_NM = 
					(SELECT DISTINCT CLIENT_NM FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX) , 
					CLIENT_LEVEL_1 = 
					(SELECT DISTINCT CLIENT_LEVEL_1 FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX)
				) BY ORACLE;
				DISCONNECT FROM ORACLE;
			QUIT;
DATA &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX_BKUP;
  SET &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX;
RUN;
			PROC SQL;
				CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);

EXECUTE (
INSERT INTO &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX
      (
          ADJ_ENGINE,
          ALGN_LVL_GID_KEY,
          CLIENT_ID,
          CLIENT_NM,
          CLIENT_LEVEL_1,
          CLIENT_LEVEL_2,
          CLIENT_LEVEL_3,
          PRACTITIONER_ID,
          PRESCRIBER_ID,
          ENTITY_IND,
          DEGR_1_CD,
          NABP_CODE_6,
          PAYER_ID,
          MBR_GID,
          PHMCY_GID,
          PRCTR_GID,
          DSPND_DATE,
          BATCH_DATE,
          MEMBER_COST_AT,
          BNFT_LVL_CODE,
          BIRTH_DT,
          LAST_FILL_DT,
          RX_COUNT_QY,
          DRUG_GID,
          GCN_CODE,
          GCN_NBR,
          NHU_TYPE_CD,
          DRUG_NDC_ID,
          DRG_GROUP_SEQ_NB,
          DRG_SUB_GRP_SEQ_NB,
          DRUG_ABBR_DSG_NM,
          DRUG_ABBR_PROD_NM,
          DRUG_ABBR_STRG_NM,
          DRUG_BRAND_CD,
          REFILL_FILL_QY,
          LTR_RULE_SEQ_NB,
          FRMLY_GID,
          CLAIM_GID,
          PT_BENEFICIARY_ID,
          CDH_BENEFICIARY_ID,
          MBR_ID,
          MBR_FIRST_NM,
          MBR_LAST_NM,
          ADDR_LINE1_TXT,
          ADDR_LINE2_TXT,
          ADDR_CITY_NM,
          ADDR_ST_CD,
          ADDR_ZIP_CD,
          SRC_SUFFX_PRSN_CD,
          LANGUAGE_INDICATOR,
          FORMULARY_ID
      )
SELECT ADJ_ENGINE,
       ALGN_LVL_GID_KEY,
       CLIENT_ID,
       CLIENT_NM,
       CLIENT_LEVEL_1,
       CLIENT_LEVEL_2,
       CLIENT_LEVEL_3,
       PRACTITIONER_ID,
       PRESCRIBER_ID,
       ENTITY_IND,
       DEGR_1_CD,
       NABP_CODE_6,
       PAYER_ID,
       MBR_GID,
       PHMCY_GID,
       PRCTR_GID,
       DSPND_DATE,
       BATCH_DATE,
       MEMBER_COST_AT,
       BNFT_LVL_CODE,
       BIRTH_DT,
       LAST_FILL_DT,
       RX_COUNT_QY,
       DRUG_GID,
       GCN_CODE,
       GCN_NBR,
       NHU_TYPE_CD,
       DRUG_NDC_ID,
       DRG_GROUP_SEQ_NB,
       DRG_SUB_GRP_SEQ_NB,
       DRUG_ABBR_DSG_NM,
       DRUG_ABBR_PROD_NM,
       DRUG_ABBR_STRG_NM,
       DRUG_BRAND_CD,
       REFILL_FILL_QY,
       LTR_RULE_SEQ_NB,
       FRMLY_GID,
       CLAIM_GID,
       PT_BENEFICIARY_ID,
       CDH_BENEFICIARY_ID,
       MBR_ID,
       MBR_FIRST_NM,
       MBR_LAST_NM,
       ADDR_LINE1_TXT,
       ADDR_LINE2_TXT,
       ADDR_CITY_NM,
       ADDR_ST_CD,
       ADDR_ZIP_CD,
       SRC_SUFFX_PRSN_CD,
       LANGUAGE_INDICATOR,
       FORMULARY_ID
  FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR
				) BY ORACLE;
				DISCONNECT FROM ORACLE;
			QUIT;

/*CCW4		AFTER RECAP HISTORY WAS INSERTED TO RX TABLE, SET RECAP ADJ TO 0 */
			%LET RE_ADJ = 0;
		%END;
		%IF %SYSFUNC(EXIST(&&RESOLVE_CLIENT_TABLE_RE))=1 %THEN %DO;
/*		IF CC_RE_MIGR_IND = 0 */
			%LET SRC_SYS_CD = %STR(R);
			%LET PAYER_ID_CONS = %STR(BETWEEN 500000 AND 2000000);
			%LET HIERARCHY_LIST = %STR(	,A.RPT_OPT1_CD AS CLIENT_LEVEL_1
				   	   			,A.EXTNL_LVL_ID1 AS CLIENT_LEVEL_2
				   	   			,A.EXTNL_LVL_ID3 AS CLIENT_LEVEL_3	);
			%LET REFILL_QTY = %STR(,VCLM.ATHZD_REFIL_QTY AS REFILL_FILL_QY);
			%LET CARRIER_FIELD = CLIENT_LEVEL_2;

			%LET CC_EFF_EXP_COND = %STR(AND SYSDATE BETWEEN A.ALGN_GRP_EFF_DT AND A.ALGN_GRP_END_DT );
			%LET CC_ELIG_RE_COND = %STR( );
			%LET CC_CREATE_CLAIMS_RE_COND = %STR(CREATE TABLE &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
			%LET CC_RE_MIGR_TBL = %STR(&RESOLVE_CLIENT_TABLE_RE);

			%PUT NOTE: NFPROCESS NON MIGRATED RE CLIENT &DSPLY_CLT_SETUP_CD &CC_RE_MIGR_IND &RE_ADJ;

			%EDW_CLAIMS(ADJ_ENGINE = RE);

		%END;
	%END;

%*SASDOC ----------------------------------------------------------------------------------
 | CCW4 : SET RE_ADJ AND MIGR_IND TO 1 IF MIGR TABLE EXIST 
 |			TO RUN MIGRATED RECORDS FROM RE FOR BOB
 +-----------------------------------------------------------------------------------SASDOC;
	%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN %DO;
		%IF %SYSFUNC(EXIST(&ORA_TMP..TPGMTASK_CLT_MGRTN_RE_&INITIATIVE_ID.))=1 %THEN %DO;
/*CCW4		START OF PROCCESS FOR MIGR BOB */
/*			IF CC_RE_MIGR_IND = 1 */

			%LET SRC_SYS_CD = %STR(R);
			%LET PAYER_ID_CONS = %STR(BETWEEN 500000 AND 2000000);
			%LET HIERARCHY_LIST = %STR(	,A.RPT_OPT1_CD AS CLIENT_LEVEL_1
					   	   			,A.EXTNL_LVL_ID1 AS CLIENT_LEVEL_2
					   	   			,A.EXTNL_LVL_ID3 AS CLIENT_LEVEL_3	);
			%LET REFILL_QTY = %STR(,VCLM.ATHZD_REFIL_QTY AS REFILL_FILL_QY);
			%LET CARRIER_FIELD = CLIENT_LEVEL_2;

			%LET CC_EFF_EXP_COND = %STR( );
			%LET CC_ELIG_RE_COND = %STR(AND MBR.PT_BENEFICIARY_ID IN 
										(SELECT DISTINCT RX.PT_BENEFICIARY_ID FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX RX));
			%LET CC_CREATE_CLAIMS_RE_COND = %STR(CREATE TABLE &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE._MIGR);
			%LET CC_RE_MIGR_TBL = %STR(&RESOLVE_CLIENT_TABLE_RE_MIGR);

			%PUT NOTE: NFPROCESS MIGRATED RE CLIENT &DSPLY_CLT_SETUP_CD &CC_RE_MIGR_IND &RE_ADJ;

			%EDW_CLAIMS(ADJ_ENGINE = RE);

/*CCW4		CONVERT RE HISTORY TABLE INTO RX ONLY FOR MIGRATED CLIENTS*/
DATA &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR_BKUP;
  SET &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR;
RUN;
			PROC SQL;
				CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
				EXECUTE (
					UPDATE &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR 
					SET ADJ_ENGINE = 
					(SELECT DISTINCT ADJ_ENGINE FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX) , 
					CLIENT_NM = 
					(SELECT DISTINCT CLIENT_NM FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX
					WHERE CLIENT_LEVEL_1 = (SELECT  DISTINCT SUBSTR(A.CARRIER_ID,2)
         								FROM &ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID. A, DSS_CLIN.V_CLNT_CAG_MGRTN B
         								WHERE SUBSTR(A.CARRIER_ID,2)=B.TRGT_HIER_ALGN_1_ID)) , 
					CLIENT_LEVEL_1 = 
					(SELECT DISTINCT CLIENT_LEVEL_1 FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX
					WHERE CLIENT_LEVEL_1 = (SELECT  DISTINCT SUBSTR(A.CARRIER_ID,2)
         								FROM &ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID. A, DSS_CLIN.V_CLNT_CAG_MGRTN B
         								WHERE SUBSTR(A.CARRIER_ID,2)=B.TRGT_HIER_ALGN_1_ID))
				) BY ORACLE;
				DISCONNECT FROM ORACLE;
			QUIT;
DATA &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX_BKUP;
  SET &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX;
RUN;
			PROC SQL;
				CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
				EXECUTE (
				INSERT INTO &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RX
      (
          ADJ_ENGINE,
          ALGN_LVL_GID_KEY,
          CLIENT_ID,
          CLIENT_NM,
          CLIENT_LEVEL_1,
          CLIENT_LEVEL_2,
          CLIENT_LEVEL_3,
          PRACTITIONER_ID,
          PRESCRIBER_ID,
          ENTITY_IND,
          DEGR_1_CD,
          NABP_CODE_6,
          PAYER_ID,
          MBR_GID,
          PHMCY_GID,
          PRCTR_GID,
          DSPND_DATE,
          BATCH_DATE,
          MEMBER_COST_AT,
          BNFT_LVL_CODE,
          BIRTH_DT,
          LAST_FILL_DT,
          RX_COUNT_QY,
          DRUG_GID,
          GCN_CODE,
          GCN_NBR,
          NHU_TYPE_CD,
          DRUG_NDC_ID,
          DRG_GROUP_SEQ_NB,
          DRG_SUB_GRP_SEQ_NB,
          DRUG_ABBR_DSG_NM,
          DRUG_ABBR_PROD_NM,
          DRUG_ABBR_STRG_NM,
          DRUG_BRAND_CD,
          REFILL_FILL_QY,
          LTR_RULE_SEQ_NB,
          FRMLY_GID,
          CLAIM_GID,
          PT_BENEFICIARY_ID,
          CDH_BENEFICIARY_ID,
          MBR_ID,
          MBR_FIRST_NM,
          MBR_LAST_NM,
          ADDR_LINE1_TXT,
          ADDR_LINE2_TXT,
          ADDR_CITY_NM,
          ADDR_ST_CD,
          ADDR_ZIP_CD,
          SRC_SUFFX_PRSN_CD,
          LANGUAGE_INDICATOR,
          FORMULARY_ID
      )
	SELECT ADJ_ENGINE,
       ALGN_LVL_GID_KEY,
       CLIENT_ID,
       CLIENT_NM,
       CLIENT_LEVEL_1,
       CLIENT_LEVEL_2,
       CLIENT_LEVEL_3,
       PRACTITIONER_ID,
       PRESCRIBER_ID,
       ENTITY_IND,
       DEGR_1_CD,
       NABP_CODE_6,
       PAYER_ID,
       MBR_GID,
       PHMCY_GID,
       PRCTR_GID,
       DSPND_DATE,
       BATCH_DATE,
       MEMBER_COST_AT,
       BNFT_LVL_CODE,
       BIRTH_DT,
       LAST_FILL_DT,
       RX_COUNT_QY,
       DRUG_GID,
       GCN_CODE,
       GCN_NBR,
       NHU_TYPE_CD,
       DRUG_NDC_ID,
       DRG_GROUP_SEQ_NB,
       DRG_SUB_GRP_SEQ_NB,
       DRUG_ABBR_DSG_NM,
       DRUG_ABBR_PROD_NM,
       DRUG_ABBR_STRG_NM,
       DRUG_BRAND_CD,
       REFILL_FILL_QY,
       LTR_RULE_SEQ_NB,
       FRMLY_GID,
       CLAIM_GID,
       PT_BENEFICIARY_ID,
       CDH_BENEFICIARY_ID,
       MBR_ID,
       MBR_FIRST_NM,
       MBR_LAST_NM,
       ADDR_LINE1_TXT,
       ADDR_LINE2_TXT,
       ADDR_CITY_NM,
       ADDR_ST_CD,
       ADDR_ZIP_CD,
       SRC_SUFFX_PRSN_CD,
       LANGUAGE_INDICATOR,
       FORMULARY_ID
  	FROM &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._RE_MIGR
				) BY ORACLE;
				DISCONNECT FROM ORACLE;
			QUIT;
		%END;	
/*CCW4		END OF PROCCESS FOR MIGR BOB */

		%IF %SYSFUNC(EXIST(&&RESOLVE_CLIENT_TABLE_RE))=1 %THEN %DO;
/*		START OF PROCCESS FOR NON MIGR BOB */
			%LET SRC_SYS_CD = %STR(R);
			%LET PAYER_ID_CONS = %STR(BETWEEN 500000 AND 2000000);
			%LET HIERARCHY_LIST = %STR(	,A.RPT_OPT1_CD AS CLIENT_LEVEL_1
					   	   			,A.EXTNL_LVL_ID1 AS CLIENT_LEVEL_2
					   	   			,A.EXTNL_LVL_ID3 AS CLIENT_LEVEL_3	);
			%LET REFILL_QTY = %STR(,VCLM.ATHZD_REFIL_QTY AS REFILL_FILL_QY);
			%LET CARRIER_FIELD = CLIENT_LEVEL_2;

			%LET CC_EFF_EXP_COND = %STR(AND SYSDATE BETWEEN A.ALGN_GRP_EFF_DT AND A.ALGN_GRP_END_DT );
			%LET CC_ELIG_RE_COND = %STR( );
			%LET CC_CREATE_CLAIMS_RE_COND = %STR(CREATE TABLE &ORA_TMP..CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);
			%LET CC_RE_MIGR_TBL = %STR(&RESOLVE_CLIENT_TABLE_RE);

			%PUT NOTE: NFPROCESS NON MIGRATED RE CLIENT &DSPLY_CLT_SETUP_CD &CC_RE_MIGR_IND &RE_ADJ;

			%EDW_CLAIMS(ADJ_ENGINE = RE);
		
		%END;
/*CCW4		END OF PROCCESS FOR NON MIGR BOB */
	%END;


%MEND CLAIMS_PULL_EDW_NEGFRM;
