/*HEADER---------------------------------------------------------------------------------------------------------
|MACRO: 		PRESCRIBER_OPT_OUT.SAS
|
|PURPOSE: 		
|
|INPUT:			
|
|LOGIC:        						
|						
|OUTPUT:		
|+-----------------------------------------------------------------------------------------------------------------
|HISTORY: 
|			    SR 30OCT2008 - Hercules Version  2.1.2.01
|		        08SEP2009 - N. Williams  Hercules Version  2.1.02
|							  - ADD logic conditions for inclusion/exclusion of clients.
+-----------------------------------------------------------------------------------------------------------HEADER*/

%MACRO PRESCRIBER_OPT_OUTA(TBL_NAME_IN=,
					      TBL_NAME_OUT=);

%IF &PROGRAM_ID. EQ 105 AND &TASK_ID. EQ 11 %THEN %DO; 

/*%RESOLVE_CLIENT(TBL_NAME_OUT=&DB2_TMP..&TABLE_PREFIX._QL,*/
/*  				TBL_NAME_OUT_RX=&ORA_TMP..&TABLE_PREFIX._RX,*/
/*  				TBL_NAME_OUT_RE=&ORA_TMP..&TABLE_PREFIX._RE,*/
/*  				EXECUTE_CONDITION=%STR(1=1));*/
/**HEADER------------------------------------------------------------------------------------
|
| PROGRAM NAME: RESOLVE_CLIENT_QL.SAS
|
| CALL REFERENCE: RESOLVE_CLIENT_QL IS CALLED BY RESOLVE_CLIENT.SAS
|
| PURPOSE:
|       DETERMINING THE CLIENTS AND THEIR CPGS TO BE INCLUDED OR EXCLUDED
|       IN A MAILING.
|
| INPUT:  
|       MACRO VARIABLES FROM HERCULES_IN.SAS :
|       	INITIATIVE_ID, PROGRAM_ID, TASK_ID, QL_ADJ, RX_ADJ, RE_ADJ,
|			DFL_CLT_INC_EXU_IN, OVRD_CLT_SETUP_IN, DSPLY_CLT_SETUP_CD,
|			TABLE_PREFIX
|		TABLES :
|			PROGRAM-MAINTAINENCE SET-UP
|				HERCULES.TPGMTASK_QL_RUL
| 				CLAIMSA.TCLIENT1
|				CLAIMSA.TCPGRP_CLT_PLN_GR1
|				CLAIMSA.TRPTDT_RPT_GRP_DTL 
|			CLIENT SPECIFIC SET-UP
|          		HERCULES.TINIT_CLIENT_RULE,
|          		HERCULES.TINIT_CLT_RULE_DEF
|				CLAIMSA.TCPGRP_CLT_PLN_GR1
|				CLAIMSA.TRPTDT_RPT_GRP_DTL
|          		CLAIMSA.TCPG_PB_TRL_HIST,
|          		CLAIMSA.TPRESC_BENEFIT 
|
| OUTPUT: 
|       MACRO VARIABLES
|       	RESOLVE_CLIENT_EXCLUDE_FLAG: 
|				0=INCLUDE CPGS IN THE &TBL_NAME_OUT IN THE MAILING,
|           	1=EXCLUDE CPGS IN THE &TBL_NAME_OUT FROM THE MAILING.
|       	RESOLVE_CLIENT_TBL_EXIST_FLAG:
|           	0 = TABLE &TBL_NAME_OUT DOES NOT EXIST
|           	1 = TABLE &TBL_NAME_OUT HAS BEEN CREATED.
|		TABLE:
|			&TBL_NAME_OUT WITH CLIENT_ID AND CLT_PLAN_GROUP_ID
|			&TBL_NAME_OUT2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|
|------------------------------------------------------------------------------------------
| HISTORY: SEPT      - JOHN HOU
|          24FEB2006 - BRIAN STROPICH - ADDED THE UPCASE FUNCTION IN THE ASSIGNMENT OF
|                                       THE MACRO VARIABLE SELECT_STR (HEAT 02530529)
|		   14APR2008 - SR Hercules Version  2.1.01
|									  - CHANGED LOGIC FOR PROGRAM MAINTAINENCE SETUP
|                                     - REMOVED THE LOGIC IN INITIATIVE SET-UP THAT 
|                                       WAS SETUP TO HANDLE PARTIAL EXCLUDE (PARTIAL EXCLUDE
|                                       IS NOT ALLOWED IN COMMUNICATION ENGINE)
|									  - SOME QUERIES IN INITIATIVE SET-UP HAVE BEEN CHANGED
|                                       TO BE CONSISTENT WITH THE CODES IN BOB SETUP
|						 - Hercules Version  2.1.2.01
|------------------------------------------------------------------------------------------
+---------------------------------------------------------------------------------*HEADER*/

%MACRO RESOLVE_CLIENT_QLA;

%*SASDOC -------------------------------------------------------------------------
 | SETTING UP EXECUTE_CONDITION_FLAG
 | EXECUTES ONLY WHEN MACRO VARIABLE EXECUTE_CONDITION_FLAG = 1, OTHERWISE EXIT
 +---------------------------------------------------------------------------SASDOC;

%IF &EXECUTE_CONDITION_FLAG. = 0 %THEN %DO;
	%PUT NOTE: MACRO WILL NOT EXECUTE BECAUSE EXECUTE_CONDITION IS FALSE;
	%PUT NOTE: EXECUTE_CONDITION = &EXECUTE_CONDITION; 
%END;
%IF &EXECUTE_CONDITION_FLAG.= 0 %THEN 
	%GOTO EXIT;

%*SASDOC ----------------------------------------------------------------------------------
 | PROCESS SETUP BASED ON DSPLY_CLT_SETUP_CD
 | NOTE: DSPLY_CLT_SETUP_CD = 1 - INITIATIVE SETUP (CLIENT SPECIFIC PROCESS)
 |       DSPLY_CLT_SETUP_CD IN (2,3) - PROGRAM MAINTAINENCE SETUP (BOOK OF BUSINESS PROCESS / PROGRAM SET-UP)
 |       IF (DSPLY_CLT_SETUP_CD > 3 OR DSPLY_CLT_SETUP_CD = 0), EXIT THE PROCESS
 |       IF (DSPLY_CLT_SETUP_CD IN (2,3) AND OVRD_CLT_SETUP_IN = 1), RESET DSPLY_CLT_SETUP_CD =1
 +-----------------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN
    %PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), USE PROGRAM MAINTAINENCE SETUP. ;
%ELSE %IF &DSPLY_CLT_SETUP_CD=1 %THEN
	%PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), USE CLIENT SETUP. ;
%ELSE %DO;
	%PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), EXIT THE PROCESS;
%END;

%IF (&DSPLY_CLT_SETUP_CD = 0 OR &DSPLY_CLT_SETUP_CD > 3) %THEN %DO;
    %LET RESOLVE_CLIENT_TBL_EXIST_FLAG = 0;
	%GOTO EXIT;
%END;

/*%IF ((&DSPLY_CLT_SETUP_CD = 2 OR &DSPLY_CLT_SETUP_CD=3) AND &OVRD_CLT_SETUP_IN=1) %THEN */
/*		%LET DSPLY_CLT_SETUP_CD=1;*/
 
%*SASDOC ----------------------------------------------------------------------------------
 | DROP &TBL_NAME_OUT TABLE THAT ALREADY EXISTS IN THE DATABASE
 +-----------------------------------------------------------------------------------SASDOC;

%DROP_DB2_TABLE(TBL_NAME=&TBL_NAME_OUT); 

%*SASDOC -----------------------------------------------------------------------
 | PROGRAM-MAINTAINENCE SETUP: TPROGRAM_TASK.DSPLY_CLT_SETUP_CD IN (2,3)
 | NOTE: 1)DEFAULT INCLUDE / EXCLUDE IS PASSED AT PROGRAMTASK LEVEL, MEANING 
 |       ALL CLIENTS ASSOCIATED WITH THAT PROGRAM_ID AND TASK_ID WILL HAVE THE 
 |       SAME DEFAULT INCLUDE / EXCLUDE, UNLIKE HERCULES SETUP, IF NO ROWS EXIST
 |       IN TPGMTASK_QL_RUL.
 |       2) IF ROWS EXIST IN TPGMTASK_QL_RUL, THEN THE PROCESS RUNS AS PER
 |       THE RULE SPECIFIED IN CLT_SETUP_DEF_CD IN TPGMTASK_QL_RUL,
 |       AND THE DEFAULT INCLUDE / EXCLUDE SPECIFIED IN PROGRAMTASK IS IGNORED
 |       3) THE OUPUT TABLE CREATED IS BASED ON THE DEFAULT INCLUDE / EXCLUDE 
 |       SPECIFIED AT PROGRAMTASK LEVEL, BECAUSE THE PROCESS THAT CALLS 
 |       RESOLVE_CLIENT HAS BEEN HARD-CODED BASED ON THE INCLUDE / EXCLUDE 
 |       AT PROGRAMTASK LEVEL
 |       4) THE PROCESS FOR PROGRAM MAINTAINENCE SETUP IS CODED TO RUN FOR 
 |       DEFAULT EXCLUDE (MEANING THE FINAL TABLE CREATED HAS THE INCLUDE LIST),
 |       BUT IF THE PROGRAM-TASK BEING RUN IS A DEFAULT INCUDE
 |       THEN THE OUTPUT OF THE FINAL TABLE OBTAINED IS INVERSED
 |       5)DEFAULT INCLUDE (DFL_CLT_INC_EXU_IN = 1), MEANS RUN EXCLUSION LOGIC
 |       DEFAULT EXCLUDE (DFL_CLT_INC_EXU_IN = 0), MEANS RUN INCLUSION LOGIC
 +-------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------------------------
 | CHECK IF ATLEAST A ROW EXISTS FOR THE PROGRAM_ID-TASK_ID COMBINATION IN TPGMTASK_QL_RUL.
 | 1)	IF NO ROW EXISTS, USE THE DEFAULT INCLUDE/EXCLUDE SPECIFIED IN TPROGRAMTASK TABLE
 | 2)	IF EVEN A SINGLE ROW EXISTS, IGNORE THE DEFAULT INCLUDE/EXCLUDE SPECIFIED IN TPROGRAMTASK
 | 		AND USE THE CLT_SETUP_DEF_CD SPECIFIED IN TPGMTASK_QL_RUL AT CLIENT LEVEL AND APPLY
 | 		THE CLIENT SPECIFIC RULE ONLY FOR THOSE CLIENTS IN TPGMTASK_QL_RUL TABLE
 |      PROCESS WILL RUN FOR DEFAULT EXCLUDE, BUT IF IT IS DEFAULT INCLUDE IT WILL INVERSE
 |      THE OUTPUT
 +------------------------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
		CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
		SELECT ROWS_EXIST_QL_RUL
		INTO :ROWS_EXIST_QL_RUL
		FROM CONNECTION TO DB2 
		(
		SELECT  COUNT(*) AS ROWS_EXIST_QL_RUL
		FROM &HERCULES..TPGMTASK_QL_RUL A
		WHERE A.PROGRAM_ID = &PROGRAM_ID. 
	   	  AND A.TASK_ID = &TASK_ID.
		  AND CURRENT DATE BETWEEN A.EFFECTIVE_DT AND A.EXPIRATION_DT
   		);
		DISCONNECT FROM DB2;
	QUIT;
	%PUT NOTE: &ROWS_EXIST_QL_RUL;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------------------------
 | IF NO ROW EXISTS IN TPGMTASK_QL_RUL
 +------------------------------------------------------------------------------------------SASDOC;

	%IF &ROWS_EXIST_QL_RUL = 0 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | SETTING UP MACRO VARIABLE CLIENT_ID_CONDITION, WHICH CAN BE USED BY 
 | THE PROCESS CALLING RESOLVE_CLIENT.SAS
 | NOTE: REFERENCE TO MACRO VARIABLE CLIENT_CONDITION, IS OBTAINED 
 | FROM RESOLVE_CLIENT.SAS 
 +-------------------------------------------------------------------------SASDOC;

		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

			%LET RESOLVE_CLIENT_IDS = %STR();

		%END;
		%ELSE %IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;

			PROC SQL NOPRINT;
	        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
	        	SELECT CLIENT_ID INTO :RESOLVE_CLIENT_IDS SEPARATED BY ' , '
	            FROM CONNECTION TO DB2
	   			(
				SELECT DISTINCT AA.CLIENT_ID
				FROM  &CLAIMSA..TCLIENT1 AA
				INNER JOIN
	        		  (SELECT AAA.CLIENT_ID, AAA.CLT_PLAN_GROUP_ID
	                   FROM &CLAIMSA..TCPGRP_CLT_PLN_GR1 AAA
					       ,&CLAIMSA..TRPTDT_RPT_GRP_DTL BBB
					   WHERE AAA.CLT_PLAN_GROUP_ID=BBB.CLT_PLAN_GROUP_ID) A
				ON A.CLIENT_ID = AA.CLIENT_ID
				WHERE DISCONTINUE_POS_IN = 0 OR
					  DISCONTINUE_PCS_IN = 0 OR
					  DISCONTINUE_MOR_IN = 0
				);
				DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%IF &RESOLVE_CLIENT_IDS. NE	%THEN  
			%LET CLIENT_ID_CONDITION = %STR(AND CLIENT_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.)); 
		%ELSE  
			%LET CLIENT_ID_CONDITION = ; 

		%PUT NOTE: RESOLVE_CLIENT_IDS=&RESOLVE_CLIENT_IDS;
		%PUT NOTE: CLIENT_ID_CONDITION = &CLIENT_ID_CONDITION;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 0, RUN THE INCLUSION / EXCLUSION LOGIC
 | TO OBATIN CPGIDs 
 +-------------------------------------------------------------------------SASDOC;
 
		%IF &NO_OUTPUT_TABLES_IN.= 1 %THEN 
			%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE &TBL_NAME_OUT WITH THE LIST OF CLIENT_IDs AND CPGs
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
			CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
			EXECUTE 
			(
			CREATE TABLE &TBL_NAME_OUT. AS
			(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
			 FROM &HERCULES..TINIT_CLIENT_RULE RL,
				  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
			 DEFINITION ONLY NOT LOGGED INITIALLY
			)BY DB2;

			EXECUTE
			(
			ALTER TABLE &TBL_NAME_OUT. ACTIVATE NOT LOGGED INITIALLY 
			) BY DB2;
			DISCONNECT FROM DB2;
		QUIT;

		%IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;

			PROC SQL NOPRINT;
	        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
	        	EXECUTE
	   			(
				INSERT INTO &TBL_NAME_OUT. (CLIENT_ID, CLT_PLAN_GROUP_ID)
				SELECT DISTINCT AA.CLIENT_ID, A.CLT_PLAN_GROUP_ID
				FROM  &CLAIMSA..TCLIENT1 AA
				INNER JOIN
	        		  (SELECT AAA.CLIENT_ID, AAA.CLT_PLAN_GROUP_ID
	                   FROM &CLAIMSA..TCPGRP_CLT_PLN_GR1 AAA
					       ,&CLAIMSA..TRPTDT_RPT_GRP_DTL BBB
					   WHERE AAA.CLT_PLAN_GROUP_ID=BBB.CLT_PLAN_GROUP_ID) A
				ON A.CLIENT_ID = AA.CLIENT_ID
				WHERE DISCONTINUE_POS_IN = 0 OR
					  DISCONTINUE_PCS_IN = 0 OR
					  DISCONTINUE_MOR_IN = 0
				ORDER BY AA.CLIENT_ID, A.CLT_PLAN_GROUP_ID
				) BY DB2;
				DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

		%END;

 		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG = 1;

	%END;

%*SASDOC -----------------------------------------------------------------------------------------
 | IF ROW EXISTS IN TPGMTASK_QL_RUL
 +------------------------------------------------------------------------------------------SASDOC;

	%ELSE %IF &ROWS_EXIST_QL_RUL >= 1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | CREATE A DATASET CPG_HIERARCHIES WITH FULL CPG LIST ALONG WITH CLT_SETUP_DEF_CD THAT IS 
 | SPECIFIED IN TPGMTASK_QL_RUL.
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
			CREATE TABLE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS
        	SELECT * FROM CONNECTION TO DB2
   			(
			SELECT DISTINCT AA.CLIENT_ID, BB.CLT_PLAN_GROUP_ID,
         		   BB.PLAN_CD, BB.PLAN_EXTENSION_CD,
		 		   BB.GROUP_CD, BB.GROUP_EXTENSION_CD,
		 		   BB.BLG_REPORTING_CD, BB.GROUP_CLASS_CD, 
				   BB.SEQUENCE_NB, ' ' AS PLAN_NM, C.CLT_SETUP_DEF_CD
			FROM  &CLAIMSA..TCLIENT1 AA
			INNER JOIN
        		  (SELECT A.*, B.GROUP_CLASS_CD, B.SEQUENCE_NB
                   FROM &CLAIMSA..TCPGRP_CLT_PLN_GR1 A
				       ,&CLAIMSA..TRPTDT_RPT_GRP_DTL B
				   WHERE A.CLT_PLAN_GROUP_ID=B.CLT_PLAN_GROUP_ID) BB
			ON BB.CLIENT_ID = AA.CLIENT_ID
			INNER JOIN
				  &HERCULES..TPGMTASK_QL_RUL C
			ON AA.CLIENT_ID = C.CLIENT_ID AND 
			   C.PROGRAM_ID = &PROGRAM_ID. AND
			   C.TASK_ID = &TASK_ID. AND
			   CURRENT DATE BETWEEN C.EFFECTIVE_DT AND C.EXPIRATION_DT
			WHERE DISCONTINUE_POS_IN = 0 OR
				  DISCONTINUE_PCS_IN = 0 OR
				  DISCONTINUE_MOR_IN = 0
			ORDER BY AA.CLIENT_ID, BB.CLT_PLAN_GROUP_ID
			);
			DISCONNECT FROM DB2;
		QUIT;

   TITLE1 "CLINET IDs FOR &INITIATIVE_ID. ";
   PROC SQL;
      SELECT DISTINCT(CLIENT_ID)
      FROM DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID.
      ;
   QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | DATASET PLAN_NM FROM CLAIMSA.TPBW_TEMP_CNVRT TABLE FILTERED BASED ON THE
 | RULES PROVIDED IN HERCULES.TPGMTASK_QL_RUL
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
	        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
			CREATE TABLE PLAN_NM AS
	        SELECT * FROM CONNECTION TO DB2
	   		(
		 	SELECT 	BENEFACTOR_CLT_ID AS CLIENT_ID,
		        	PCL_PBT_ID, 
		        	MOR_PBT_ID, 
		        	POS_PBT_ID, 					
					UPPER(LTRIM(RTRIM(PB_LISTING_NM))) AS PLAN_NM
		 	FROM 	&CLAIMSA..TPBW_TEMP_CNVRT A,
		      		(SELECT CLIENT_ID, PLAN_NM 
					FROM &HERCULES..TPGMTASK_QL_RUL RL
					WHERE RL.PROGRAM_ID = &PROGRAM_ID.
					  AND RL.TASK_ID = &TASK_ID.
					  AND CURRENT DATE BETWEEN RL.EFFECTIVE_DT AND RL.EXPIRATION_DT
				  	  AND (PLAN_NM IS NOT NULL OR PLAN_NM <> ' ') ) B
		 	WHERE 	A.BENEFACTOR_CLT_ID = B.CLIENT_ID AND
		       		UPPER(LTRIM(RTRIM(A.PB_LISTING_NM))) =  UPPER(LTRIM(RTRIM(B.PLAN_NM))) 
			ORDER BY CLIENT_ID, PLAN_NM
	  		);
	    	DISCONNECT FROM DB2;

			SELECT COUNT(*) INTO :PLNMCNT
			FROM PLAN_NM;

		QUIT;

		%SET_ERROR_FL;

		%IF &PLNMCNT >= 1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | TRANSPOSE COLUMNS PCL_PBT_ID, MOR_PBT_ID, POS_PBT_ID IN DATASET PLAN_NM AND
 | STORE IT AS PB_ID
 +-------------------------------------------------------------------------SASDOC;

			DATA TEMP1 (KEEP=CLIENT_ID PCL_PBT_ID PLAN_NM RENAME=(PCL_PBT_ID=PB_ID))
			     TEMP2 (KEEP=CLIENT_ID MOR_PBT_ID PLAN_NM RENAME=(MOR_PBT_ID=PB_ID))
			     TEMP3 (KEEP=CLIENT_ID POS_PBT_ID PLAN_NM RENAME=(POS_PBT_ID=PB_ID));
			 SET PLAN_NM;
			RUN;

			PROC SQL;
              CREATE TABLE PLAN_NM AS
			  SELECT *, 'PCL_PBT_ID' AS PBT_TYPE
			  FROM TEMP1
			  UNION
			  SELECT *, 'MOR_PBT_ID' AS PBT_TYPE
			  FROM TEMP2
			  UNION
			  SELECT *, 'POS_PBT_ID' AS PBT_TYPE
			  FROM TEMP3;
			QUIT;

			PROC SORT DATA = PLAN_NM ;
				BY PBT_TYPE;
			RUN;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET PLAN_NM BY REMOVING ROWS BASED ON DELIVERY_SYSTEM_CD EXCLUSIONS 
 | PROVIDED IN HERCULES.TDELIVERY_SYS_EXCL
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE PLAN_NM2 AS
		 SELECT DISTINCT A.CLIENT_ID, A.PLAN_NM, A.PB_ID
		 FROM PLAN_NM A
		 WHERE NOT EXISTS  (SELECT 1
	           				FROM &HERCULES..TDELIVERY_SYS_EXCL B
			   				WHERE INITIATIVE_ID=&INITIATIVE_ID.
	                          AND A.PBT_TYPE = CASE WHEN DELIVERY_SYSTEM_CD = 1 THEN 'PCL_PBT_ID' 
			  			   							WHEN DELIVERY_SYSTEM_CD = 2 THEN 'POS_PBT_ID'
						   							WHEN DELIVERY_SYSTEM_CD = 3 THEN 'MOR_PBT_ID'
					                           END
							);
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET PLAN_NM TO BRING IN CLT_PLAN_GROUP_ID FROM CLAIMSA.TCPG_PB_TRL_HIST
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE PLAN_NM AS
		 SELECT DISTINCT A.CLIENT_ID, A.PLAN_NM, A.PB_ID, B.CLT_PLAN_GROUP_ID
		 FROM PLAN_NM2 A,
		      &CLAIMSA..TCPG_PB_TRL_HIST B
		 WHERE A.PB_ID = B.PB_ID AND
		       TODAY() BETWEEN B.EFF_DT AND B.EXP_DT
         ORDER BY CLIENT_ID, CLT_PLAN_GROUP_ID ;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET CPG_HIERARCHIES TO BRING IN PLAN_NM AS DERIVED ABOVE
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS
		 SELECT A.*, B.PLAN_NM
		 FROM DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. (DROP=PLAN_NM) A
		 LEFT JOIN
		      PLAN_NM B
		 ON A.CLIENT_ID = B.CLIENT_ID AND
		    A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID;
		QUIT;

/*		%RESET_SQL_ERR_CD;*/
/*		%SET_ERROR_FL;*/

		%END;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT INCLUSION: CLT_SETUP_DEF_CD=1.
 | CREATE DATASET CLIENT_CPG_LIST WITH THE CONSTRAINT CLT_SETUP_DEF_CD=1.
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CREATE TABLE DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID. AS
      		SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID, A.CLT_SETUP_DEF_CD
		 	FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
		 	WHERE A.CLT_SETUP_DEF_CD = 1;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RULE_DEF WITH A LIST OF CLIENTID
 | THEIR HIERARCHIES AND SET-UP DEFINITIONS (WHOLE CLIENT, CLIENT WITH EXCLUSIONS,
 | PARTIAL CLIENT INCLUSIONS, FROM TABLES TINIT_CLIENT_RULE & TINIT_CLT_RULE_DEF
 | IN HERCULES SCHEMA, ONLY FOR THE CLIENTS OF INTEREST
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
			CREATE TABLE RULE_DEF AS
        	SELECT * FROM CONNECTION TO DB2
   			(
			SELECT DISTINCT RL.*
        	FROM &HERCULES..TPGMTASK_QL_RUL RL
			WHERE  RL.PROGRAM_ID = &PROGRAM_ID. AND
			   	   RL.TASK_ID = &TASK_ID. AND
			   	   CURRENT DATE BETWEEN RL.EFFECTIVE_DT AND RL.EXPIRATION_DT
			ORDER BY RL.CLIENT_ID
  			);
    		DISCONNECT FROM DB2;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET CPG_INCEXC WITH THE REQUIRED TABLE STRUCTURE.
 | ROWS WILL BE INSERTED INTO THIS TABLE FOR INCLUDES AND EXCLUDES BASED ON HIERARCHY_CONS
 +-------------------------------------------------------------------------SASDOC;

		%LET HIERARCHY_CONS = %STR( AND (RULE.GROUP_CLASS_CD = 0 OR
                 					CPG.GROUP_CLASS_CD = RULE.GROUP_CLASS_CD)
            						AND (RULE.GROUP_CLASS_SEQ_NB = 0 OR
                 					CPG.SEQUENCE_NB = RULE.GROUP_CLASS_SEQ_NB)
            						AND (RULE.BLG_REPORTING_CD = ' ' OR
                 					UPCASE(LEFT(TRIM(RULE.BLG_REPORTING_CD))) = UPCASE(LEFT(TRIM(CPG.BLG_REPORTING_CD))))
            						AND (RULE.PLAN_CD_TX = ' ' OR
                 					UPCASE(LEFT(TRIM(RULE.PLAN_CD_TX))) = UPCASE(LEFT(TRIM(CPG.PLAN_CD))))
            						AND (RULE.PLAN_EXT_CD_TX = ' ' OR
                 					UPCASE(LEFT(TRIM(RULE.PLAN_EXT_CD_TX))) = UPCASE(LEFT(TRIM(CPG.PLAN_EXTENSION_CD))))
            						AND (RULE.GROUP_CD_TX = ' ' OR
                 					UPCASE(LEFT(TRIM(RULE.GROUP_CD_TX))) = UPCASE(LEFT(TRIM(CPG.GROUP_CD))))
            						AND (RULE.GROUP_EXT_CD_TX = ' ' OR 
                 					UPCASE(LEFT(TRIM(RULE.GROUP_EXT_CD_TX))) = UPCASE(LEFT(TRIM(CPG.GROUP_EXTENSION_CD))))
            						AND (RULE.PLAN_NM = ' ' OR 
                 					UPCASE(LEFT(TRIM(RULE.PLAN_NM))) = UPCASE(LEFT(TRIM(CPG.PLAN_NM))))
									);

		PROC SQL NOPRINT;
			CREATE TABLE DATA_RES.CPG_INCEXC_&INITIATIVE_ID.	AS
      		SELECT  CPG.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID, RULE.CLT_SETUP_DEF_CD
			FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS CPG
		     	 ,RULE_DEF RULE
			WHERE CPG.CLIENT_ID = RULE.CLIENT_ID 
		  	  AND CPG.CLT_SETUP_DEF_CD IN (2,3)
		  	&HIERARCHY_CONS. 
			ORDER BY CPG.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 3
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 3
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			INSERT INTO DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.
      		SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID, B.CLT_SETUP_DEF_CD 
		 	FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
		      	 ,DATA_RES.CPG_INCEXC_&INITIATIVE_ID. B
		 	WHERE B.CLT_SETUP_DEF_CD = 3 
		      AND A.CLIENT_ID = B.CLIENT_ID
		   	  AND A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID;
		QUIT;

		%SET_ERROR_FL;

		PROC SORT DATA = DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.; 
			BY CLIENT_ID CLT_PLAN_GROUP_ID;
		RUN;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS AND WHOLE CLIENT EXCLUDE LOGIC.
 | IF FOR A PROGRAM TASK, THERE EXISTS BOTH CLT_SETUP_DEF_CD 2 AND 4, THEN
 | ONLY THE LOGIC FOR CLT_SETUP_DEF_CD = 2 EXECUTES AS IT TAKES CARE OF THE OTHER
 | SCENERIO ALSO.
 | IF EITHER CLT_SETUP_DEF_CD = 2 OR CLT_SETUP_DEF_CD = 4 THEN THE CORRESPONDING
 | LOGIC EXECUTES.
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
			SELECT EXCCOUNT, MAX_DEF_CD
			INTO :EXCCOUNT, :MAX_DEF_CD
        	FROM CONNECTION TO DB2
   			(
			SELECT COUNT(DISTINCT CLT_SETUP_DEF_CD) as EXCCOUNT
			      ,MAX(CLT_SETUP_DEF_CD) AS MAX_DEF_CD
			FROM &HERCULES..TPGMTASK_QL_RUL 
			WHERE PROGRAM_ID = &PROGRAM_ID. 
		      AND TASK_ID = &TASK_ID. 
		  	  AND CURRENT DATE BETWEEN EFFECTIVE_DT AND EXPIRATION_DT
		  	  AND CLT_SETUP_DEF_CD IN (2,4)
  			);
    		DISCONNECT FROM DB2;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 2
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE NOT IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 2, BUT IN CPG_HIERARCHIES WHERE CLT_SETUP_DEF_CD = 2 OR 
 | CLT_SETUP_DEF_CD IS NULL
 +----------------------------------------------------------------------------SASDOC*;
		%IF (&EXCCOUNT = 1 AND &MAX_DEF_CD = 2) OR 
			(&EXCCOUNT = 2 AND &MAX_DEF_CD = 4) 
		%THEN %DO;

/*			PROC SQL NOPRINT;*/
/*				INSERT INTO CLIENT_CPG_LIST*/
/*      			SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID, A.CLT_SETUP_DEF_CD*/
/*		 		FROM  CPG_HIERARCHIES AS A*/
/*         		WHERE (A.CLT_SETUP_DEF_CD = 2 OR A.CLT_SETUP_DEF_CD IS NULL)*/
/*		   	  	  AND NOT EXISTS (SELECT 1*/
/*		                   	  	  FROM CPG_INCEXC B*/
/*                           	      WHERE B.CLT_SETUP_DEF_CD = 2 */
/*								  AND A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID*/
/*						     	  AND A.CLIENT_ID = B.CLIENT_ID*/
/*						     	  );*/
/*			QUIT;*/

			PROC SQL NOPRINT;
				CREATE TABLE DATA_RES.CPG_HIERARCHIES2_&INITIATIVE_ID. AS
      			SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID, A.CLT_SETUP_DEF_CD
		 		FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
                WHERE A.CLT_SETUP_DEF_CD = 2 OR A.CLT_SETUP_DEF_CD IS NULL;
			QUIT;

            PROC SQL;
				CREATE TABLE DATA_RES.CPG_INCEXC2_&INITIATIVE_ID. AS
				SELECT B.CLIENT_ID, B.CLT_PLAN_GROUP_ID
		        FROM DATA_RES.CPG_INCEXC_&INITIATIVE_ID. B
                WHERE B.CLT_SETUP_DEF_CD = 2;
			QUIT;

			DATA DATA_RES.CLIENT_CPG_LIST_TMP_&INITIATIVE_ID.;
				MERGE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID.(WHERE=(CLT_SETUP_DEF_CD = 2 OR CLT_SETUP_DEF_CD IS NULL) IN=A)
				      DATA_RES.CPG_INCEXC_&INITIATIVE_ID.(WHERE=(CLT_SETUP_DEF_CD = 2) IN=B);
			    BY CLIENT_ID CLT_PLAN_GROUP_ID;
                IF A AND NOT B THEN OUTPUT;
            RUN; 

			PROC SQL NOPRINT;
				INSERT INTO DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.
				SELECT CLIENT_ID, CLT_PLAN_GROUP_ID, CLT_SETUP_DEF_CD
				FROM DATA_RES.CLIENT_CPG_LIST_TMP_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%ELSE %IF (&EXCCOUNT = 1 AND &MAX_DEF_CD = 4) 
		%THEN %DO;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 4
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 4
 +----------------------------------------------------------------------------SASDOC*;

			PROC SQL NOPRINT;
				INSERT INTO DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.
      			SELECT  DISTINCT CLIENT_ID, CLT_PLAN_GROUP_ID, CLT_SETUP_DEF_CD
		 		FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. 
		 		WHERE CLT_SETUP_DEF_CD IS NULL; 
			QUIT;

			%SET_ERROR_FL;

		%END;

		PROC SORT DATA = DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID. OUT=DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.; 
			BY CLIENT_ID CLT_PLAN_GROUP_ID;
		RUN;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

			DATA DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.;
				MERGE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. (IN=A)
			      	  DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID. (IN=B);
				BY CLIENT_ID CLT_PLAN_GROUP_ID;
				IF A = 1 AND B = 0 THEN OUTPUT DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.;
			RUN;

			%SET_ERROR_FL;

		%END;

%*SASDOC -----------------------------------------------------------------------
 | GET THE LIST OF CLIENT_IDs AND STORE IT IN MV CLIENT_ID_CONDITION
 +-------------------------------------------------------------------------SASDOC;

		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;
			%LET WHERE_CONS = %STR(WHERE CLT_SETUP_DEF_CD NOT IN (2,3));
		%END;
		%ELSE %IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;
			%LET WHERE_CONS = %STR();
		%END;

		%IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;
		PROC SQL NOPRINT;
			SELECT DISTINCT CLIENT_ID
            INTO :RESOLVE_CLIENT_IDS SEPARATED BY ' , '
			FROM  DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.
        	&WHERE_CONS.;
		QUIT;
		%END;
		%ELSE %DO;
		PROC SQL NOPRINT;
			SELECT DISTINCT CLIENT_ID
            INTO :RESOLVE_CLIENT_IDS SEPARATED BY ' , '
			FROM  DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.
        	&WHERE_CONS.;
		QUIT;
		%END;

		%SET_ERROR_FL;

		%IF &RESOLVE_CLIENT_IDS NE %THEN %DO;
			%LET CLIENT_ID_CONDITION = %STR(AND CLIENT_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.)); 
			%LET CLIENT_ID_CONDITION2 = %STR(AND A.CLIENT_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.)); 
		%END;
		%ELSE %DO;
		    %LET CLIENT_ID_CONDITION =;
		    %LET CLIENT_ID_CONDITION2 =;
		%END;

		%PUT NOTE: RESOLVE_CLIENT_IDS=&RESOLVE_CLIENT_IDS;
		%PUT NOTE: CLIENT_ID_CONDITION = &CLIENT_ID_CONDITION;


		%IF &NO_OUTPUT_TABLES_IN.= 1 %THEN 
			%GOTO EXIT;
%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE &TBL_NAME_OUT. WITH DATASET CLIENT_CPG_LIST2
 +----------------------------------------------------------------------------SASDOC*;
  
/*			DATA &TBL_NAME_OUT.(INSERTBUFF=25 DBCOMMIT=5000);*/
/*				SET DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID. (KEEP = CLIENT_ID CLT_PLAN_GROUP_ID );*/
/*			RUN;*/

		%IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;

			PROC SQL;
				CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
				EXECUTE 
				(
				CREATE TABLE &TBL_NAME_OUT. AS
				(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
				 FROM &HERCULES..TINIT_CLIENT_RULE RL,
					  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
				 DEFINITION ONLY NOT LOGGED INITIALLY
				)BY DB2;

				EXECUTE
				(
				ALTER TABLE &TBL_NAME_OUT. ACTIVATE NOT LOGGED INITIALLY 
				) BY DB2;
			DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

			PROC SQL; 
				INSERT INTO &TBL_NAME_OUT.
				(CLIENT_ID, CLT_PLAN_GROUP_ID)
   				SELECT DISTINCT CLIENT_ID, CLT_PLAN_GROUP_ID 
				FROM DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

			PROC SQL; 
				DROP TABLE DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

			PROC SQL;
				CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
				EXECUTE 
				(
				CREATE TABLE &TBL_NAME_OUT. AS
				(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
				 FROM &HERCULES..TINIT_CLIENT_RULE RL,
					  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
				 DEFINITION ONLY NOT LOGGED INITIALLY
				)BY DB2;

				EXECUTE
				(
				ALTER TABLE &TBL_NAME_OUT. ACTIVATE NOT LOGGED INITIALLY 
				) BY DB2;
			DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

			PROC SQL; 
				INSERT INTO &TBL_NAME_OUT.
				(CLIENT_ID, CLT_PLAN_GROUP_ID)
   				SELECT DISTINCT CLIENT_ID, CLT_PLAN_GROUP_ID 
				FROM DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

			PROC SQL; 
				DROP TABLE DATA_PND.CLIENT_CPG_LIST2_&INITIATIVE_ID.;
			QUIT;

			%SET_ERROR_FL;

		%END;

	%LET RESOLVE_CLIENT_TBL_EXIST_FLAG = 1;

	%END;

%END;

%SET_ERROR_FL;
%ON_ERROR( ACTION=ABORT
          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL
          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID
          ,EM_MSG=%STR(A PROBLEM WAS ENCOUNTERED IN THE &MAC_NAME. MACRO PLEASE CHECK THE LOG ASSOCIATED WITH INITIATIVE_ID &INITIATIVE_ID.));

%*SASDOC -----------------------------------------------------------------------
 | INITIATIVE SETUP: TPROGRAM_TASK.DSPLY_CLT_SETUP_CD=2 OR OVRD_CLT_SETUP_IN = 1
 | NOTE: THE SETUP CAN BE SPLIT INTO THREE CATEGORIES
 |       1) WHOLE CLIENT INCLUSION, DEFAULT EXCLUDE IN COMMUNICATION ENGINE 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 1)
 |       2) CLIENT WITH EXCLUSIONS 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 2)
 |       3) PARTIAL CLIENT -INCLUSIONS ONLY 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 3)
 +-------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | CREATE A COMMA SEPARATED MACRO VARIABLE RESOLVE_CLIENT_IDS WITH THE LIST 
 | OF CLIENT_IDs FROM TPGMTASK_QL_RUL BASED ON PROGRAM_ID AND TASK_ID
 +-------------------------------------------------------------------------SASDOC;

	%IF RESOLVE_CLIENT_EXCLUDE_FLAG=1 %THEN 
		%LET STR_CLT_SETUP_DEF_CD=%STR(AND CLT_SETUP_DEF_CD = 1);
	%ELSE
		%LET STR_CLT_SETUP_DEF_CD=;

	PROC SQL NOPRINT;
 		SELECT DISTINCT CLIENT_ID  
 		INTO :RESOLVE_CLIENT_IDS SEPARATED BY ','
  		FROM &HERCULES..TINIT_CLT_RULE_DEF
   		WHERE INITIATIVE_ID=&INITIATIVE_ID
     	&STR_CLT_SETUP_DEF_CD. 
	 	;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | SETTING UP MACRO VARIABLE CLIENT_ID_CONDITION, WHICH CAN BE USED BY 
 | THE PROCESS CALLING RESOLVE_CLIENT.SAS
 | NOTE: REFERENCE TO MACRO VARIABLE CLIENT_CONDITION, IS OBTAINED 
 | FROM RESOLVE_CLIENT.SAS 
 +-------------------------------------------------------------------------SASDOC;

	%IF &RESOLVE_CLIENT_IDS. NE %THEN  
		%LET CLIENT_ID_CONDITION=%STR(AND CLIENT_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.));
	%ELSE  
		%LET CLIENT_ID_CONDITION=; 

	%PUT NOTE: RESOLVE_CLIENT_IDS=&RESOLVE_CLIENT_IDS;
	%PUT NOTE: CLIENT_ID_CONDITION = &CLIENT_ID_CONDITION;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
	%IF &NO_OUTPUT_TABLES_IN.= 1 %THEN 
		%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET CPG_HIERARCHIES WITH A LIST OF CLIENTID
 | ALONG WITH THEIR HIERARCHIES FROM TABLES TCPGRP_CLT_PLN_GR1 & TRPTDT_RPT_GRP_DTL
 | IN CLAIMSA SCHEMA, ONLY FOR THE CLIENTS OF INTEREST
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
		CREATE TABLE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS
        SELECT * FROM CONNECTION TO DB2
   		(
		SELECT DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID,
         				A.PLAN_CD, A.PLAN_EXTENSION_CD,
		 				A.GROUP_CD, A.GROUP_EXTENSION_CD,
		 				A.BLG_REPORTING_CD, B.GROUP_CLASS_CD, 
						B.SEQUENCE_NB, ' ' AS PLAN_NM, C.CLT_SETUP_DEF_CD
        FROM  &CLAIMSA..TCPGRP_CLT_PLN_GR1 A
		INNER JOIN 
              &HERCULES..TINIT_CLT_RULE_DEF C
        ON A.CLIENT_ID = C.CLIENT_ID AND
           C.INITIATIVE_ID=&INITIATIVE_ID.
		INNER JOIN 
			  &CLAIMSA..TRPTDT_RPT_GRP_DTL B
        ON A.CLT_PLAN_GROUP_ID=B.CLT_PLAN_GROUP_ID
		ORDER BY A.CLIENT_ID, A.CLT_PLAN_GROUP_ID
		);
		DISCONNECT FROM DB2;
	QUIT;

	%SET_ERROR_FL;
%*SASDOC -----------------------------------------------------------------------
 | DATASET PLAN_NM FROM CLAIMSA.TPBW_TEMP_CNVRT TABLE FILTERED BASED ON THE
 | RULES PROVIDED IN HERCULES.TINIT_CLIENT_RULE
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
		CREATE TABLE PLAN_NM AS
        SELECT * FROM CONNECTION TO DB2
   		(
	 	SELECT 	BENEFACTOR_CLT_ID AS CLIENT_ID,
	        	PCL_PBT_ID, 
	        	MOR_PBT_ID, 
	        	POS_PBT_ID, 				
				UPPER(LTRIM(RTRIM(PB_LISTING_NM))) AS PLAN_NM
	 	FROM 	&CLAIMSA..TPBW_TEMP_CNVRT A,
	      		(SELECT CLIENT_ID, PLAN_NM 
				FROM &HERCULES..TINIT_CLIENT_RULE RL
				WHERE RL.INITIATIVE_ID=&INITIATIVE_ID.
			  	  AND (PLAN_NM IS NOT NULL OR PLAN_NM <> '') ) B
	 	WHERE 	A.BENEFACTOR_CLT_ID = B.CLIENT_ID AND	       		
				UPPER(LTRIM(RTRIM(A.PB_LISTING_NM))) =  UPPER(LTRIM(RTRIM(B.PLAN_NM)))
		ORDER BY CLIENT_ID, PLAN_NM
  		);
    	DISCONNECT FROM DB2;

		SELECT COUNT(*) INTO :PLNMCNT
		FROM PLAN_NM;

	QUIT;

	%SET_ERROR_FL;

	%IF &PLNMCNT >= 1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | TRANSPOSE COLUMNS PCL_PBT_ID, MOR_PBT_ID, POS_PBT_ID IN DATASET PLAN_NM AND
 | STORE IT AS PB_ID
 +-------------------------------------------------------------------------SASDOC;

			DATA TEMP1 (KEEP=CLIENT_ID PCL_PBT_ID PLAN_NM RENAME=(PCL_PBT_ID=PB_ID))
			     TEMP2 (KEEP=CLIENT_ID MOR_PBT_ID PLAN_NM RENAME=(MOR_PBT_ID=PB_ID))
			     TEMP3 (KEEP=CLIENT_ID POS_PBT_ID PLAN_NM RENAME=(POS_PBT_ID=PB_ID));
			 SET PLAN_NM;
			RUN;

			PROC SQL;
              CREATE TABLE PLAN_NM AS
			  SELECT *, 'PCL_PBT_ID' AS PBT_TYPE
			  FROM TEMP1
			  UNION
			  SELECT *, 'MOR_PBT_ID' AS PBT_TYPE
			  FROM TEMP2
			  UNION
			  SELECT *, 'POS_PBT_ID' AS PBT_TYPE
			  FROM TEMP3;
			QUIT;

			PROC SORT DATA = PLAN_NM;
				BY PBT_TYPE;
			RUN;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET PLAN_NM BY REMOVING ROWS BASED ON DELIVERY_SYSTEM_CD EXCLUSIONS 
 | PROVIDED IN HERCULES.TDELIVERY_SYS_EXCL
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE PLAN_NM2 AS
		 SELECT DISTINCT A.CLIENT_ID, A.PLAN_NM, A.PB_ID
		 FROM PLAN_NM A
		 WHERE NOT EXISTS  (SELECT 1
	           				FROM &HERCULES..TDELIVERY_SYS_EXCL B
			   				WHERE INITIATIVE_ID=&INITIATIVE_ID.
	                          AND A.PBT_TYPE = CASE WHEN DELIVERY_SYSTEM_CD = 1 THEN 'PCL_PBT_ID' 
			  			   							WHEN DELIVERY_SYSTEM_CD = 2 THEN 'POS_PBT_ID'
						   							WHEN DELIVERY_SYSTEM_CD = 3 THEN 'MOR_PBT_ID'
					                           END
							)
         ORDER BY PB_ID;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET PLAN_NM TO BRING IN CLT_PLAN_GROUP_ID FROM CLAIMSA.TCPG_PB_TRL_HIST
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL;
		 CREATE TABLE PLAN_NM AS
		 SELECT DISTINCT A.CLIENT_ID, A.PLAN_NM, A.PB_ID, B.CLT_PLAN_GROUP_ID
		 FROM PLAN_NM2 A,
		      &CLAIMSA..TCPG_PB_TRL_HIST B
		 WHERE A.PB_ID = B.PB_ID AND
		       TODAY() BETWEEN B.EFF_DT AND B.EXP_DT
         ORDER BY CLIENT_ID, CLT_PLAN_GROUP_ID ;
		QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | RECREATE DATASET CPG_HIERARCHIES TO BRING IN PLAN_NM AS DERIVED ABOVE
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL;
	 CREATE TABLE DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS
	 SELECT A.*, B.PLAN_NM
	 FROM DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID.(DROP=PLAN_NM) A
	 LEFT JOIN
	      PLAN_NM B
	 ON A.CLIENT_ID = B.CLIENT_ID AND
	    A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID;
	QUIT;

/*	%RESET_SQL_ERR_CD;*/
/*	%SET_ERROR_FL;*/

	%END;
%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RULE_DEF WITH A LIST OF CLIENTID
 | THEIR HIERARCHIES AND SET-UP DEFINITIONS (WHOLE CLIENT, CLIENT WITH EXCLUSIONS,
 | PARTIAL CLIENT INCLUSIONS, FROM TABLES TINIT_CLIENT_RULE & TINIT_CLT_RULE_DEF
 | IN HERCULES SCHEMA, ONLY FOR THE CLIENTS OF INTEREST
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
        CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
		CREATE TABLE RULE_DEF AS
        SELECT * FROM CONNECTION TO DB2
   		(
		SELECT DISTINCT RL.*, SETUP.CLT_SETUP_DEF_CD
        FROM  &HERCULES..TINIT_CLIENT_RULE RL,
              &HERCULES..TINIT_CLT_RULE_DEF SETUP
		WHERE RL.INITIATIVE_ID=&INITIATIVE_ID. 
          AND RL.INITIATIVE_ID=SETUP.INITIATIVE_ID
          AND RL.CLIENT_ID = SETUP.CLIENT_ID
		ORDER BY RL.CLIENT_ID
  		);
    	DISCONNECT FROM DB2;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT INCLUSION: CLT_SETUP_DEF_CD=1.
 | CREATE DATASET CLIENT_CPG_LIST WITH THE CONSTRAINT CLT_SETUP_DEF_CD=1.
 +----------------------------------------------------------------------------SASDOC*;

	PROC SQL NOPRINT;
		CREATE TABLE DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID. AS
      	SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID
		 FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
		 WHERE A.CLT_SETUP_DEF_CD = 1;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET CPG_INCEXC WITH THE REQUIRED TABLE STRUCTURE.
 | ROWS WILL BE INSERTED INTO THIS TABLE FOR INCLUDES AND EXCLUDES BASED ON HIERARCHY_CONS
 +-------------------------------------------------------------------------SASDOC;

	%LET HIERARCHY_CONS = %STR( AND (RULE.GROUP_CLASS_CD IS NULL OR
                 					CPG.GROUP_CLASS_CD = RULE.GROUP_CLASS_CD)
            					AND (RULE.GROUP_CLASS_SEQ_NB IS NULL OR
                 					CPG.SEQUENCE_NB = RULE.GROUP_CLASS_SEQ_NB)
            					AND (RULE.BLG_REPORTING_CD IS NULL OR
                 					UPCASE(LEFT(TRIM(RULE.BLG_REPORTING_CD))) = UPCASE(LEFT(TRIM(CPG.BLG_REPORTING_CD))))
            					AND (RULE.PLAN_CD_TX IS NULL OR  
                 					UPCASE(LEFT(TRIM(RULE.PLAN_CD_TX))) = UPCASE(LEFT(TRIM(CPG.PLAN_CD))))
            					AND (RULE.PLAN_EXT_CD_TX IS NULL OR
                 					UPCASE(LEFT(TRIM(RULE.PLAN_EXT_CD_TX))) = UPCASE(LEFT(TRIM(CPG.PLAN_EXTENSION_CD))))
            					AND (RULE.GROUP_CD_TX IS NULL OR
                 					UPCASE(LEFT(TRIM(RULE.GROUP_CD_TX))) = UPCASE(LEFT(TRIM(CPG.GROUP_CD))))
            					AND (RULE.GROUP_EXT_CD_TX IS NULL OR 
                 					UPCASE(LEFT(TRIM(RULE.GROUP_EXT_CD_TX))) = UPCASE(LEFT(TRIM(CPG.GROUP_EXTENSION_CD))))
            					AND ((RULE.PLAN_NM IS NULL OR RULE.PLAN_NM = ' ') OR
                 					UPCASE(LEFT(TRIM(RULE.PLAN_NM))) = UPCASE(LEFT(TRIM(CPG.PLAN_NM))))
								);

	PROC SQL NOPRINT;
		CREATE TABLE DATA_RES.CPG_INCEXC_&INITIATIVE_ID.	AS
      	SELECT  CPG.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID, RULE.CLT_SETUP_DEF_CD
		FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS CPG
		     ,RULE_DEF RULE
		WHERE CPG.CLIENT_ID = RULE.CLIENT_ID 
		  AND CPG.CLT_SETUP_DEF_CD IN (2,3)
		  &HIERARCHY_CONS. 
		ORDER BY CPG.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 2
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE NOT IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 2
 +----------------------------------------------------------------------------SASDOC*;

	PROC SQL NOPRINT;
		INSERT INTO DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.
      	SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID
		 FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
         WHERE A.CLT_SETUP_DEF_CD = 2
		   AND NOT EXISTS (SELECT B.CLIENT_ID, B.CLT_PLAN_GROUP_ID
		                   FROM DATA_RES.CPG_INCEXC_&INITIATIVE_ID. B
                           WHERE A.CLIENT_ID = B.CLIENT_ID
						     AND B.CLT_SETUP_DEF_CD = 2
						     AND A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID);
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 3
 | INSERT INTO DATASET CLIENT_CPG_LIST WHERE CPGs ARE IN CPG_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 3
 +----------------------------------------------------------------------------SASDOC*;

	PROC SQL NOPRINT;
		INSERT INTO DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.
      	SELECT  DISTINCT A.CLIENT_ID, A.CLT_PLAN_GROUP_ID
		 FROM  DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID. AS A
		      ,DATA_RES.CPG_INCEXC_&INITIATIVE_ID. B
		 WHERE B.CLT_SETUP_DEF_CD = 3 
		   AND A.CLIENT_ID = B.CLIENT_ID
		   AND A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE CLIENT_CPG_LIST IN &DB2_TMP. WITH DATASET CLIENT_CPG_LIST
 +----------------------------------------------------------------------------SASDOC*;

/*	DATA &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID.(INSERTBUFF=25 DBCOMMIT=5000);*/
/*		SET DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID. (KEEP = CLIENT_ID CLT_PLAN_GROUP_ID );*/
/*	RUN;*/

	PROC SQL;
		CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
		EXECUTE 
		(
		CREATE TABLE &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID. AS
		(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
		 FROM &HERCULES..TINIT_CLIENT_RULE RL,
			  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
		 DEFINITION ONLY NOT LOGGED INITIALLY
		)BY DB2;

		EXECUTE
		(
		ALTER TABLE &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID. ACTIVATE NOT LOGGED INITIALLY 
		) BY DB2;
		DISCONNECT FROM DB2;
	QUIT;

	%SET_ERROR_FL;

	PROC SQL; 
		INSERT INTO &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID.
		(CLIENT_ID, CLT_PLAN_GROUP_ID)
   		SELECT DISTINCT CLIENT_ID, CLT_PLAN_GROUP_ID 
		FROM DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.;
	QUIT;

	%SET_ERROR_FL;

	PROC SQL; 
		DROP TABLE DATA_PND.CLIENT_CPG_LIST_&INITIATIVE_ID.;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------------
 | MERGE WITH CPG HISTORY TABLES TO GET CURRENT CPGs. 
 | NEED TO AWARE THAT WHEN USING THE CURRENT CPGs TO SELECT CLAIMS SOME CLAIMS 
 | WILL BE LEFT WHEN CLAIMS WERE COVERED UNDER OLDER CPGS.
 +------------------------------------------------------------------------------SASDOC*;

	PROC SQL;
		CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
		EXECUTE 
		(
		CREATE TABLE &TBL_NAME_OUT. AS
		(SELECT RL.CLIENT_ID, CPG.CLT_PLAN_GROUP_ID
		 FROM &HERCULES..TINIT_CLIENT_RULE RL,
			  &CLAIMSA..TCPGRP_CLT_PLN_GR1 CPG)
		 DEFINITION ONLY NOT LOGGED INITIALLY
		)BY DB2;

		EXECUTE
		(
		ALTER TABLE &TBL_NAME_OUT. ACTIVATE NOT LOGGED INITIALLY 
		) BY DB2;
		DISCONNECT FROM DB2;
	QUIT;

	PROC SQL;
     	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
     	EXECUTE
     	(
		INSERT INTO &TBL_NAME_OUT. (CLIENT_ID, CLT_PLAN_GROUP_ID)
		SELECT DISTINCT CPG_IN.*
      	FROM &CLAIMSA..TCPGRP_CLT_PLN_GR1 CLT, 
             &DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID. CPG_IN
      	WHERE CPG_IN.CLIENT_ID =CLT.CLIENT_ID
          AND CPG_IN.CLT_PLAN_GROUP_ID=CLT.CLT_PLAN_GROUP_ID
          AND EXISTS
            (SELECT 1
             FROM &CLAIMSA..TCPG_PB_TRL_HIST CPG,
                  &CLAIMSA..TPRESC_BENEFIT PB
             WHERE CLT.CLT_PLAN_GROUP_ID = CPG.CLT_PLAN_GROUP_ID
               AND CPG_IN.CLT_PLAN_GROUP_ID = CPG.CLT_PLAN_GROUP_ID
               AND CPG.PB_ID = PB.PB_ID
               AND CPG.EFF_DT <= CURRENT DATE
               AND CPG.EXP_DT > CURRENT DATE
               AND PB.BEGIN_FILL_DT <= CURRENT DATE
               AND PB.END_FILL_DT > CURRENT DATE
             )
      	)BY DB2;
      	DISCONNECT FROM DB2;
    QUIT;

	%SET_ERROR_FL;

	%RUNSTATS(TBL_NAME=&TBL_NAME_OUT);

	%DROP_DB2_TABLE(TBL_NAME=&DB2_TMP..CLIENT_CPG_LIST_&INITIATIVE_ID.);
   	%NOBS(&TBL_NAME_OUT);

    %IF &NOBS %THEN 
		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG=1;
	%ELSE 
		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG=0;

%END;

%EXIT:;



          *SASDOC -----------------------------------------------------------------------------------------
          | NCW - ADD HERE
          +------------------------------------------------------------------------------------------SASDOC;
			PROC SQL NOPRINT;
	        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
	        	SELECT CLT_PLAN_GROUP_ID INTO :RESOLVE_CLIENT_IDS SEPARATED BY ' , '
	            FROM CONNECTION TO DB2
	   			(
				SELECT DISTINCT CLT_PLAN_GROUP_ID
				FROM  &TBL_NAME_OUT.
				);
				DISCONNECT FROM DB2;
			QUIT;

			%SET_ERROR_FL;

		

		%IF &RESOLVE_CLIENT_IDS. NE	%THEN  
/*			%LET CLIENT_ID_CONDITION = %STR(AND CLT_PLAN_GROUP_ID &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS.)); */
/*			%LET CLIENT_ID_CONDITION = %STR( 	AND CLT_PLAN_GROUP_ID &CLIENT_CONDITION. IN (SELECT CLTA.CLT_PLAN_GROUP_ID FROM &TBL_NAME_OUT. CLTA  ));*/
			%LET CLIENT_ID_CONDITION = %STR( 	AND &RESOLVE_CLIENT_CONDITION. (SELECT 1 FROM &TBL_NAME_OUT. CLTA WHERE A.CLT_PLAN_GROUP_ID = CLTA.CLT_PLAN_GROUP_ID ) );
		%ELSE  
			%LET CLIENT_ID_CONDITION = ; 
/*        options nosource nonotes nosource2 nomprint; */
/*		%PUT NOTE: RESOLVE_CLIENT_IDS=&RESOLVE_CLIENT_IDS;*/
/*		%PUT NOTE: CLIENT_ID_CONDITION = &CLIENT_ID_CONDITION;*/

         *SASDOC -----------------------------------------------------------------------------------------
          | NCW - END HERE
          +------------------------------------------------------------------------------------------SASDOC;



%*SASDOC -----------------------------------------------------------------------------
 | IF TBL_NAME_IN AND TBL_NAME_OUT2 ARE PASSED AS INPUT PARAMETERS, THEN
 | IF &EXECUTE_CONDITION_FLAG.=1 THEN 
 |       POPULATE &TBL_NAME_OUT2. BASED ON &TBL_NAME_IN. AND &TBL_NAME_OUT.
 | ELSE JUST CREATE &TBL_NAME_OUT2. AS AN ALIAS OF &TBL_NAME_IN. 
 +------------------------------------------------------------------------------SASDOC*;


%IF &TBL_NAME_IN. NE AND &TBL_NAME_OUT2. NE AND &ERR_FL=0 %THEN %DO;
	%DROP_DB2_TABLE(TBL_NAME=&TBL_NAME_OUT2.);

 	%IF &EXECUTE_CONDITION_FLAG.=1 %THEN %DO;	

  		PROC SQL;
   			CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);

   			EXECUTE
			(
			CREATE TABLE &TBL_NAME_OUT2.	AS
      		(SELECT  A.*
			 FROM  &TBL_NAME_IN. AS A
      		)DEFINITION ONLY NOT LOGGED INITIALLY
	       	) BY DB2;

   			EXECUTE
	  		(
			ALTER TABLE &TBL_NAME_OUT2. ACTIVATE NOT LOGGED INITIALLY
			) BY DB2;    
   			DISCONNECT FROM DB2;
  		QUIT;

   		%SET_ERROR_FL;

		PROC SQL NOPRINT;
        	CONNECT TO DB2 AS DB2(DSN=&UDBSPRP.);
        	EXECUTE
   			(
			INSERT INTO &TBL_NAME_OUT2.
    	    SELECT A.*
		    FROM &TBL_NAME_IN. A
            LEFT JOIN
		 		 (SELECT *
                  FROM &TBL_NAME_OUT.
                  WHERE CLT_PLAN_GROUP_ID &HIERARCHY_CONDITION. ) B
            ON A.CLT_PLAN_GROUP_ID = B.CLT_PLAN_GROUP_ID
			)BY DB2;
   			DISCONNECT FROM DB2;
  		QUIT;

		%SET_ERROR_FL;
		%RUNSTATS(TBL_NAME=&TBL_NAME_OUT2.);

	%END; /* END OF &EXECUTE_CONDITION_FLAG.=1, TRUE */ 
	%ELSE %DO;
		PROC SQL;
   			CONNECT TO DB2 AS DB2(DSN=&UDBSPRP);
   			EXECUTE
			(CREATE ALIAS &TBL_NAME_OUT2.  
				FOR &TBL_NAME_IN. 
			) BY DB2;
			DISCONNECT FROM DB2;
		QUIT;

		%SET_ERROR_FL;

	%END; /* END OF &EXECUTE_CONDITION_FLAG.=1, FALSE */ 

%END;

%MACRO DROP_SAS_DSN(DSN = );

%IF %SYSFUNC(EXIST(&DSN)) %THEN %DO;
	PROC SQL; 
		DROP TABLE &DSN.;
	QUIT;
%END;

%MEND DROP_SAS_DSN;

%IF &DEBUG_FLAG NE %THEN %DO;
/*%DROP_SAS_DSN(DSN = DATA_RES.CPG_HIERARCHIES_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CLIENT_CPG_LIST_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CPG_INCEXC_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CPG_HIERARCHIES2_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CPG_INCEXC2_&INITIATIVE_ID.);*/
/*%DROP_SAS_DSN(DSN = DATA_RES.CLIENT_CPG_LIST_TMP_&INITIATIVE_ID.);*/
%END;
/*%ON_ERROR( ACTION=ABORT*/
/*          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL*/
/*          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID*/
/*          ,EM_MSG=%STR(A PROBLEM WAS ENCOUNTERED IN THE &MAC_NAME. MACRO PLEASE CHECK THE LOG ASSOCIATED WITH INITIATIVE_ID &INITIATIVE_ID.));*/

%MEND RESOLVE_CLIENT_QLA;

/**HEADER------------------------------------------------------------------------------------
|
| PROGRAM NAME: RESOLVE_CLIENT_RX.SAS
|
| CALL REFERENCE: RESOLVE_CLIENT_RX IS CALLED BY RESOLVE_CLIENT.SAS
|
| PURPOSE:
|       DETERMINING THE ALGN_LVL_GID_KEY, CARRIER_ID AND THEIR HIERARCHIES
|		TO BE INCLUDED OR EXCLUDED IN A MAILING.
|
| INPUT:  
|       MACRO VARIABLES FROM HERCULES_IN.SAS :
|       	INITIATIVE_ID, PROGRAM_ID, TASK_ID, QL_ADJ, RX_ADJ, RE_ADJ,
|			DFL_CLT_INC_EXU_IN, OVRD_CLT_SETUP_IN, DSPLY_CLT_SETUP_CD,
|			TABLE_PREFIX
|		TABLES :
|			PROGRAM-MAINTAINENCE SET-UP
|				HERCULES.TPGMTASK_RXCLM_RUL
|				DSS_CLIN.V_ALGN_LVL_DENORM
|			CLIENT SPECIFIC SET-UP
|				HERCULES.TINIT_CLT_RULE_DEF 
|			    HERCULES.TINIT_RXCLM_CLT_RL 
|				DSS_CLIN.V_ALGN_LVL_DENORM
|
| OUTPUT: 
|       MACRO VARIABLES
|       	RESOLVE_CLIENT_EXCLUDE_FLAG: 
|				0=INCLUDE ALGN_LVL_GID_KEY IN THE &TBL_NAME_OUT IN THE MAILING,
|           	1=EXCLUDE ALGN_LVL_GID_KEY IN THE &TBL_NAME_OUT FROM THE MAILING.
|       	RESOLVE_CLIENT_TBL_EXIST_FLAG_RX:
|           	0 = TABLE &TBL_NAME_OUT DOES NOT EXIST
|           	1 = TABLE &TBL_NAME_OUT HAS BEEN CREATED.
|		TABLE:
|			&TBL_NAME_OUT_RX WITH ALGN_LVL_GID_KEY, CARRIER_ID, ACCOUNT_ID, GROUP_CD
|			&TBL_NAME_OUT_RX2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|
|------------------------------------------------------------------------------------------
| HISTORY: 14APR2008 - SR	- Hercules Version  2.1.01
|							- Hercules Version  2.1.2.01
|------------------------------------------------------------------------------------------
+---------------------------------------------------------------------------------*HEADER*/

%MACRO RESOLVE_CLIENT_RXA;

/*%LET SAMPLE_REC = %STR( AND ROWNUM <= 10000 );*/
%LET SAMPLE_REC = %STR( );

%*SASDOC -------------------------------------------------------------------------
 | SETTING UP EXECUTE_CONDITION_FLAG
 | EXECUTES ONLY WHEN MACRO VARIABLE EXECUTE_CONDITION_FLAG = 1, OTHERWISE EXIT
 +---------------------------------------------------------------------------SASDOC;

%IF &EXECUTE_CONDITION_FLAG. = 0 %THEN %DO;
	%PUT NOTE: MACRO WILL NOT EXECUTE BECAUSE EXECUTE_CONDITION IS FALSE;
	%PUT NOTE: EXECUTE_CONDITION = &EXECUTE_CONDITION; 
%END;
%IF &EXECUTE_CONDITION_FLAG.= 0 %THEN 
	%GOTO EXIT;

%*SASDOC ----------------------------------------------------------------------------------
 | PROCESS SETUP BASED ON DSPLY_CLT_SETUP_CD
 | NOTE: DSPLY_CLT_SETUP_CD = 1 - INITIATIVE SETUP (CLIENT SPECIFIC PROCESS)
 |       DSPLY_CLT_SETUP_CD IN (2,3) - PROGRAM MAINTAINENCE SETUP (BOOK OF BUSINESS PROCESS / PROGRAM SET-UP)
 |       IF (DSPLY_CLT_SETUP_CD > 3 OR DSPLY_CLT_SETUP_CD = 0), EXIT THE PROCESS
 |       IF (DSPLY_CLT_SETUP_CD IN (2,3) AND OVRD_CLT_SETUP_IN = 1), RESET DSPLY_CLT_SETUP_CD =1
 +-----------------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN
    %PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), USE PROGRAM MAINTAINENCE SETUP. ;
%ELSE %IF &DSPLY_CLT_SETUP_CD=1 %THEN
	%PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), USE CLIENT SETUP. ;
%ELSE %DO;
	%PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), EXIT THE PROCESS;
%END;

%IF (&DSPLY_CLT_SETUP_CD = 0 OR &DSPLY_CLT_SETUP_CD > 3) %THEN %DO;
    %LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RX = 0;
	%GOTO EXIT;
%END;

/*%IF ((&DSPLY_CLT_SETUP_CD = 2 OR &DSPLY_CLT_SETUP_CD=3) AND &OVRD_CLT_SETUP_IN=1) %THEN */
/*		%LET DSPLY_CLT_SETUP_CD=1;*/
 
%*SASDOC ----------------------------------------------------------------------------------
 | DROP &TBL_NAME_OUT_RX TABLE THAT ALREADY EXISTS IN THE DATABASE
 +-----------------------------------------------------------------------------------SASDOC;

 %DROP_ORACLE_TABLE(TBL_NAME=&TBL_NAME_OUT_RX); 

%*SASDOC ----------------------------------------------------------------------------------
 | CREATE INITIATIVE AND PROGRAM-MAINTAINENCE DB2 TABLES IN ORACLE
 +-----------------------------------------------------------------------------------SASDOC;

 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TINIT_RXCLM_CLT_RL_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID.);
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RX_LIST_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RULE_DEF_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RX_INCEXC_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RX_LIST2_&INITIATIVE_ID.);


 PROC SQL;

	CREATE TABLE TINIT_CLT_RULE_DEF AS
	SELECT * FROM &HERCULES..TINIT_CLT_RULE_DEF 
	WHERE INITIATIVE_ID = &INITIATIVE_ID;

	CREATE TABLE TINIT_RXCLM_CLT_RL AS
	SELECT * FROM &HERCULES..TINIT_RXCLM_CLT_RL
	WHERE INITIATIVE_ID = &INITIATIVE_ID;

	CREATE TABLE TPGMTASK_RXCLM_RUL AS
	SELECT * FROM &HERCULES..TPGMTASK_RXCLM_RUL
	WHERE PROGRAM_ID = &PROGRAM_ID. 
	AND TASK_ID = &TASK_ID.
	AND TODAY() BETWEEN EFFECTIVE_DT AND EXPIRATION_DT;

 QUIT;

 %SET_ERROR_FL;

 PROC SQL;

	 CREATE TABLE &ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID. AS
	 SELECT * FROM TINIT_CLT_RULE_DEF;

	 CREATE TABLE &ORA_TMP.. TINIT_RXCLM_CLT_RL_&INITIATIVE_ID. AS
	 SELECT * FROM  TINIT_RXCLM_CLT_RL;

	 CREATE TABLE &ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID. AS
	 SELECT * FROM TPGMTASK_RXCLM_RUL;

 QUIT;

 %SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | PROGRAM-MAINTAINENCE SETUP: TPROGRAM_TASK.DSPLY_CLT_SETUP_CD IN (2,3)
 | NOTE: 1)DEFAULT INCLUDE / EXCLUDE IS PASSED AT PROGRAMTASK LEVEL, MEANING 
 |       ALL CLIENTS ASSOCIATED WITH THAT PROGRAM_ID AND TASK_ID WILL HAVE THE 
 |       SAME DEFAULT INCLUDE / EXCLUDE, UNLIKE HERCULES SETUP, IF NO ROWS EXIST
 |       IN TPGMTASK_RXCLM_RUL.
 |       2) IF ROWS EXIST IN TPGMTASK_RXCLM_RUL, THEN THE PROCESS RUNS AS PER
 |       THE RULE SPECIFIED IN CLT_SETUP_DEF_CD IN TPGMTASK_RXCLM_RUL,
 |       AND THE DEFAULT INCLUDE / EXCLUDE SPECIFIED IN PROGRAMTASK IS IGNORED
 |       3) THE OUPUT TABLE CREATED IS BASED ON THE DEFAULT INCLUDE / EXCLUDE 
 |       SPECIFIED AT PROGRAMTASK LEVEL, BECAUSE THE PROCESS THAT CALLS 
 |       RESOLVE_CLIENT HAS BEEN HARD-CODED BASED ON THE INCLUDE / EXCLUDE 
 |       AT PROGRAMTASK LEVEL
 |       4) THE PROCESS FOR PROGRAM MAINTAINENCE SETUP IS CODED TO RUN FOR 
 |       DEFAULT EXCLUDE (MEANING THE FINAL TABLE CREATED HAS THE INCLUDE LIST),
 |       BUT IF THE PROGRAM-TASK BEING RUN IS A DEFAULT INCUDE
 |       THEN THE OUTPUT OF THE FINAL TABLE OBTAINED IS INVERSED
 |       5)DEFAULT INCLUDE (DFL_CLT_INC_EXU_IN = 1), MEANS RUN EXCLUSION LOGIC
 |       DEFAULT EXCLUDE (DFL_CLT_INC_EXU_IN = 0), MEANS RUN INCLUSION LOGIC
 +-------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------------------------
 | CHECK IF ATLEAST A ROW EXISTS FOR THE PROGRAM_ID-TASK_ID COMBINATION IN TPGMTASK_RXCLM_RUL.
 | 1)	IF NO ROW EXISTS, USE THE DEFAULT INCLUDE/EXCLUDE SPECIFIED IN TPROGRAMTASK TABLE
 | 2)	IF EVEN A SINGLE ROW EXISTS, IGNORE THE DEFAULT INCLUDE/EXCLUDE SPECIFIED IN TPROGRAMTASK
 | 		AND USE THE CLT_SETUP_DEF_CD SPECIFIED IN TPGMTASK_RXCLM_RUL AT CLIENT LEVEL AND APPLY
 | 		THE CLIENT SPECIFIC RULE ONLY FOR THOSE CLIENTS IN TPGMTASK_RXCLM_RUL TABLE
 |      PROCESS WILL RUN FOR DEFAULT EXCLUDE, BUT IF IT IS DEFAULT INCLUDE IT WILL INVERSE
 |      THE OUTPUT
 +------------------------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
		SELECT ROWS_EXIST_RX_RUL
		INTO :ROWS_EXIST_RX_RUL
		FROM CONNECTION TO ORACLE 
		(
		SELECT  COUNT(*) AS ROWS_EXIST_RX_RUL
		FROM &ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID. A
   		);
		DISCONNECT FROM ORACLE;
	QUIT;
	%PUT NOTE: NUMBER OF ROWS IN TPGMTASK_RXCLM_RUL FOR PROGRAM_ID &PROGRAM_ID. - TASKID &TASK_ID. IS &ROWS_EXIST_RX_RUL;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------------------------
 | IF NO ROW EXISTS IN TPGMTASK_RXCLM_RUL
 +------------------------------------------------------------------------------------------SASDOC;

	%IF &ROWS_EXIST_RX_RUL = 0 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
		%IF &NO_OUTPUT_TABLES_IN_RX.= 1 %THEN 
			%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE &TBL_NAME_OUT_RX WITH THE LIST OF ALGN_LVL_GID_KEY AND THEIR HIERARCHIES
 | FROM DSS_CLIN.V_ALGN_LVL_DENORM TABLE IN ORACLE
 +-------------------------------------------------------------------------SASDOC;

			%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

				PROC SQL NOPRINT;
					CONNECT TO ORACLE(PATH=&GOLD );
		  			EXECUTE 
					(
					CREATE TABLE &TBL_NAME_OUT_RX.
					(ALGN_LVL_GID_KEY INT
				     ,CARRIER_ID CHAR(20)
					 ,ACCOUNT_ID CHAR(20)
					,GROUP_CD CHAR(20)
					,QL_CLIENT_ID INT
					,PAYER_ID INT
		        	)
		  			) BY ORACLE;
		    		DISCONNECT FROM ORACLE;
				QUIT;

			%END;

			%ELSE %IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;

				PROC SQL NOPRINT;
					CONNECT TO ORACLE(PATH=&GOLD );
		  			EXECUTE 
					(
					CREATE TABLE &TBL_NAME_OUT_RX.  AS
					SELECT DISTINCT A.ALGN_LVL_GID_KEY
				               	   ,A.EXTNL_LVL_ID1 AS CARRIER_ID
							   	   ,A.EXTNL_LVL_ID2 AS ACCOUNT_ID
							   	   ,A.EXTNL_LVL_ID3 AS GROUP_CD
							   	   ,A.QL_CLNT_ID AS QL_CLIENT_ID
								   ,A.PAYER_ID
		        	FROM  DSS_CLIN.V_ALGN_LVL_DENORM A
					WHERE A.SRC_SYS_CD = 'X'
					  AND SYSDATE BETWEEN A.ALGN_GRP_EFF_DT AND A.ALGN_GRP_END_DT
		  			) BY ORACLE;
		    		DISCONNECT FROM ORACLE;
				QUIT;

				%SET_ERROR_FL;

			%END;


 		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RX = 1;

	%END;

%*SASDOC -----------------------------------------------------------------------------------------
 | IF ROW EXISTS IN TPGMTASK_RX_RUL
 +------------------------------------------------------------------------------------------SASDOC;

	%ELSE %IF &ROWS_EXIST_RX_RUL >= 1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
		%IF &NO_OUTPUT_TABLES_IN_RX.= 1 %THEN 
			%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE A DATASET RX_HIERARCHIES WITH ALGN_LVL_GID_KEY ALONG WITH HIERARCHIES 
 | AND CLT_SETUP_DEF_CD THAT IS SPECIFIED IN TPGMTASK_RXCLM_RUL.
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. AS
			SELECT DISTINCT A.ALGN_LVL_GID_KEY 
		               	   ,A.EXTNL_LVL_ID1 AS CARRIER_ID
					   	   ,A.EXTNL_LVL_ID2 AS ACCOUNT_ID
					   	   ,A.EXTNL_LVL_ID3 AS GROUP_CD
					   	   ,A.QL_CLNT_ID AS QL_CLIENT_ID
						   ,A.PAYER_ID
						   ,B.CLT_SETUP_DEF_CD
        	FROM  (SELECT ALGN_LVL_GID_KEY, EXTNL_LVL_ID1, EXTNL_LVL_ID2, 
                          EXTNL_LVL_ID3, QL_CLNT_ID, PAYER_ID
                   FROM DSS_CLIN.V_ALGN_LVL_DENORM
                   WHERE SRC_SYS_CD = 'X'
			       AND SYSDATE BETWEEN ALGN_GRP_EFF_DT AND ALGN_GRP_END_DT
                   ) A
			LEFT JOIN
                 (SELECT SUBSTR(CARRIER_ID,2) AS CARRIER_ID, CLT_SETUP_DEF_CD
				   FROM &ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID.) B
			ON COALESCE(A.EXTNL_LVL_ID1, ' ') = B.CARRIER_ID
			ORDER BY CARRIER_ID, ACCOUNT_ID, GROUP_CD
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;


		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT INCLUSION: CLT_SETUP_DEF_CD=1.
 | CREATE DATASET RX_LIST WITH THE CONSTRAINT CLT_SETUP_DEF_CD=1.
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &ORA_TMP..RX_LIST_&INITIATIVE_ID. AS
      		SELECT  A.ALGN_LVL_GID_KEY 
		           ,A.CARRIER_ID
				   ,A.ACCOUNT_ID
				   ,A.GROUP_CD
				   ,A.QL_CLIENT_ID
				   ,A.PAYER_ID
		 	FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. A
		 	WHERE A.CLT_SETUP_DEF_CD = 1
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RULE_DEF FROM TPGMTASK_RXCLM_RUL
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &ORA_TMP..RULE_DEF_&INITIATIVE_ID. AS
			SELECT DISTINCT PROGRAM_ID, TASK_ID, 
			SUBSTR(CARRIER_ID,2) AS CARRIER_ID, ACCOUNT_ID, GROUP_CD, CLT_SETUP_DEF_CD
        	FROM &ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID.
			ORDER BY CARRIER_ID, ACCOUNT_ID, GROUP_CD
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RX_INCEXC WITH THE REQUIRED TABLE STRUCTURE.
 | ROWS WILL BE INSERTED INTO THIS TABLE FOR INCLUDES AND EXCLUDES BASED ON HIERARCHY_CONS
 +-------------------------------------------------------------------------SASDOC;
		%LET HIERARCHY_CONS = %STR( 
            					AND (RULE.ACCOUNT_ID = ' ' OR RULE.ACCOUNT_ID = '' OR RULE.ACCOUNT_ID IS NULL OR 
                 					UPPER(LTRIM(RTRIM(RULE.ACCOUNT_ID))) = UPPER(LTRIM(RTRIM(RX.ACCOUNT_ID))))
            					AND (RULE.GROUP_CD = ' ' OR RULE.GROUP_CD = '' OR RULE.GROUP_CD IS NULL OR 
                 					UPPER(LTRIM(RTRIM(RULE.GROUP_CD))) = UPPER(LTRIM(RTRIM(RX.GROUP_CD))))
             			     	  );

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &ORA_TMP..RX_INCEXC_&INITIATIVE_ID.	AS
      		SELECT  RX.ALGN_LVL_GID_KEY, RX.CARRIER_ID, RX.ACCOUNT_ID, RX.GROUP_CD, RULE.CLT_SETUP_DEF_CD
			FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. RX
		     	 ,&ORA_TMP..RULE_DEF_&INITIATIVE_ID. RULE
			WHERE RX.CLT_SETUP_DEF_CD IN (2,3)
              AND UPPER(LTRIM(RTRIM(RULE.CARRIER_ID))) = UPPER(LTRIM(RTRIM(RX.CARRIER_ID)))
		  	&HIERARCHY_CONS. 
			ORDER BY RX.CARRIER_ID, RX.ACCOUNT_ID, RX.GROUP_CD
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | PARTIAL INCLUSION: CLT_SETUP_DEF_CD = 3
 | INSERT INTO DATASET RX_LIST WHERE ALGN_LVL_GID_KEYs ARE IN RX_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 3
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			INSERT INTO &ORA_TMP..RX_LIST_&INITIATIVE_ID.
      		SELECT  A.ALGN_LVL_GID_KEY 
		           ,A.CARRIER_ID
				   ,A.ACCOUNT_ID
				   ,A.GROUP_CD
				   ,A.QL_CLIENT_ID
				   ,A.PAYER_ID
		 	FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID.  A
		      	 ,&ORA_TMP..RX_INCEXC_&INITIATIVE_ID. B
		 	WHERE B.CLT_SETUP_DEF_CD = 3 
		      AND UPPER(LTRIM(RTRIM(A.CARRIER_ID))) = UPPER(LTRIM(RTRIM(B.CARRIER_ID)))
		   	  AND A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS AND WHOLE CLIENT EXCLUDE LOGIC.
 | IF FOR A PROGRAM TASK, THERE EXISTS BOTH CLT_SETUP_DEF_CD 2 AND 4, THEN
 | ONLY THE LOGIC FOR CLT_SETUP_DEF_CD = 2 EXECUTES AS IT TAKES CARE OF THE OTHER
 | SCENERIO ALSO.
 | IF EITHER CLT_SETUP_DEF_CD = 2 OR CLT_SETUP_DEF_CD = 4 THEN THE CORRESPONDING
 | LOGIC EXECUTES.
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
			SELECT EXCCOUNT, MAX_DEF_CD
			INTO :EXCCOUNT, :MAX_DEF_CD
        	FROM CONNECTION TO ORACLE
   			(
			SELECT COUNT(DISTINCT CLT_SETUP_DEF_CD) as EXCCOUNT
			      ,MAX(CLT_SETUP_DEF_CD) AS MAX_DEF_CD
			FROM &ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID. 
			WHERE CLT_SETUP_DEF_CD IN (2,4)
  			);
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD = 2
 | INSERT INTO RX_LIST WHERE ALGN_LVL_GID_KEYs ARE NOT IN RX_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 2, BUT IN RX_HIERARCHIES WHERE CLT_SETUP_DEF_CD = 2 OR 
 | CLT_SETUP_DEF_CD IS NULL
 +----------------------------------------------------------------------------SASDOC*;

		%IF (&EXCCOUNT = 1 AND &MAX_DEF_CD = 2) OR 
			(&EXCCOUNT = 2 AND &MAX_DEF_CD = 4) 
		%THEN %DO;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
  				EXECUTE 
				(
				INSERT INTO &ORA_TMP..RX_LIST_&INITIATIVE_ID.
	      		SELECT  A.ALGN_LVL_GID_KEY 
		           		,A.CARRIER_ID
				   		,A.ACCOUNT_ID
				   		,A.GROUP_CD
				   		,A.QL_CLIENT_ID
						,A.PAYER_ID
		 		FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. A
         		WHERE (A.CLT_SETUP_DEF_CD = 2 OR A.CLT_SETUP_DEF_CD IS NULL)
		   	  	  AND NOT EXISTS (SELECT 1
		                   	  	  FROM &ORA_TMP..RX_INCEXC_&INITIATIVE_ID. B
                           	      WHERE UPPER(LTRIM(RTRIM(A.CARRIER_ID))) = UPPER(LTRIM(RTRIM(B.CARRIER_ID)))
						     	    AND B.CLT_SETUP_DEF_CD = 2
						     	    AND A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY )
  				)BY ORACLE;
    			DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%ELSE %IF (&EXCCOUNT = 1 AND &MAX_DEF_CD = 4) 
		%THEN %DO;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT EXCLUDE: CLT_SETUP_DEF_CD = 4
 | NOTE: THIS QUERY RUNS ONLY WHEN THERE ARE NO ROWS FOR CLT_SETUP_DEF_CD = 2
 |       FOR THE PROGRAM-TASK THE PROCESS IS RUN FOR, BECAUSE IF THERE WERE ROWS
 |       FOR CLT_SETUP_DEF_CD = 2, IT WOULD HAVE ALREADY TAKEN CARE OF ENTIRE CLIENT
 |       EXCLUDE CRITERIA
 | INSERT INTO DATASET RX_LIST ALGN_LVL_GID_KEYs ARE IN RX_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 4
 +----------------------------------------------------------------------------SASDOC*;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
  				EXECUTE 
				(
				INSERT INTO &ORA_TMP..RX_LIST_&INITIATIVE_ID.
      			SELECT  ALGN_LVL_GID_KEY 
		           		,CARRIER_ID
				   		,ACCOUNT_ID
				   		,GROUP_CD
				   		,QL_CLIENT_ID
						,PAYER_ID
		 		FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. 
		 		WHERE CLT_SETUP_DEF_CD IS NULL
  				)BY ORACLE;
    			DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

		%END;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE INDEX RX_LIST_&INITIATIVE_ID. ON &ORA_TMP..RX_LIST_&INITIATIVE_ID. ( ALGN_LVL_GID_KEY, CARRIER_ID )
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE INDEX RX_HIERARCHIES_&INITIATIVE_ID. ON &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. ( ALGN_LVL_GID_KEY, CARRIER_ID )
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
		  		EXECUTE 
				(
				CREATE TABLE &ORA_TMP..RX_LIST2_&INITIATIVE_ID. AS
				SELECT *
				FROM &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. A
				WHERE NOT EXISTS (SELECT 1
								  FROM &ORA_TMP..RX_LIST_&INITIATIVE_ID. B
								  WHERE A.ALGN_LVL_GID_KEY = B.ALGN_LVL_GID_KEY AND
								        A.CARRIER_ID = B.CARRIER_ID)
		  		)BY ORACLE;
		    	DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE &TBL_NAME_OUT_RX. WITH DATASET RX_LIST2
 +----------------------------------------------------------------------------SASDOC*;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
	  			EXECUTE 
				(
				CREATE TABLE &TBL_NAME_OUT_RX. AS
				SELECT ALGN_LVL_GID_KEY 
		           		,CARRIER_ID
				   		,ACCOUNT_ID
				   		,GROUP_CD
				   		,QL_CLIENT_ID
						,PAYER_ID
				FROM &ORA_TMP..RX_LIST2_&INITIATIVE_ID. 
	  			)BY ORACLE;
	    		DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%ELSE %DO;

%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE &TBL_NAME_OUT_RX. WITH DATASET RX_LIST
 +----------------------------------------------------------------------------SASDOC*;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
	  			EXECUTE 
				(
				CREATE TABLE &TBL_NAME_OUT_RX. AS
				SELECT ALGN_LVL_GID_KEY 
		           		,CARRIER_ID
				   		,ACCOUNT_ID
				   		,GROUP_CD
				   		,QL_CLIENT_ID
						,PAYER_ID
				FROM &ORA_TMP..RX_LIST_&INITIATIVE_ID. 
	  			)BY ORACLE;
	    		DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

		%END;

 	%LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RX = 1;

	%END;

%END;

%SET_ERROR_FL;
%ON_ERROR( ACTION=ABORT
          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL
          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID
          ,EM_MSG=%STR(A PROBLEM WAS ENCOUNTERED AT THE &MAC_NAME. MACRO PLEASE CHECK THE LOG ASSOCIATED WITH INITIATIVE_ID &INITIATIVE_ID.));



%*SASDOC -----------------------------------------------------------------------
 | INITIATIVE SETUP: TPROGRAM_TASK.DSPLY_CLT_SETUP_CD=2 OR OVRD_CLT_SETUP_IN = 1
 | NOTE: THE SETUP CAN BE SPLIT INTO THREE CATEGORIES
 |       1) WHOLE CLIENT INCLUSION, DEFAULT EXCLUDE IN COMMUNICATION ENGINE 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 1)
 |       2) CLIENT WITH EXCLUSIONS 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 2)
 |       3) PARTIAL CLIENT -INCLUSIONS ONLY 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 3)
 +-------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
	%IF &NO_OUTPUT_TABLES_IN_RX.= 1 %THEN 
		%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RX_HIERARCHIES WITH A LIST OF CLIENTID
 | ALONG WITH THEIR HIERARCHIES FROM TABLES V_ALGN_LVL_DENORM
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
  		EXECUTE 
		(
		CREATE TABLE &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. AS
 		SELECT DISTINCT C.ALGN_LVL_GID_KEY 
		           		,C.EXTNL_LVL_ID1 AS CARRIER_ID
				   		,C.EXTNL_LVL_ID2 AS ACCOUNT_ID
				   		,C.EXTNL_LVL_ID3 AS GROUP_CD
				   		,C.QL_CLNT_ID AS QL_CLIENT_ID
						,C.PAYER_ID
						,A.CLT_SETUP_DEF_CD
  		FROM &ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID. A
		    ,&ORA_TMP..TINIT_RXCLM_CLT_RL_&INITIATIVE_ID. B
			,DSS_CLIN.V_ALGN_LVL_DENORM C
   		WHERE A.INITIATIVE_ID=&INITIATIVE_ID
		  AND A.INITIATIVE_ID=B.INITIATIVE_ID
		  AND A.CLIENT_ID = B.CLIENT_ID
		  AND C.SRC_SYS_CD = 'X'
		  AND SYSDATE BETWEEN C.ALGN_GRP_EFF_DT AND C.ALGN_GRP_END_DT
          AND UPPER(RTRIM(LTRIM(SUBSTR(B.CARRIER_ID,2)))) = UPPER(RTRIM(LTRIM(C.EXTNL_LVL_ID1)))
		  &SAMPLE_REC.
		ORDER BY C.EXTNL_LVL_ID1, C.EXTNL_LVL_ID2, C.EXTNL_LVL_ID3
  		)BY ORACLE;
    	DISCONNECT FROM ORACLE;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RULE_DEF WITH ALGN_LVL_GID_KEY ALONG WITH HIERARCHIES AND 
 | SET-UP DEFINITIONS (WHOLE CLIENT, CLIENT WITH EXCLUSIONS,
 | PARTIAL CLIENT INCLUSIONS, FROM TABLES TINIT_RXCLM_CLT_RL & TINIT_CLT_RULE_DEF
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
  		EXECUTE 
		(
		CREATE TABLE &ORA_TMP..RULE_DEF_&INITIATIVE_ID. AS
		SELECT DISTINCT SUBSTR(RL.CARRIER_ID,2) AS CARRIER_ID, RL.ACCOUNT_ID, RL.GROUP_CD, SETUP.CLT_SETUP_DEF_CD
        FROM  &ORA_TMP..TINIT_RXCLM_CLT_RL_&INITIATIVE_ID. RL,
              &ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID. SETUP
		WHERE RL.INITIATIVE_ID=&INITIATIVE_ID. 
          AND RL.INITIATIVE_ID=SETUP.INITIATIVE_ID
          AND RL.CLIENT_ID = SETUP.CLIENT_ID
		ORDER BY CARRIER_ID, RL.ACCOUNT_ID, RL.GROUP_CD
  		)BY ORACLE;
    	DISCONNECT FROM ORACLE;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT INCLUSION: CLT_SETUP_DEF_CD=1.
 | CREATE DATASET RX_LIST WITH THE CONSTRAINT CLT_SETUP_DEF_CD=1.
 +----------------------------------------------------------------------------SASDOC*;

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
  		EXECUTE 
		(
		CREATE TABLE &ORA_TMP..RX_LIST_&INITIATIVE_ID. AS
      	SELECT  A.ALGN_LVL_GID_KEY 
		       ,A.CARRIER_ID
			   ,A.ACCOUNT_ID
			   ,A.GROUP_CD
			   ,A.QL_CLIENT_ID
			   ,A.PAYER_ID
		 FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. A
		 WHERE A.CLT_SETUP_DEF_CD = 1
  		)BY ORACLE;
    	DISCONNECT FROM ORACLE;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RX_INCEXC WITH THE REQUIRED TABLE STRUCTURE.
 | ROWS WILL BE INSERTED INTO THIS TABLE FOR INCLUDES AND EXCLUDES BASED ON HIERARCHY_CONS
 +-------------------------------------------------------------------------SASDOC;

	%LET HIERARCHY_CONS = %STR( 
            					AND (RULE.ACCOUNT_ID IS NULL OR RULE.ACCOUNT_ID = ' ' OR 
                 					UPPER(LTRIM(RTRIM(RULE.ACCOUNT_ID))) = UPPER(LTRIM(RTRIM(RX.ACCOUNT_ID))))
            					AND (RULE.GROUP_CD IS NULL OR RULE.GROUP_CD = ' ' OR 
                 					UPPER(LTRIM(RTRIM(RULE.GROUP_CD))) = UPPER(LTRIM(RTRIM(RX.GROUP_CD))))
             			      );

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
  		EXECUTE 
		(
		CREATE TABLE &ORA_TMP..RX_INCEXC_&INITIATIVE_ID.	AS
     	SELECT  RX.ALGN_LVL_GID_KEY, RX.CARRIER_ID, RX.ACCOUNT_ID, RX.GROUP_CD, RULE.CLT_SETUP_DEF_CD
		FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. RX
	     	 ,&ORA_TMP..RULE_DEF_&INITIATIVE_ID. RULE
		WHERE RX.CLT_SETUP_DEF_CD IN (2,3)
          AND UPPER(LTRIM(RTRIM(RULE.CARRIER_ID))) = UPPER(LTRIM(RTRIM(RX.CARRIER_ID)))
	      &HIERARCHY_CONS. 
		ORDER BY RX.CARRIER_ID, RX.ACCOUNT_ID, RX.GROUP_CD
  		)BY ORACLE;
    	DISCONNECT FROM ORACLE;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 2
 | INSERT INTO DATASET RX_LIST WHERE ALGN_LVL_GID_KEY ARE NOT IN RX_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 2
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
	  		EXECUTE 
			(
			INSERT INTO &ORA_TMP..RX_LIST_&INITIATIVE_ID.
      		SELECT  A.ALGN_LVL_GID_KEY 
		           ,A.CARRIER_ID
				   ,A.ACCOUNT_ID
				   ,A.GROUP_CD
				   ,A.QL_CLIENT_ID
				   ,A.PAYER_ID
		 	FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. A
         	WHERE A.CLT_SETUP_DEF_CD = 2
		   	  AND NOT EXISTS (SELECT 1
		                   	  FROM &ORA_TMP..RX_INCEXC_&INITIATIVE_ID. B
                           	  WHERE UPPER(LTRIM(RTRIM(A.CARRIER_ID))) = UPPER(LTRIM(RTRIM(B.CARRIER_ID)))
						     	AND B.CLT_SETUP_DEF_CD = 2
						     	AND A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY )
	  		)BY ORACLE;
	    	DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 3
 | INSERT INTO DATASET RX_LIST WHERE ALGN_LVL_GID_KEYs ARE IN RX_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 3
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
	  		EXECUTE 
			(
			INSERT INTO &ORA_TMP..RX_LIST_&INITIATIVE_ID.
      		SELECT  A.ALGN_LVL_GID_KEY 
		           ,A.CARRIER_ID
				   ,A.ACCOUNT_ID
				   ,A.GROUP_CD
				   ,A.QL_CLIENT_ID
				   ,A.PAYER_ID
		 	FROM  &ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID. A
		      	 ,&ORA_TMP..RX_INCEXC_&INITIATIVE_ID. B
		 	WHERE B.CLT_SETUP_DEF_CD = 3 
		      AND UPPER(LTRIM(RTRIM(A.CARRIER_ID))) = UPPER(LTRIM(RTRIM(B.CARRIER_ID)))
		   	  AND A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY
	  		)BY ORACLE;
	    	DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE &TBL_NAME_OUT_RX. WITH DATASET RX_LIST
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &TBL_NAME_OUT_RX. AS
			SELECT ALGN_LVL_GID_KEY 
	           		,CARRIER_ID
			   		,ACCOUNT_ID
			   		,GROUP_CD
			   		,QL_CLIENT_ID
					,PAYER_ID
			FROM &ORA_TMP..RX_LIST_&INITIATIVE_ID. 
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

   	%NOBS(&TBL_NAME_OUT_RX.);

    %IF &NOBS %THEN 
		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RX=1;
	%ELSE 
		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RX=0;

%END;

%EXIT:;


          *SASDOC -----------------------------------------------------------------------------------------
          | NCW - ADD HERE
          +------------------------------------------------------------------------------------------SASDOC;

			    PROC SQL NOPRINT;
	        	CONNECT TO ORACLE(PATH=&GOLD );
	        	SELECT ALGN_LVL_GID_KEY INTO :RESOLVE_CLIENT_IDS_RX SEPARATED BY ' , '
	            FROM CONNECTION TO ORACLE
	   			(				
					SELECT DISTINCT ALGN_LVL_GID_KEY
		        	FROM  &TBL_NAME_OUT_RX.
				);
				DISCONNECT FROM ORACLE;
			    QUIT;


		%IF &RESOLVE_CLIENT_IDS_RX. NE	%THEN  
/*			%LET LVL_GID_CONDITION_RX = %STR(AND ALGN_LVL_GID_KEY &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS_RX.)); */
		    %LET LVL_GID_CONDITION_RX = %STR( 	AND &RESOLVE_CLIENT_CONDITION. (SELECT 1 FROM &TBL_NAME_OUT_RX. CLTA  WHERE A.ALGN_LVL_GID_KEY = CLTA.ALGN_LVL_GID_KEY ) );                       		
		%ELSE  
			%LET LVL_GID_CONDITION_RX = ; 

		%PUT NOTE: RESOLVE_CLIENT_IDS_RX=&RESOLVE_CLIENT_IDS_RX;
		%PUT NOTE: LVL_GID_CONDITION_RX=&LVL_GID_CONDITION_RX;
         *SASDOC -----------------------------------------------------------------------------------------
          | NCW - END HERE
          +------------------------------------------------------------------------------------------SASDOC;

%IF &DEBUG_FLAG NE  %THEN %DO;
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TINIT_RXCLM_CLT_RL_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TPGMTASK_RXCLM_RUL_&INITIATIVE_ID.);*/
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RX_HIERARCHIES_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RX_LIST_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RULE_DEF_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RX_INCEXC_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RX_LIST2_&INITIATIVE_ID.);*/
%END;

%*SASDOC -----------------------------------------------------------------------------
 | IF TBL_NAME_IN_RX AND TBL_NAME_OUT_RX2 ARE PASSED AS INPUT PARAMETERS, THEN
 | IF &EXECUTE_CONDITION_FLAG.=1 THEN 
 |       POPULATE &TBL_NAME_OUT_RX2. BASED ON &TBL_NAME_IN_RX. AND &TBL_NAME_OUT_RX.
 | ELSE JUST CREATE &TBL_NAME_OUT_RX2. AS AN ALIAS OF &TBL_NAME_IN_RX. 
 +------------------------------------------------------------------------------SASDOC*;


%IF &TBL_NAME_IN_RX. NE AND &TBL_NAME_OUT_RX2. NE AND &ERR_FL=0 %THEN %DO;
	%DROP_ORACLE_TABLE(TBL_NAME=&TBL_NAME_OUT_RX2.);

 	%IF &EXECUTE_CONDITION_FLAG.=1 %THEN %DO;	

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
			CREATE TABLE &TBL_NAME_OUT_RX2. AS
        	SELECT * FROM CONNECTION TO ORACLE
   			(
    	    SELECT A.*
		    FROM &TBL_NAME_IN_RX. A
            LEFT JOIN
		 		 (SELECT *
				  FROM &TBL_NAME_OUT_RX.
				  WHERE ALGN_LVL_GID_KEY  &HIERARCHY_CONDITION.) B
            ON A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY 
			);
   			DISCONNECT FROM ORACLE;
  		QUIT;

		%SET_ERROR_FL;

	%END; /* END OF &EXECUTE_CONDITION_FLAG.=1, TRUE */ 
	%ELSE %DO;
		PROC SQL;
			CONNECT TO ORACLE(PATH=&GOLD );
   			EXECUTE
			(
			CREATE SYNONYM &TBL_NAME_OUT_RX2.  
			FOR &TBL_NAME_IN_RX. 
			) BY ORACLE;
			DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

	%END; /* END OF &EXECUTE_CONDITION_FLAG.=1, FALSE */ 

%END;

%ON_ERROR( ACTION=ABORT
          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL
          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID
          ,EM_MSG=%STR(A PROBLEM WAS ENCOUNTERED IN THE &MAC_NAME. MACRO PLEASE CHECK THE LOG ASSOCIATED WITH INITIATIVE_ID &INITIATIVE_ID.));

%MEND RESOLVE_CLIENT_RXA;

/**HEADER------------------------------------------------------------------------------------
|
| PROGRAM NAME: RESOLVE_CLIENT_RE.SAS
|
| CALL REFERENCE: RESOLVE_CLIENT_RE.SAS IS CALLED BY RESOLVE_CLIENT.SAS
|
| PURPOSE:
|       DETERMINING THE ALGN_LVL_GID_KEY, INSURANCE_CD AND THEIR HIERARCHIES
|		TO BE INCLUDED OR EXCLUDED IN A MAILING.
|
| INPUT:  
|       MACRO VARIABLES FROM HERCULES_IN.SAS :
|       	INITIATIVE_ID, PROGRAM_ID, TASK_ID, QL_ADJ, RX_ADJ, RE_ADJ,
|			DFL_CLT_INC_EXU_IN, OVRD_CLT_SETUP_IN, DSPLY_CLT_SETUP_CD,
|			TABLE_PREFIX
|		TABLES :
|			PROGRAM-MAINTAINENCE SET-UP
|				HERCULES.TPGMTASK_RECAP_RUL
|				DSS_CLIN.V_ALGN_LVL_DENORM
|			CLIENT SPECIFIC SET-UP
|				HERCULES.TINIT_CLT_RULE_DEF 
|			    HERCULES.TINIT_RECAP_CLT_RL 
|				DSS_CLIN.V_ALGN_LVL_DENORM
|
| OUTPUT: 
|       MACRO VARIABLES
|       	RESOLVE_CLIENT_EXCLUDE_FLAG: 
|				0=INCLUDE ALGN_LVL_GID_KEY IN THE &TBL_NAME_OUT IN THE MAILING,
|           	1=EXCLUDE ALGN_LVL_GID_KEY IN THE &TBL_NAME_OUT FROM THE MAILING.
|       	RESOLVE_CLIENT_TBL_EXIST_FLAG_RE:
|           	0 = TABLE &TBL_NAME_OUT DOES NOT EXIST
|           	1 = TABLE &TBL_NAME_OUT HAS BEEN CREATED.
|		TABLE:
|			&TBL_NAME_OUT_RE WITH ALGN_LVL_GID_KEY, INSURANCE_CD, CARRIER_ID, GROUP_CD
|			&TBL_NAME_OUT_RE2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|
|------------------------------------------------------------------------------------------
| HISTORY: 14APR2008 - SR	- Hercules Version  2.1.01
							- Hercules Version  2.1.2.01
|------------------------------------------------------------------------------------------
+---------------------------------------------------------------------------------*HEADER*/

%MACRO RESOLVE_CLIENT_REA;

/*%LET SAMPLE_REC = %STR( AND ROWNUM <= 10000 );*/
%LET SAMPLE_REC = %STR( );

%*SASDOC -------------------------------------------------------------------------
 | SETTING UP EXECUTE_CONDITION_FLAG
 | EXECUTES ONLY WHEN MACRO VARIABLE EXECUTE_CONDITION_FLAG = 1, OTHERWISE EXIT
 +---------------------------------------------------------------------------SASDOC;

%IF &EXECUTE_CONDITION_FLAG. = 0 %THEN %DO;
	%PUT NOTE: MACRO WILL NOT EXECUTE BECAUSE EXECUTE_CONDITION IS FALSE;
	%PUT NOTE: EXECUTE_CONDITION = &EXECUTE_CONDITION; 
%END;
%IF &EXECUTE_CONDITION_FLAG.= 0 %THEN 
	%GOTO EXIT;

%*SASDOC ----------------------------------------------------------------------------------
 | PROCESS SETUP BASED ON DSPLY_CLT_SETUP_CD
 | NOTE: DSPLY_CLT_SETUP_CD = 1 - INITIATIVE SETUP (CLIENT SPECIFIC PROCESS)
 |       DSPLY_CLT_SETUP_CD IN (2,3) - PROGRAM MAINTAINENCE SETUP (BOOK OF BUSINESS PROCESS / PROGRAM SET-UP)
 |       IF (DSPLY_CLT_SETUP_CD > 3 OR DSPLY_CLT_SETUP_CD = 0), EXIT THE PROCESS
 |       IF (DSPLY_CLT_SETUP_CD IN (2,3) AND OVRD_CLT_SETUP_IN = 1), RESET DSPLY_CLT_SETUP_CD =1
 +-----------------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN
    %PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), USE PROGRAM MAINTAINENCE SETUP. ;
%ELSE %IF &DSPLY_CLT_SETUP_CD=1 %THEN
	%PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), USE CLIENT SETUP. ;
%ELSE %DO;
	%PUT NOTE: CLIENT-DISPLAY-SETUP-CODE=%CMPRES(&DSPLY_CLT_SETUP_CD), EXIT THE PROCESS;
%END;

%IF (&DSPLY_CLT_SETUP_CD = 0 OR &DSPLY_CLT_SETUP_CD > 3) %THEN %DO;
    %LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RE = 0;
	%GOTO EXIT;
%END;

/*%IF ((&DSPLY_CLT_SETUP_CD = 2 OR &DSPLY_CLT_SETUP_CD=3) AND &OVRD_CLT_SETUP_IN=1) %THEN */
/*		%LET DSPLY_CLT_SETUP_CD=1;*/
 
%*SASDOC ----------------------------------------------------------------------------------
 | DROP &TBL_NAME_OUT_RX TABLE THAT ALREADY EXISTS IN THE DATABASE
 +-----------------------------------------------------------------------------------SASDOC;

 %DROP_ORACLE_TABLE(TBL_NAME=&TBL_NAME_OUT_RE); 

%*SASDOC ----------------------------------------------------------------------------------
 | CREATE INITIATIVE AND PROGRAM-MAINTAINENCE DB2 TABLES IN ORACLE
 +-----------------------------------------------------------------------------------SASDOC;

 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TINIT_RECAP_CLT_RL_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TPGMTASK_RECAP_RUL_&INITIATIVE_ID.);
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RE_LIST_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RULE_DEF_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RE_INCEXC_&INITIATIVE_ID.); 
 %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RE_LIST2_&INITIATIVE_ID.);

 PROC SQL;

	CREATE TABLE TINIT_CLT_RULE_DEF AS
	SELECT * FROM &HERCULES..TINIT_CLT_RULE_DEF 
	WHERE INITIATIVE_ID = &INITIATIVE_ID;

	CREATE TABLE TINIT_RECAP_CLT_RL AS
	SELECT * FROM &HERCULES..TINIT_RECAP_CLT_RL
	WHERE INITIATIVE_ID = &INITIATIVE_ID;

	CREATE TABLE TPGMTASK_RECAP_RUL AS
	SELECT * FROM &HERCULES..TPGMTASK_RECAP_RUL
	WHERE PROGRAM_ID = &PROGRAM_ID. 
	AND TASK_ID = &TASK_ID.
	AND TODAY() BETWEEN EFFECTIVE_DT AND EXPIRATION_DT;

 QUIT;

 %SET_ERROR_FL;

 PROC SQL;

	 CREATE TABLE &ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID. AS
	 SELECT * FROM TINIT_CLT_RULE_DEF;

	 CREATE TABLE &ORA_TMP.. TINIT_RECAP_CLT_RL_&INITIATIVE_ID. AS
	 SELECT * FROM  TINIT_RECAP_CLT_RL;

	 CREATE TABLE &ORA_TMP..TPGMTASK_RECAP_RUL_&INITIATIVE_ID. AS
	 SELECT * FROM TPGMTASK_RECAP_RUL;

 QUIT;

 %SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | PROGRAM-MAINTAINENCE SETUP: TPROGRAM_TASK.DSPLY_CLT_SETUP_CD IN (2,3)
 | NOTE: 1)DEFAULT INCLUDE / EXCLUDE IS PASSED AT PROGRAMTASK LEVEL, MEANING 
 |       ALL CLIENTS ASSOCIATED WITH THAT PROGRAM_ID AND TASK_ID WILL HAVE THE 
 |       SAME DEFAULT INCLUDE / EXCLUDE, UNLIKE HERCULES SETUP, IF NO ROWS EXIST
 |       IN TPGMTASK_RECAP_RUL.
 |       2) IF ROWS EXIST IN TPGMTASK_RECAP_RUL, THEN THE PROCESS RUNS AS PER
 |       THE RULE SPECIFIED IN CLT_SETUP_DEF_CD IN TPGMTASK_RECAP_RUL,
 |       AND THE DEFAULT INCLUDE / EXCLUDE SPECIFIED IN PROGRAMTASK IS IGNORED
 |       3) THE OUPUT TABLE CREATED IS BASED ON THE DEFAULT INCLUDE / EXCLUDE 
 |       SPECIFIED AT PROGRAMTASK LEVEL, BECAUSE THE PROCESS THAT CALLS 
 |       RESOLVE_CLIENT HAS BEEN HARD-CODED BASED ON THE INCLUDE / EXCLUDE 
 |       AT PROGRAMTASK LEVEL
 |       4) THE PROCESS FOR PROGRAM MAINTAINENCE SETUP IS CODED TO RUN FOR 
 |       DEFAULT EXCLUDE (MEANING THE FINAL TABLE CREATED HAS THE INCLUDE LIST),
 |       BUT IF THE PROGRAM-TASK BEING RUN IS A DEFAULT INCUDE
 |       THEN THE OUTPUT OF THE FINAL TABLE OBTAINED IS INVERSED
 |       5)DEFAULT INCLUDE (DFL_CLT_INC_EXU_IN = 1), MEANS RUN EXCLUSION LOGIC
 |       DEFAULT EXCLUDE (DFL_CLT_INC_EXU_IN = 0), MEANS RUN INCLUSION LOGIC
 +-------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=2 OR &DSPLY_CLT_SETUP_CD=3 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------------------------
 | CHECK IF ATLEAST A ROW EXISTS FOR THE PROGRAM_ID-TASK_ID COMBINATION IN TPGMTASK_RECAP_RUL.
 | 1)	IF NO ROW EXISTS, USE THE DEFAULT INCLUDE/EXCLUDE SPECIFIED IN TPROGRAMTASK TABLE
 | 2)	IF EVEN A SINGLE ROW EXISTS, IGNORE THE DEFAULT INCLUDE/EXCLUDE SPECIFIED IN TPROGRAMTASK
 | 		AND USE THE CLT_SETUP_DEF_CD SPECIFIED IN TPGMTASK_RECAP_RUL AT CLIENT LEVEL AND APPLY
 | 		THE CLIENT SPECIFIC RULE ONLY FOR THOSE CLIENTS IN TPGMTASK_RECAP_RUL TABLE
 |      PROCESS WILL RUN FOR DEFAULT EXCLUDE, BUT IF IT IS DEFAULT INCLUDE IT WILL INVERSE
 |      THE OUTPUT
 +------------------------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
		SELECT ROWS_EXIST_RE_RUL
		INTO :ROWS_EXIST_RE_RUL
		FROM CONNECTION TO ORACLE 
		(
		SELECT  COUNT(*) AS ROWS_EXIST_RE_RUL
		FROM &ORA_TMP..TPGMTASK_RECAP_RUL_&INITIATIVE_ID. A
   		);
		DISCONNECT FROM ORACLE;
	QUIT;
	%PUT NOTE: NUMBER OF ROWS IN TPGMTASK_RECAP_RUL FOR PROGRAM_ID &PROGRAM_ID. - TASKID &TASK_ID. IS &ROWS_EXIST_RE_RUL;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------------------------
 | IF NO ROW EXISTS IN TPGMTASK_RECAP_RUL
 +------------------------------------------------------------------------------------------SASDOC;

	%IF &ROWS_EXIST_RE_RUL = 0 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
		%IF &NO_OUTPUT_TABLES_IN_RE.= 1 %THEN 
			%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE &TBL_NAME_OUT_RE WITH THE LIST OF ALGN_LVL_GID_KEY AND THEIR HIERARCHIES
 | FROM DSS_CLIN.V_ALGN_LVL_DENORM TABLE IN ORACLE
 +-------------------------------------------------------------------------SASDOC;

			%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

				PROC SQL NOPRINT;
					CONNECT TO ORACLE(PATH=&GOLD );
		  			EXECUTE 
					(
					CREATE TABLE &TBL_NAME_OUT_RE.
					(ALGN_LVL_GID_KEY INT
				     ,INSURANCE_CD CHAR(20)
				     ,CARRIER_ID CHAR(20)
					,GROUP_CD CHAR(20)
					,QL_CLIENT_ID INT
					,PAYER_ID INT
		        	)
		  			) BY ORACLE;
		    		DISCONNECT FROM ORACLE;
				QUIT;

			%END;

			%ELSE %IF &DFL_CLT_INC_EXU_IN. = 0 %THEN %DO;

				PROC SQL NOPRINT;
					CONNECT TO ORACLE(PATH=&GOLD );
		  			EXECUTE 
					(
					CREATE TABLE &TBL_NAME_OUT_RE.  AS
					SELECT DISTINCT A.ALGN_LVL_GID_KEY
				               	   ,A.RPT_OPT1_CD AS INSURANCE_CD
							   	   ,A.EXTNL_LVL_ID1 AS CARRIER_ID
							   	   ,A.EXTNL_LVL_ID3 AS GROUP_CD
							   	   ,A.QL_CLNT_ID AS QL_CLIENT_ID
								   ,A.PAYER_ID
		        	FROM  DSS_CLIN.V_ALGN_LVL_DENORM A
					WHERE A.SRC_SYS_CD = 'R'
					  AND SYSDATE BETWEEN A.ALGN_GRP_EFF_DT AND A.ALGN_GRP_END_DT
		  			) BY ORACLE;
		    		DISCONNECT FROM ORACLE;
				QUIT;

				%SET_ERROR_FL;

			%END;


 		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RE = 1;

	%END;

%*SASDOC -----------------------------------------------------------------------------------------
 | IF ROW EXISTS IN TPGMTASK_RE_RUL
 +------------------------------------------------------------------------------------------SASDOC;

	%ELSE %IF &ROWS_EXIST_RE_RUL >= 1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
		%IF &NO_OUTPUT_TABLES_IN_RE.= 1 %THEN 
			%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE A DATASET RE_HIERARCHIES WITH ALGN_LVL_GID_KEY ALONG WITH HIERARCHIES 
 | AND CLT_SETUP_DEF_CD THAT IS SPECIFIED IN TPGMTASK_RECAP_RUL.
 +-------------------------------------------------------------------------SASDOC;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. AS
			SELECT DISTINCT A.ALGN_LVL_GID_KEY 
		               	   ,A.RPT_OPT1_CD AS INSURANCE_CD
					   	   ,A.EXTNL_LVL_ID1 AS CARRIER_ID
					   	   ,A.EXTNL_LVL_ID3 AS GROUP_CD
					   	   ,A.QL_CLNT_ID AS QL_CLIENT_ID
						   ,A.PAYER_ID
						   ,B.CLT_SETUP_DEF_CD
        	FROM  (SELECT ALGN_LVL_GID_KEY, RPT_OPT1_CD, EXTNL_LVL_ID1,  
                          EXTNL_LVL_ID3, QL_CLNT_ID, PAYER_ID
                   FROM DSS_CLIN.V_ALGN_LVL_DENORM
                   WHERE SRC_SYS_CD = 'R'
			       AND SYSDATE BETWEEN ALGN_GRP_EFF_DT AND ALGN_GRP_END_DT
                   ) A
			LEFT JOIN
                  (SELECT INSURANCE_CD, CLT_SETUP_DEF_CD
				   FROM &ORA_TMP..TPGMTASK_RECAP_RUL_&INITIATIVE_ID.) B
			ON COALESCE(A.RPT_OPT1_CD, ' ') = B.INSURANCE_CD
			ORDER BY INSURANCE_CD, CARRIER_ID, GROUP_CD
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT INCLUSION: CLT_SETUP_DEF_CD=1.
 | CREATE DATASET RE_LIST WITH THE CONSTRAINT CLT_SETUP_DEF_CD=1.
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &ORA_TMP..RE_LIST_&INITIATIVE_ID. AS
      		SELECT  A.ALGN_LVL_GID_KEY 
		           ,A.INSURANCE_CD
				   ,A.CARRIER_ID
				   ,A.GROUP_CD
				   ,A.QL_CLIENT_ID
				   ,A.PAYER_ID
		 	FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. A
		 	WHERE A.CLT_SETUP_DEF_CD = 1
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RULE_DEF FROM TPGMTASK_RECAP_RUL
 +-------------------------------------------------------------------------SASDOC;


		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &ORA_TMP..RULE_DEF_&INITIATIVE_ID. AS
			SELECT DISTINCT PROGRAM_ID, TASK_ID, 
			INSURANCE_CD, SUBSTR(CARRIER_ID,2) AS CARRIER_ID, GROUP_CD, CLT_SETUP_DEF_CD
        	FROM &ORA_TMP..TPGMTASK_RECAP_RUL_&INITIATIVE_ID.
			ORDER BY INSURANCE_CD, CARRIER_ID, GROUP_CD
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RE_INCEXC WITH THE REQUIRED TABLE STRUCTURE.
 | ROWS WILL BE INSERTED INTO THIS TABLE FOR INCLUDES AND EXCLUDES BASED ON HIERARCHY_CONS
 +-------------------------------------------------------------------------SASDOC;
		%LET HIERARCHY_CONS = %STR( 
            					AND (RULE.CARRIER_ID = ' ' OR RULE.CARRIER_ID IS NULL OR
                 					UPPER(LTRIM(RTRIM(RULE.CARRIER_ID))) = UPPER(LTRIM(RTRIM(RE.CARRIER_ID))))
            					AND (RULE.GROUP_CD = ' ' OR RULE.GROUP_CD IS NULL OR
                 					UPPER(LTRIM(RTRIM(RULE.GROUP_CD))) = UPPER(LTRIM(RTRIM(RE.GROUP_CD))))
             			     	  );


		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &ORA_TMP..RE_INCEXC_&INITIATIVE_ID.	AS
      		SELECT  RE.ALGN_LVL_GID_KEY, RE.INSURANCE_CD, RE.CARRIER_ID, RE.GROUP_CD, RULE.CLT_SETUP_DEF_CD
			FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. RE
		     	 ,&ORA_TMP..RULE_DEF_&INITIATIVE_ID. RULE
			WHERE RE.CLT_SETUP_DEF_CD IN (2,3)
              AND UPPER(LTRIM(RTRIM(RULE.INSURANCE_CD))) = UPPER(LTRIM(RTRIM(RE.INSURANCE_CD)))
		  	&HIERARCHY_CONS. 
			ORDER BY RE.INSURANCE_CD, RE.CARRIER_ID, RE.GROUP_CD
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | PARTIAL INCLUSION: CLT_SETUP_DEF_CD = 3
 | INSERT INTO DATASET RE_LIST WHERE ALGN_LVL_GID_KEYs ARE IN RE_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 3
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			INSERT INTO &ORA_TMP..RE_LIST_&INITIATIVE_ID.
      		SELECT  A.ALGN_LVL_GID_KEY 
		           ,A.INSURANCE_CD
				   ,A.CARRIER_ID
				   ,A.GROUP_CD
				   ,A.QL_CLIENT_ID
				   ,A.PAYER_ID
		 	FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID.  A
		      	 ,&ORA_TMP..RE_INCEXC_&INITIATIVE_ID. B
		 	WHERE B.CLT_SETUP_DEF_CD = 3 
		      AND UPPER(LTRIM(RTRIM(A.INSURANCE_CD))) = UPPER(LTRIM(RTRIM(B.INSURANCE_CD)))
		   	  AND A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS AND WHOLE CLIENT EXCLUDE LOGIC.
 | IF FOR A PROGRAM TASK, THERE EXISTS BOTH CLT_SETUP_DEF_CD 2 AND 4, THEN
 | ONLY THE LOGIC FOR CLT_SETUP_DEF_CD = 2 EXECUTES AS IT TAKES CARE OF THE OTHER
 | SCENERIO ALSO.
 | IF EITHER CLT_SETUP_DEF_CD = 2 OR CLT_SETUP_DEF_CD = 4 THEN THE CORRESPONDING
 | LOGIC EXECUTES.
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
			SELECT EXCCOUNT, MAX_DEF_CD
			INTO :EXCCOUNT, :MAX_DEF_CD
        	FROM CONNECTION TO ORACLE
   			(
			SELECT COUNT(DISTINCT CLT_SETUP_DEF_CD) as EXCCOUNT
			      ,MAX(CLT_SETUP_DEF_CD) AS MAX_DEF_CD
			FROM &ORA_TMP..TPGMTASK_RECAP_RUL_&INITIATIVE_ID. 
			WHERE CLT_SETUP_DEF_CD IN (2,4)
  			);
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD = 2
 | INSERT INTO RE_LIST WHERE ALGN_LVL_GID_KEYs ARE NOT IN RE_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 2, BUT IN RE_HIERARCHIES WHERE CLT_SETUP_DEF_CD = 2 OR 
 | CLT_SETUP_DEF_CD IS NULL
 +----------------------------------------------------------------------------SASDOC*;

		%IF (&EXCCOUNT = 1 AND &MAX_DEF_CD = 2) OR 
			(&EXCCOUNT = 2 AND &MAX_DEF_CD = 4) 
		%THEN %DO;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
  				EXECUTE 
				(
				INSERT INTO &ORA_TMP..RE_LIST_&INITIATIVE_ID.
	      		SELECT  A.ALGN_LVL_GID_KEY 
		           		,A.INSURANCE_CD
				   		,A.CARRIER_ID
				   		,A.GROUP_CD
				   		,A.QL_CLIENT_ID
						,A.PAYER_ID
		 		FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. A
         		WHERE (A.CLT_SETUP_DEF_CD = 2 OR A.CLT_SETUP_DEF_CD IS NULL)
		   	  	  AND NOT EXISTS (SELECT 1
		                   	  	  FROM &ORA_TMP..RE_INCEXC_&INITIATIVE_ID. B
                           	      WHERE UPPER(LTRIM(RTRIM(A.INSURANCE_CD))) = UPPER(LTRIM(RTRIM(B.INSURANCE_CD)))
						     	    AND B.CLT_SETUP_DEF_CD = 2
						     	    AND A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY )
  				)BY ORACLE;
    			DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%ELSE %IF (&EXCCOUNT = 1 AND &MAX_DEF_CD = 4) 
		%THEN %DO;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT EXCLUDE: CLT_SETUP_DEF_CD = 4
 | NOTE: THIS QUERY RUNS ONLY WHEN THERE ARE NO ROWS FOR CLT_SETUP_DEF_CD = 2
 |       FOR THE PROGRAM-TASK THE PROCESS IS RUN FOR, BECAUSE IF THERE WERE ROWS
 |       FOR CLT_SETUP_DEF_CD = 2, IT WOULD HAVE ALREADY TAKEN CARE OF ENTIRE CLIENT
 |       EXCLUDE CRITERIA
 | INSERT INTO DATASET RE_LIST ALGN_LVL_GID_KEYs ARE IN RE_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 4
 +----------------------------------------------------------------------------SASDOC*;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
  				EXECUTE 
				(
				INSERT INTO &ORA_TMP..RE_LIST_&INITIATIVE_ID.
      			SELECT  ALGN_LVL_GID_KEY 
		           		,INSURANCE_CD
				   		,CARRIER_ID
				   		,GROUP_CD
				   		,QL_CLIENT_ID
						,PAYER_ID
		 		FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. 
		 		WHERE CLT_SETUP_DEF_CD IS NULL
  				)BY ORACLE;
    			DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

		%END;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE INDEX RE_LIST_&INITIATIVE_ID. ON &ORA_TMP..RE_LIST_&INITIATIVE_ID. ( ALGN_LVL_GID_KEY, INSURANCE_CD )
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE INDEX RE_HIERARCHIES_&INITIATIVE_ID. ON &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. ( ALGN_LVL_GID_KEY, INSURANCE_CD )
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

		%IF &DFL_CLT_INC_EXU_IN. = 1 %THEN %DO;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
		  		EXECUTE 
				(
				CREATE TABLE &ORA_TMP..RE_LIST2_&INITIATIVE_ID. AS
				SELECT *
				FROM &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. A
				WHERE NOT EXISTS (SELECT 1
								  FROM &ORA_TMP..RE_LIST_&INITIATIVE_ID. B
								  WHERE A.ALGN_LVL_GID_KEY = B.ALGN_LVL_GID_KEY AND
								        A.INSURANCE_CD = B.INSURANCE_CD)
		  		)BY ORACLE;
		    	DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE &TBL_NAME_OUT_RE. WITH DATASET RE_LIST2
 +----------------------------------------------------------------------------SASDOC*;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
	  			EXECUTE 
				(
				CREATE TABLE &TBL_NAME_OUT_RE. AS
				SELECT ALGN_LVL_GID_KEY 
						,INSURANCE_CD
		           		,CARRIER_ID
				   		,GROUP_CD
				   		,QL_CLIENT_ID
						,PAYER_ID
				FROM &ORA_TMP..RE_LIST2_&INITIATIVE_ID. 
	  			)BY ORACLE;
	    		DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

		%END;

		%ELSE %DO;

%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE &TBL_NAME_OUT_RE. WITH DATASET RE_LIST
 +----------------------------------------------------------------------------SASDOC*;

			PROC SQL NOPRINT;
				CONNECT TO ORACLE(PATH=&GOLD );
	  			EXECUTE 
				(
				CREATE TABLE &TBL_NAME_OUT_RE. AS
				SELECT ALGN_LVL_GID_KEY 
						,INSURANCE_CD
		           		,CARRIER_ID
				   		,GROUP_CD
				   		,QL_CLIENT_ID
						,PAYER_ID
				FROM &ORA_TMP..RE_LIST_&INITIATIVE_ID. 
	  			)BY ORACLE;
	    		DISCONNECT FROM ORACLE;
			QUIT;

			%SET_ERROR_FL;

		%END;

 	%LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RE = 1;

	%END;

%END;

%SET_ERROR_FL;
%ON_ERROR( ACTION=ABORT
          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL
          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID
          ,EM_MSG=%STR(A PROBLEM WAS ENCOUNTERED IN THE &MAC_NAME. MACRO PLEASE CHECK THE LOG ASSOCIATED WITH INITIATIVE_ID &INITIATIVE_ID.));

%*SASDOC -----------------------------------------------------------------------
 | INITIATIVE SETUP: TPROGRAM_TASK.DSPLY_CLT_SETUP_CD=2 OR OVRD_CLT_SETUP_IN = 1
 | NOTE: THE SETUP CAN BE SPLIT INTO THREE CATEGORIES
 |       1) WHOLE CLIENT INCLUSION, DEFAULT EXCLUDE IN COMMUNICATION ENGINE 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 1)
 |       2) CLIENT WITH EXCLUSIONS 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 2)
 |       3) PARTIAL CLIENT -INCLUSIONS ONLY 
 |          (TINIT_CLT_RULE_DEF.CLT_SETUP_DEF_CD = 3)
 +-------------------------------------------------------------------------SASDOC;

%IF &DSPLY_CLT_SETUP_CD=1 %THEN %DO;

%*SASDOC -----------------------------------------------------------------------
 | IF MACRO VARIABLE NO_OUTPUT_TABLES_IN = 1, EXIT THE PROCESS
 +-------------------------------------------------------------------------SASDOC;
 
	%IF &NO_OUTPUT_TABLES_IN_RE.= 1 %THEN 
		%GOTO EXIT;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RE_HIERARCHIES WITH A LIST OF CLIENTID
 | ALONG WITH THEIR HIERARCHIES FROM TABLES V_ALGN_LVL_DENORM
 +-------------------------------------------------------------------------SASDOC;
	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
  		EXECUTE 
		(
		CREATE TABLE &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. AS
 		SELECT  DISTINCT C.ALGN_LVL_GID_KEY 
		           		,C.RPT_OPT1_CD AS INSURANCE_CD
				   		,C.EXTNL_LVL_ID1 AS CARRIER_ID
				   		,C.EXTNL_LVL_ID3 AS GROUP_CD
				   		,C.QL_CLNT_ID AS QL_CLIENT_ID
						,C.PAYER_ID
						,A.CLT_SETUP_DEF_CD
  		FROM &ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID. A
		    ,&ORA_TMP..TINIT_RECAP_CLT_RL_&INITIATIVE_ID. B
			,DSS_CLIN.V_ALGN_LVL_DENORM C
   		WHERE A.INITIATIVE_ID=&INITIATIVE_ID
		  AND A.INITIATIVE_ID=B.INITIATIVE_ID
		  AND A.CLIENT_ID = B.CLIENT_ID
		  AND C.SRC_SYS_CD = 'R'
		  AND SYSDATE BETWEEN C.ALGN_GRP_EFF_DT AND C.ALGN_GRP_END_DT
          AND UPPER(RTRIM(LTRIM(B.INSURANCE_CD))) = UPPER(RTRIM(LTRIM(C.RPT_OPT1_CD)))
		  &SAMPLE_REC.
		ORDER BY C.RPT_OPT1_CD, C.EXTNL_LVL_ID1, C.EXTNL_LVL_ID3

  		)BY ORACLE;
    	DISCONNECT FROM ORACLE;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RULE_DEF WITH ALGN_LVL_GID_KEY ALONG WITH HIERARCHIES AND 
 | SET-UP DEFINITIONS (WHOLE CLIENT, CLIENT WITH EXCLUSIONS,
 | PARTIAL CLIENT INCLUSIONS, FROM TABLES TINIT_RECAP_CLT_RL & TINIT_CLT_RULE_DEF
 +-------------------------------------------------------------------------SASDOC;

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
  		EXECUTE 
		(
		CREATE TABLE &ORA_TMP..RULE_DEF_&INITIATIVE_ID. AS
		SELECT DISTINCT RL.INSURANCE_CD, SUBSTR(RL.CARRIER_ID,2) AS CARRIER_ID,
                        RL.GROUP_CD, SETUP.CLT_SETUP_DEF_CD
        FROM  &ORA_TMP..TINIT_RECAP_CLT_RL_&INITIATIVE_ID. RL,
              &ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID. SETUP
		WHERE RL.INITIATIVE_ID=&INITIATIVE_ID. 
          AND RL.INITIATIVE_ID=SETUP.INITIATIVE_ID
          AND RL.CLIENT_ID = SETUP.CLIENT_ID
		ORDER BY RL.INSURANCE_CD, SUBSTR(RL.CARRIER_ID,2), RL.GROUP_CD
  		)BY ORACLE;
    	DISCONNECT FROM ORACLE;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | WHOLE CLIENT INCLUSION: CLT_SETUP_DEF_CD=1.
 | CREATE DATASET RE_LIST WITH THE CONSTRAINT CLT_SETUP_DEF_CD=1.
 +----------------------------------------------------------------------------SASDOC*;

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
  		EXECUTE 
		(
		CREATE TABLE &ORA_TMP..RE_LIST_&INITIATIVE_ID. AS
      	SELECT  A.ALGN_LVL_GID_KEY 
		       ,A.INSURANCE_CD
			   ,A.CARRIER_ID
			   ,A.GROUP_CD
			   ,A.QL_CLIENT_ID
			   ,A.PAYER_ID
		 FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. A
		 WHERE A.CLT_SETUP_DEF_CD = 1
  		)BY ORACLE;
    	DISCONNECT FROM ORACLE;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC -----------------------------------------------------------------------
 | CREATE DATASET RE_INCEXC WITH THE REQUIRED TABLE STRUCTURE.
 | ROWS WILL BE INSERTED INTO THIS TABLE FOR INCLUDES AND EXCLUDES BASED ON HIERARCHY_CONS
 +-------------------------------------------------------------------------SASDOC;

	%LET HIERARCHY_CONS = %STR( 
            					AND (RULE.CARRIER_ID IS NULL OR RULE.CARRIER_ID = ' ' OR 
                 					UPPER(LTRIM(RTRIM(RULE.CARRIER_ID))) = UPPER(LTRIM(RTRIM(RE.CARRIER_ID))))
            					AND (RULE.GROUP_CD IS NULL OR RULE.GROUP_CD = ' ' OR 
                 					UPPER(LTRIM(RTRIM(RULE.GROUP_CD))) = UPPER(LTRIM(RTRIM(RE.GROUP_CD))))
             			      );

	PROC SQL NOPRINT;
		CONNECT TO ORACLE(PATH=&GOLD );
  		EXECUTE 
		(
		CREATE TABLE &ORA_TMP..RE_INCEXC_&INITIATIVE_ID.	AS
     	SELECT  RE.ALGN_LVL_GID_KEY, RE.INSURANCE_CD, RE.CARRIER_ID, RE.GROUP_CD, RULE.CLT_SETUP_DEF_CD
		FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. RE
	     	 ,&ORA_TMP..RULE_DEF_&INITIATIVE_ID. RULE
		WHERE RE.CLT_SETUP_DEF_CD IN (2,3)
          AND UPPER(LTRIM(RTRIM(RULE.INSURANCE_CD))) = UPPER(LTRIM(RTRIM(RE.INSURANCE_CD)))
	      &HIERARCHY_CONS. 
		ORDER BY RE.INSURANCE_CD, RE.CARRIER_ID, RE.GROUP_CD
  		)BY ORACLE;
    	DISCONNECT FROM ORACLE;
	QUIT;

	%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 2
 | INSERT INTO DATASET RE_LIST WHERE ALGN_LVL_GID_KEY ARE NOT IN RE_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 2
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
	  		EXECUTE 
			(
			INSERT INTO &ORA_TMP..RE_LIST_&INITIATIVE_ID.
      		SELECT  A.ALGN_LVL_GID_KEY 
		           ,A.INSURANCE_CD
				   ,A.CARRIER_ID
				   ,A.GROUP_CD
				   ,A.QL_CLIENT_ID
				   ,A.PAYER_ID
		 	FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. A
         	WHERE A.CLT_SETUP_DEF_CD = 2
		   	  AND NOT EXISTS (SELECT 1
		                   	  FROM &ORA_TMP..RE_INCEXC_&INITIATIVE_ID. B
                           	  WHERE UPPER(LTRIM(RTRIM(A.INSURANCE_CD))) = UPPER(LTRIM(RTRIM(B.INSURANCE_CD)))
						     	AND B.CLT_SETUP_DEF_CD = 2
						     	AND A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY )
	  		)BY ORACLE;
	    	DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CLIENT WITH EXCLUSIONS: CLT_SETUP_DEF_CD is 3
 | INSERT INTO DATASET RE_LIST WHERE ALGN_LVL_GID_KEYs ARE IN RE_INCEXC 
 | WITH CLT_SETUP_DEF_CD = 3
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
	  		EXECUTE 
			(
			INSERT INTO &ORA_TMP..RE_LIST_&INITIATIVE_ID.
      		SELECT  A.ALGN_LVL_GID_KEY 
		           ,A.INSURANCE_CD
				   ,A.CARRIER_ID
				   ,A.GROUP_CD
				   ,A.QL_CLIENT_ID
				   ,A.PAYER_ID
		 	FROM  &ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID. A
		      	 ,&ORA_TMP..RE_INCEXC_&INITIATIVE_ID. B
		 	WHERE B.CLT_SETUP_DEF_CD = 3 
		      AND UPPER(LTRIM(RTRIM(A.INSURANCE_CD))) = UPPER(LTRIM(RTRIM(B.INSURANCE_CD)))
		   	  AND A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY
	  		)BY ORACLE;
	    	DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

%*SASDOC ----------------------------------------------------------------------------
 | CREATE TABLE &TBL_NAME_OUT_RE. WITH DATASET RE_LIST
 +----------------------------------------------------------------------------SASDOC*;

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
  			EXECUTE 
			(
			CREATE TABLE &TBL_NAME_OUT_RE. AS
			SELECT ALGN_LVL_GID_KEY 
					,INSURANCE_CD
	           		,CARRIER_ID
			   		,GROUP_CD
			   		,QL_CLIENT_ID
					,PAYER_ID
			FROM &ORA_TMP..RE_LIST_&INITIATIVE_ID. 
  			)BY ORACLE;
    		DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

   	%NOBS(&TBL_NAME_OUT_RE.);

    %IF &NOBS %THEN 
		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RE=1;
	%ELSE 
		%LET RESOLVE_CLIENT_TBL_EXIST_FLAG_RE=0;

%END;

%EXIT:;

          *SASDOC -----------------------------------------------------------------------------------------
          | NCW - ADD HERE
          +------------------------------------------------------------------------------------------SASDOC;

			    PROC SQL NOPRINT;
	        	CONNECT TO ORACLE(PATH=&GOLD );
	        	SELECT ALGN_LVL_GID_KEY INTO :RESOLVE_CLIENT_IDS_RE SEPARATED BY ' , '
	            FROM CONNECTION TO ORACLE
	   			(				
					SELECT DISTINCT ALGN_LVL_GID_KEY
		        	FROM  &TBL_NAME_OUT_RE.
				);
				DISCONNECT FROM ORACLE;
			    QUIT;


		%IF &RESOLVE_CLIENT_IDS_RE. NE	%THEN  
/*			%LET LVL_GID_CONDITION_RE = %STR(AND ALGN_LVL_GID_KEY &CLIENT_CONDITION. IN (&RESOLVE_CLIENT_IDS_RE.)); */
/*			%LET LVL_GID_CONDITION_RE = %STR( AND ALGN_LVL_GID_KEY &CLIENT_CONDITION. IN (SELECT CLTA.ALGN_LVL_GID_KEY FROM &TBL_NAME_OUT_RE. CLTA  ));*/
			%LET LVL_GID_CONDITION_RE = %STR( AND &RESOLVE_CLIENT_CONDITION. (SELECT 1 FROM &TBL_NAME_OUT_RE. CLTA  WHERE A.ALGN_LVL_GID_KEY = CLTA.ALGN_LVL_GID_KEY));			
		%ELSE  
			%LET LVL_GID_CONDITION_RE = ; 

		%PUT NOTE: RESOLVE_CLIENT_IDS_RE=&RESOLVE_CLIENT_IDS_RE;
		%PUT NOTE: LVL_GID_CONDITION_RE = &LVL_GID_CONDITION_RE;
         *SASDOC -----------------------------------------------------------------------------------------
          | NCW - END HERE
          +------------------------------------------------------------------------------------------SASDOC;

/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TINIT_CLT_RULE_DEF_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TINIT_RECAP_CLT_RL_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..TPGMTASK_RECAP_RUL_&INITIATIVE_ID.);*/
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RE_HIERARCHIES_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RE_LIST_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RULE_DEF_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RE_INCEXC_&INITIATIVE_ID.); */
/* %DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..RE_LIST2_&INITIATIVE_ID.);*/


%*SASDOC -----------------------------------------------------------------------------
 | IF TBL_NAME_IN_RE AND TBL_NAME_OUT_RE2 ARE PASSED AS INPUT PARAMETERS, THEN
 | IF &EXECUTE_CONDITION_FLAG.=1 THEN 
 |       POPULATE &TBL_NAME_OUT_RE2. BASED ON &TBL_NAME_IN_RE. AND &TBL_NAME_OUT_RE.
 | ELSE JUST CREATE &TBL_NAME_OUT_RE2. AS AN ALIAS OF &TBL_NAME_IN_RE. 
 +------------------------------------------------------------------------------SASDOC*;


%IF &TBL_NAME_IN_RE. NE AND &TBL_NAME_OUT_RE2. NE AND &ERR_FL=0 %THEN %DO;
	%DROP_ORACLE_TABLE(TBL_NAME=&TBL_NAME_OUT_RE2.);

 	%IF &EXECUTE_CONDITION_FLAG.=1 %THEN %DO;	

		PROC SQL NOPRINT;
			CONNECT TO ORACLE(PATH=&GOLD );
			CREATE TABLE &TBL_NAME_OUT_RE2. AS
        	SELECT * FROM CONNECTION TO ORACLE
   			(
    	    SELECT A.*
		    FROM &TBL_NAME_IN_RE. A
            LEFT JOIN
		 		 (SELECT *
				  FROM &TBL_NAME_OUT_RE.
				  WHERE ALGN_LVL_GID_KEY  &HIERARCHY_CONDITION.) B
            ON A.ALGN_LVL_GID_KEY  = B.ALGN_LVL_GID_KEY 
			);
   			DISCONNECT FROM ORACLE;
  		QUIT;

		%SET_ERROR_FL;

	%END; /* END OF &EXECUTE_CONDITION_FLAG.=1, TRUE */ 
	%ELSE %DO;
		PROC SQL;
			CONNECT TO ORACLE(PATH=&GOLD );
   			EXECUTE
			(
			CREATE SYNONYM &TBL_NAME_OUT_RE2.  
			FOR &TBL_NAME_IN_RE. 
			) BY ORACLE;
			DISCONNECT FROM ORACLE;
		QUIT;

		%SET_ERROR_FL;

	%END; /* END OF &EXECUTE_CONDITION_FLAG.=1, FALSE */ 

%END;

%ON_ERROR( ACTION=ABORT
          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL
          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID
          ,EM_MSG=%STR(A PROBLEM WAS ENCOUNTERED IN THE &MAC_NAME. MACRO PLEASE CHECK THE LOG ASSOCIATED WITH INITIATIVE_ID &INITIATIVE_ID.));

%MEND RESOLVE_CLIENT_REA;




/**HEADER------------------------------------------------------------------------------------
|
| PROGRAM NAME: RESOLVE_CLIENT.SAS
|
| CALL REFERENCE: RESOLVE_CLIENT CALLS
|					1) RESOLVE_CLIENT_QL.SAS
|					2) RESOLVE_CLIENT_RX.SAS
|					2) RESOLVE_CLIENT_RE.SAS
|
| PURPOSE:
|       DETERMINING THE CLIENTS AND THEIR HEIRARCHIES FOR ALL THREE ADJUDICATION ENGINE
|
| INPUT:  
|       MACRO VARIABLES FROM HERCULES_IN.SAS :
|       	INITIATIVE_ID, PROGRAM_ID, TASK_ID, QL_ADJ, RX_ADJ, RE_ADJ,
|			DFL_CLT_INC_EXU_IN, OVRD_CLT_SETUP_IN, DSPLY_CLT_SETUP_CD,
|			TABLE_PREFIX
|		TABLES :
|			PROGRAM-MAINTAINENCE SET-UP
|				HERCULES.TPGMTASK_QL_RUL (QL)
| 				CLAIMSP.TCLIENT_PGM_DLY (QL)
|				CLAIMSA.TCPGRP_CLT_PLN_GR1 (QL)
|				CLAIMSA.TRPTDT_RPT_GRP_DTL (QL) 
|				HERCULES.TPGMTASK_RXCLM_RUL (RX)
|				HERCULES.TPGMTASK_RECAP_RUL (RE)
|				DSS_CMX.V_ALGN_LVL_DENORM (RX/RE)
|			CLIENT SPECIFIC SET-UP
|          		HERCULES.TINIT_CLIENT_RULE (QL/RX/RE)
|          		HERCULES.TINIT_CLT_RULE_DEF (QL/RX/RE)
|				CLAIMSA.TCPGRP_CLT_PLN_GR1 (QL)
|				CLAIMSA.TRPTDT_RPT_GRP_DTL (QL)
|          		CLAIMSA.TCPG_PB_TRL_HIST (QL)
|          		CLAIMSA.TPRESC_BENEFIT (QL)
|			    HERCULES.TINIT_RXCLM_CLT_RL (RX) 
|			    HERCULES.TINIT_RXCLM_CLT_RL (RE) 
|				DSS_CMX.V_ALGN_LVL_DENORM (RX/RE)
|
| OUTPUT: 
|       MACRO VARIABLES
|       	RESOLVE_CLIENT_EXCLUDE_FLAG: 
|				0=INCLUDE CPGs / ALGN_LVL_GID_KEY IN THE &TBL_NAME_OUT IN THE MAILING,
|           	1=EXCLUDE CPGs / ALGN_LVL_GID_KEY IN THE &TBL_NAME_OUT FROM THE MAILING.
|       	RESOLVE_CLIENT_TBL_EXIST_FLAG / RESOLVE_CLIENT_TBL_EXIST_FLAG_RX /
|			RESOLVE_CLIENT_TBL_EXIST_FLAG_RE :
|           	0 = TABLE &TBL_NAME_OUT DOES NOT EXIST
|           	1 = TABLE &TBL_NAME_OUT HAS BEEN CREATED.
|		TABLE:
|			&TBL_NAME_OUT WITH CLIENT_ID AND CLT_PLAN_GROUP_ID
|			&TBL_NAME_OUT2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|			&TBL_NAME_OUT_RX WITH ALGN_LVL_GID_KEY, CARRIER_ID, ACCOUNT_ID, GROUP_CD
|			&TBL_NAME_OUT_RX2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|			&TBL_NAME_OUT_RE WITH ALGN_LVL_GID_KEY, INSURANCE_CD, CARRIER_ID, GROUP_CD
|			&TBL_NAME_OUT_RE2 IF &TBL_NAME_IN IS PASSED AS AN INPUT TABLE
|
|------------------------------------------------------------------------------------------
| HISTORY: SEPT      - JOHN HOU
|          24FEB2006 - BRIAN STROPICH - ADDED THE UPCASE FUNCTION IN THE ASSIGNMENT OF
|                                       THE MACRO VARIABLE SELECT_STR (HEAT 02530529)
|		   14APR2008 - SR Hercules Version  2.1.01
|									  - MODULARIZED RESOLVE_CLIENT TO RUN FOR ALL 
|                                       3 ADJUDICATION ENGINES
|                                     - EXISTING CODE THAT RAN FOR QL ADJUDICATION
|										HAVE BEEN MOVED TO RESOLVE_CLIENT_QL.SAS, WITH
|										CHANGES TO PROGRAM-MAINTAINENCE SETUP AND ALSO 
|										SOME CHANGES IN INITIATIVE SET-UP
|										(REFER RESOLVE_CLIENT_QL.SAS FOR DETAILS)
|------------------------------------------------------------------------------------------
+---------------------------------------------------------------------------------*HEADER*/

%MACRO RESOLVE_CLIENTA(TBL_NAME_IN = ,
                      TBL_NAME_IN_RX = ,
                      TBL_NAME_IN_RE = ,

					  TBL_NAME_OUT = ,
					  TBL_NAME_OUT_RX = ,
					  TBL_NAME_OUT_RE = ,

					  TBL_NAME_OUT2 = ,
					  TBL_NAME_OUT_RX2 = ,
					  TBL_NAME_OUT_RE2 = ,

					  NO_OUTPUT_TABLES_IN = 0 ,
					  NO_OUTPUT_TABLES_IN_RX = 0 ,
					  NO_OUTPUT_TABLES_IN_RE = 0 ,

					  EXECUTE_CONDITION = %STR(1=1)
					 );

%*SASDOC -------------------------------------------------------------------------
 | INITIALIZE THE GLOBAL ERROR FLAG ERR_FL = 0, WHICH IS SET TO 1 BY SET_ERR_FL MACRO
 +---------------------------------------------------------------------------SASDOC;

%LET ERR_FL = 0;

%*SASDOC -------------------------------------------------------------------------
 | MACRO VARIABLES OBTAINED FROM HERCULES_IN.SAS
 +---------------------------------------------------------------------------SASDOC;

%PUT NOTE: INITIATIVE_ID = &INITIATIVE_ID;
%PUT NOTE: QL_ADJ = &QL_ADJ;
%PUT NOTE: RX_ADJ = &RX_ADJ;
%PUT NOTE: RE_ADJ = &RE_ADJ;
%PUT NOTE: PROGRAM_ID = &PROGRAM_ID;
%PUT NOTE: TASK_ID = &TASK_ID;
%PUT NOTE: DFL_CLT_INC_EXU_IN = &DFL_CLT_INC_EXU_IN;
%PUT NOTE: OVRD_CLT_SETUP_IN = &OVRD_CLT_SETUP_IN;
%PUT NOTE: DSPLY_CLT_SETUP_CD = &DSPLY_CLT_SETUP_CD;
%PUT NOTE: DB2_TMP = &DB2_TMP;
%PUT NOTE: TABLE_PREFIX = &TABLE_PREFIX;

%*SASDOC -------------------------------------------------------------------------
 | MACRO VARIABLES OBTAINED FROM USER INPUT / DEFAULT INPUT
 +---------------------------------------------------------------------------SASDOC;

%PUT NOTE: TBL_NAME_IN = &TBL_NAME_IN;
%PUT NOTE: TBL_NAME_IN_RX = &TBL_NAME_IN_RX;
%PUT NOTE: TBL_NAME_IN_RE = &TBL_NAME_IN_RE;
%PUT NOTE: TBL_NAME_OUT = &TBL_NAME_OUT;
%PUT NOTE: TBL_NAME_OUT_RX = &TBL_NAME_OUT_RX;
%PUT NOTE: TBL_NAME_OUT_RE = &TBL_NAME_OUT_RE;
%PUT NOTE: TBL_NAME_OUT2 = &TBL_NAME_OUT2;
%PUT NOTE: TBL_NAME_OUT_RX2 = &TBL_NAME_OUT_RX2;
%PUT NOTE: TBL_NAME_OUT_RE2 = &TBL_NAME_OUT_RE2;
%PUT NOTE: NO_OUTPUT_TABLES_IN = &NO_OUTPUT_TABLES_IN;
%PUT NOTE: NO_OUTPUT_TABLES_IN_RX = &NO_OUTPUT_TABLES_IN_RX;
%PUT NOTE: NO_OUTPUT_TABLES_IN_RE = &NO_OUTPUT_TABLES_IN_RE;
%PUT NOTE: EXECUTE_CONDITION = &EXECUTE_CONDITION;

%*SASDOC -------------------------------------------------------------------------
 | DEFINE GLOBAL MACRO VARIABLES
 | THESE MACRO VARIABLES ARE RESOLVED IN THIS PROCESS AND ARE PASSED ON TO 
 | OTHER PROCESSES THAT CALL RESOLVE_CLIENT.SAS
 +---------------------------------------------------------------------------SASDOC;

%GLOBAL RESOLVE_CLIENT_EXCLUDE_FLAG
		RESOLVE_CLIENT_TBL_EXIST_FLAG
		RESOLVE_CLIENT_TBL_EXIST_FLAG_RX
		RESOLVE_CLIENT_TBL_EXIST_FLAG_RE
		RESOLVE_CLIENT_IDS
		RESOLVE_CARRIER_IDS_RX
		RESOLVE_CLIENT_IDS_RE
		CLIENT_ID_CONDITION
        CLIENT_ID_CONDITION2
		LVL_GID_CONDITION_RX
		LVL_GID_CONDITION_RE
        PRIMARY_PROGRAMMER_EMAIL;

%*SASDOC -------------------------------------------------------------------------
 | OBTAIN PRIMARY_PROGRAMMER_EMAIL ADDRESS FROM ADM_LKP.ANALYTICS_USERS
 +---------------------------------------------------------------------------SASDOC;

PROC SQL NOPRINT;
	SELECT QUOTE(TRIM(LEFT(EMAIL)))
	INTO   :PRIMARY_PROGRAMMER_EMAIL SEPARATED BY ' '
	FROM   ADM_LKP.ANALYTICS_USERS
	WHERE  UPCASE(QCP_ID) IN ("&USER");
QUIT;

%SET_ERROR_FL;

%*SASDOC -------------------------------------------------------------------------
 | MACRO VARIABLES THAT ARE INITIALIZED TO DEFAULT VALUES OR 
 | CREATED BASED OFF OTHER MACRO VARIABLES 
 +---------------------------------------------------------------------------SASDOC;

%GLOBAL MAC_NAME;
%LET MAC_NAME = RESOLVE_CLIENT;
%LET RESOLVE_CLIENT_IDS = ;

%IF &DB2_TMP. = 	%THEN
	%LET DB2_TMP=&USER;

%IF &TBL_NAME_OUT = 	%THEN 
	%LET TBL_NAME_OUT = &DB2_TMP..&TABLE_PREFIX._QL;
%IF &TBL_NAME_OUT_RX = 	%THEN 
	%LET TBL_NAME_OUT_RX = &ORA_TMP..&TABLE_PREFIX._RX;
%IF &TBL_NAME_OUT_RE = 	%THEN 
	%LET TBL_NAME_OUT_RE = &ORA_TMP..&TABLE_PREFIX._RE;

%*SASDOC -------------------------------------------------------------------------
 | FOR IMPLICIT CONNECTS IN ORACLE
 | LIBNAME STATEMENT SHOULD BE REMOVED FROM THE CODE AFTER IT HAS BEEN ADDED TO
 | HERCULES_IN.SAS
 +---------------------------------------------------------------------------SASDOC;

/*%LET TBL_NAME_OUT_RE_IMP = &ORA_TMP..&TABLE_PREFIX._RE;*/
/*%LET TBL_NAME_OUT_RX_IMP = &ORA_TMP..&TABLE_PREFIX._RX;*/

%*SASDOC -------------------------------------------------------------------------
 | SETTING UP EXECUTE_CONDITION_FLAG
 +---------------------------------------------------------------------------SASDOC;

%LET EXECUTE_CONDITION_FLAG = %SYSFUNC(SIGN((&EXECUTE_CONDITION)));
%PUT NOTE: EXECUTE_CONDITION_FLAG=&EXECUTE_CONDITION_FLAG;

%*SASDOC -------------------------------------------------------------------------
 | SETTING UP RESOLVE_CLIENT_EXCLUDE_FLAG , CPG_CONDITION , CLIENT_CONDITION MACRO VARIABLE
 | NOTE: ALL THESE FLAGS ARE SET AT INITIATIVE / PROGRAM_TASK LEVEL AND 
 |       NOT AT INITIATIVE - ADJUDICATION / PROGRAM_TASK - ADJUDICATION LEVEL
 +---------------------------------------------------------------------------SASDOC;

/*%IF &DFL_CLT_INC_EXU_IN.=1 AND &OVRD_CLT_SETUP_IN.=0 	*/
%IF &DFL_CLT_INC_EXU_IN.=1 
	%THEN 
		%LET RESOLVE_CLIENT_EXCLUDE_FLAG=1;	
	%ELSE 
		%LET RESOLVE_CLIENT_EXCLUDE_FLAG=0;

%IF &RESOLVE_CLIENT_EXCLUDE_FLAG=1 
	%THEN %DO;
			 %LET HIERARCHY_CONDITION=%STR(IS NULL);
			 %LET CLIENT_CONDITION=NOT;
			 %LET RESOLVE_CLIENT_CONDITION=%STR(NOT EXISTS);
	%END;
	%ELSE %DO;
			 %LET HIERARCHY_CONDITION=%STR(IS NOT NULL);
			 %LET CLIENT_CONDITION=;
			 %LET RESOLVE_CLIENT_CONDITION=EXISTS;
	%END;

%*SASDOC -------------------------------------------------------------------------
 | SANITY CHECK TO MAKE SURE THE INITIATIVE_ID PASSED BY HERCULES_IN.SAS 
 | EXISTS IN TINITIATIVE AND THE CORRESPONDING PROGRAM_ID AND TASK_ID EXISTS
 | IN TPROGRAM AND TPROGRAM_TASK
 +---------------------------------------------------------------------------SASDOC;

PROC SQL NOPRINT;
	SELECT COUNT(*)
	INTO :RECORD_CNT
	FROM &CLAIMSA..TPROGRAM A, 
		 &HERCULES..TINITIATIVE B,
         &HERCULES..TPROGRAM_TASK C
	WHERE B.INITIATIVE_ID = &INITIATIVE_ID.
      AND B.PROGRAM_ID = A.PROGRAM_ID
      AND B.PROGRAM_ID = C.PROGRAM_ID
      AND B.TASK_ID = C.TASK_ID;
QUIT;

%SET_ERROR_FL;

%*SASDOC -------------------------------------------------------------------------
 | RESOLVE_CLIENT EXECUTES ONLY WHEN THE SANITY CHCEK ABOVE RETURNS ONE ROW
 +---------------------------------------------------------------------------SASDOC;

%IF &RECORD_CNT = 1 %THEN %DO;

	%IF &QL_ADJ = 1 %THEN
		%RESOLVE_CLIENT_QLA;
	%IF &RX_ADJ = 1 %THEN
		%RESOLVE_CLIENT_RXA;
	%IF &RE_ADJ = 1 %THEN 
		%RESOLVE_CLIENT_REA;
%put _all_;
%END;
%ELSE %IF &RECORD_CNT = 0 %THEN %DO;
	%PUT WARNING: NO MATCHING INITIATIVE_ID/PROGRAM_ID/TASK_ID WAS FOUND.;
%END;
%ELSE %IF &RECORD_CNT > 1 %THEN %DO;
	%PUT WARNING: DUPLICATES FOUND FOR THE CORRESPONDING INITIATIVE_ID/PROGRAM_ID/TASK_ID;
%END;

%LET MAC_NAME = ;

%MEND RESOLVE_CLIENTA;




/*%set_sysmode(mode=prod);*/
/*options sysparm='INITIATIVE_ID=6201 PHASE_SEQ_NB=1';*/
/*%INCLUDE "/PRG/sasprod1/hercules/hercules_in.sas";*/
/**/
/*%LET ERR_FL=0;*/
/*%LET PROGRAM_NAME=incentivized_frm_w_N;*/
/*%put &task_id;*/
/**/
/*%LET DEBUG_FLAG=Y;*/
/*OPTIONS MLOGIC SYMBOLGEN MFILE MPRINT SOURCE2 SOURCE ;*/
/*FILENAME MPRINT '/PRG/sastest1/hercules/nw/resolve_client_I6201.sas';*/
/*%resolve_clienta(TBL_NAME_OUT=&DB2_TMP..&TABLE_PREFIX._CLT_CPG_QL*/
/*			      ,TBL_NAME_OUT_RX=&ORA_TMP..&TABLE_PREFIX._CLT_CPG_RX*/
/*			       ,TBL_NAME_OUT_RE=&ORA_TMP..&TABLE_PREFIX._CLT_CPG_RE*/
/*				   ,EXECUTE_CONDITION=%STR(1=1)*/
/*                  );*/

%RESOLVE_CLIENTA(TBL_NAME_OUT=&DB2_TMP..&TABLE_PREFIX._QL,
  				TBL_NAME_OUT_RX=&ORA_TMP..&TABLE_PREFIX._RX,
  				TBL_NAME_OUT_RE=&ORA_TMP..&TABLE_PREFIX._RE,
  				EXECUTE_CONDITION=%STR(1=1));




%IF &QL_ADJ = 1 %THEN %DO;
	%LET TBL_NAME_IN_QL = %STR(TBL_NAME_IN_QL);
    %LET TBL_NAME_IN_QL_PRES_OUT = %STR(TBL_NAME_IN_QL_PRES_OUT);
	%LET QL_CONS = %STR(IF ADJ_ENGINE = "QL" THEN OUTPUT TBL_NAME_IN_QL;);
%END;
%ELSE %DO;
	%LET TBL_NAME_IN_QL = %STR();
    %LET TBL_NAME_IN_QL_PRES_OUT = %STR();
	%LET QL_CONS = %STR();
%END;

%IF &RX_ADJ = 1 %THEN %DO;
	%LET TBL_NAME_IN_RX = %STR(TBL_NAME_IN_RX);
    %LET TBL_NAME_IN_RX_PRES_OUT = %STR(TBL_NAME_IN_RX_PRES_OUT);
	%LET RX_CONS = %STR(IF ADJ_ENGINE = "RX" THEN OUTPUT TBL_NAME_IN_RX;);
%END;
%ELSE %DO;
	%LET TBL_NAME_IN_RX = %STR();
    %LET TBL_NAME_IN_RX_PRES_OUT = %STR();
	%LET RX_CONS = %STR();
%END;

%IF &RE_ADJ = 1 %THEN %DO;
	%LET TBL_NAME_IN_RE = %STR(TBL_NAME_IN_RE);
    %LET TBL_NAME_IN_RE_PRES_OUT = %STR(TBL_NAME_IN_RE_PRES_OUT);
	%LET RE_CONS = %STR(IF ADJ_ENGINE = "RE" THEN OUTPUT TBL_NAME_IN_RE;);
%END;
%ELSE %DO;
	%LET TBL_NAME_IN_RE = %STR();
    %LET TBL_NAME_IN_RE_PRES_OUT = %STR();
	%LET RE_CONS = %STR();
%END;

DATA &TBL_NAME_IN_QL. &TBL_NAME_IN_RX. &TBL_NAME_IN_RE.;
	SET &TBL_NAME_IN.;
	&QL_CONS.
	&RX_CONS.
	&RE_CONS.
RUN;

%IF &QL_ADJ = 1 %THEN %DO;
	PROC SQL;
		CREATE TABLE _TBL_NAME_IN_QL_PRES_OUT AS /*NCW*/
		SELECT A.*
		FROM TBL_NAME_IN_QL A
		LEFT JOIN
		     &DB2_TMP..&TABLE_PREFIX._QL B
		ON 		A.CLIENT_ID = B.CLIENT_ID
		    AND INPUT(A.CLIENT_LEVEL_1,20.) = B.CLT_PLAN_GROUP_ID
		WHERE B.CLT_PLAN_GROUP_ID IS NULL;
	QUIT;
%END;

%IF &RX_ADJ = 1 %THEN %DO;
	PROC SQL;
		CREATE TABLE _TBL_NAME_IN_RX_PRES_OUT AS /*NCW*/
		SELECT A.*
		FROM TBL_NAME_IN_RX A
		LEFT JOIN
		     &ORA_TMP..&TABLE_PREFIX._RX B
		ON 		A.CLIENT_LEVEL_1 = B.CARRIER_ID
		    AND A.CLIENT_LEVEL_2 = B.ACCOUNT_ID
		    AND A.CLIENT_LEVEL_3 = B.GROUP_CD
		WHERE B.CARRIER_ID IS NULL;
	QUIT;
%END;

%IF &RE_ADJ = 1 %THEN %DO;
	PROC SQL;
		CREATE TABLE _TBL_NAME_IN_RE_PRES_OUT AS /*NCW*/
		SELECT A.*
		FROM TBL_NAME_IN_RE A
		LEFT JOIN
		     &ORA_TMP..&TABLE_PREFIX._RE B
		ON 		A.CLIENT_LEVEL_1 = B.INSURANCE_CD
		    AND A.CLIENT_LEVEL_2 = B.CARRIER_ID
		    AND A.CLIENT_LEVEL_3 = B.GROUP_CD
		WHERE B.INSURANCE_CD IS NULL;
	QUIT;
%END;

*SASDOC--------------------------------------------------------------------------
|  NCW ADD HERE
|  
+------------------------------------------------------------------------SASDOC*;
%IF &QL_ADJ = 1 %THEN %DO;
	PROC SQL;
		CREATE TABLE TBL_NAME_IN_QL_PRES_OUT AS
		SELECT A.*
		FROM _TBL_NAME_IN_QL_PRES_OUT A
		WHERE A.ADJ_ENGINE = 'QL'
        &CLIENT_ID_CONDITION.
        ;
	QUIT;
%END;

%IF &RX_ADJ = 1 %THEN %DO;
	PROC SQL;
		CREATE TABLE TBL_NAME_IN_RX_PRES_OUT AS
		SELECT A.*
		FROM _TBL_NAME_IN_RX_PRES_OUT A
		WHERE A.ADJ_ENGINE = 'RX'
		&LVL_GID_CONDITION_RX.
        ;
	QUIT;
%END;

%IF &RE_ADJ = 1 %THEN %DO;
	PROC SQL;
		CREATE TABLE TBL_NAME_IN_RE_PRES_OUT AS
		SELECT A.*
		FROM _TBL_NAME_IN_RX_PRES_OUT A
		WHERE A.ADJ_ENGINE = 'RE'
		&LVL_GID_CONDITION_RE.
        ;
	QUIT;
%END;

*SASDOC--------------------------------------------------------------------------
|  NCW END HERE
|  
+------------------------------------------------------------------------SASDOC*;


DATA &TBL_NAME_OUT.;
	SET &TBL_NAME_IN_QL_PRES_OUT.
	    &TBL_NAME_IN_RX_PRES_OUT.
		&TBL_NAME_IN_RE_PRES_OUT.;
RUN;

/*PROC SQL;*/
/*	CREATE TABLE &TBL_NAME_OUT. AS*/
/*	SELECT * FROM TBL_NAME_IN_QL_PRES_OUT*/
/*	UNION ALL*/
/*	SELECT * FROM TBL_NAME_IN_RX_PRES_OUT*/
/*	UNION ALL*/
/*	SELECT * FROM TBL_NAME_IN_RE_PRES_OUT;*/
/*QUIT;*/

%END;

%MEND PRESCRIBER_OPT_OUTA;

