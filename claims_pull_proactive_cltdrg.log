1                                                          The SAS System                          11:47 Wednesday, February 6, 2013

NOTE: Unable to open SASUSER.REGSTRY. WORK.REGSTRY will be opened instead.
NOTE: All registry changes will be lost at the end of the session.

WARNING: Unable to copy SASUSER registry to WORK registry. Because of this, you will not see registry customizations during this 
         session.
NOTE: Copyright (c) 2002-2003 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) 9.1 (TS1M3)
      Licensed to CVS PHARMACY INC, Site 0031083008.
NOTE: This session is executing on the AIX 6.1 platform.



NOTE: SAS 9.1.3 Service Pack 4

You are running SAS 9. Some SAS 8 files will be automatically converted 
by the V9 engine; others are incompatible.  Please see 
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is 
recommended for converting all your SAS libraries from any 
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS initialization used:
      real time           0.05 seconds
      cpu time            0.05 seconds
      

NOTE: AUTOEXEC processing beginning; file is /home/user/qcpap020/autoexec.sas.

NOTE: Libref CLAIMSA was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: UDBSPRP
NOTE: Libref QCPAP020 was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: UDBSPRP
NOTE: Libref EGTASK was successfully assigned as follows: 
      Levels:           1
      Engine(1):        V9 
      Physical Name(1): /sas/saswork/SAS_work405A00FA0090_tstsas5
    SAS (r) Proprietary Software Release 9.1  TS1M3

 SASAUTOS=("/PRG/sasqat1/hercules_upgrade/macros"  '!SASROOT/sasautos' '/PRG/sas_env/sas_macros')
                   Search list for autocall macros

NOTE: AUTOEXEC processing completed.

1          /*HEADER---------------------------------------------------------------------------------------------------------
2          |MACRO: 		CLAIMS_PULL_EDW_CLTDRG_SPECIFIC.SAS
2                                                          The SAS System                          11:47 Wednesday, February 6, 2013

3          |
4          |PURPOSE: 		To pull claims for proactive refill for pre-targeted client specific drug lists.
5          |
6          |INPUT:			
7          |
8          |LOGIC:       					
9          |						
10         |OUTPUT:			
11         |+-----------------------------------------------------------------------------------------------------------------
12         |HISTORY:
13         |			    SR 01OCT2008 - Hercules Version  2.1.2.01
14         |26FEB2009 - Hercules Version  2.1.2.02
15         |G. DUDLEY - CHANGED THE FORMAT OF DATE MACRO VARIABLE USED IN ORACLE QUERIES
16         |G. DUDLEY - ADDED THE "MBR_REUSE_RISK_FLG" TO THE QUERY TO EXTRACT MEMBER
17         |            DEMOGRAPHICS FROM THE V-MBR VIEW.  THIS WILL BE USED TO EXCLUDE
18         |            SUSPECT MEMBERS DUE TO POSSIBLE MEBER ID REUSE.
19         +-----------------------------------------------------------------------------------------------------------HEADER*/
20         
21         
22         
23         *SASDOC--------------------------------------------------------------------------
24         |26FEB2009 - Hercules Version  2.1.2.02
25         |G. DUDLEY - REMOVED THE MACRO PARAMETERS CLM_BEGIN_DT = %STR(&CLAIM_BEGIN_DT)
26         |            AND CLM_END_DT = %STR(&CLAIM_END_DT)
27         +------------------------------------------------------------------------SASDOC*;
28         
29         %MACRO CLAIMS_PULL_PROACTIVE_CLTDRG(CLIENT_DRUG_TABLE_RX = &ORA_TMP..EXT_CLIENT_DRUG_TABLE_RX,
30         					                   CLIENT_DRUG_TABLE_RE = &ORA_TMP..EXT_CLIENT_DRUG_TABLE_RE);
31         
32         OPTIONS MPRINT MPRINTNEST MLOGIC MLOGICNEST SYMBOLGEN SOURCE2;
33         
34         	%MACRO EDW_CLAIMS(ADJ_ENGINE=);
35         
36         	PROC SQL;
37         		SELECT COUNT(*)
38                 INTO :CNT
39         		FROM &&CLIENT_DRUG_TABLE_&ADJ_ENGINE
40         		WHERE PROGRAM_ID = &PROGRAM_ID.;
41         	QUIT;
42         
43         	%IF &CNT >= 1 %THEN %DO;
44         
45         *SASDOC--------------------------------------------------------------------------
46         |26FEB2009 - Hercules Version  2.1.2.02
47         |G. DUDLEY - CHANGED THE FORMAT OF DATE MACRO VARIABLE USED IN ORACLE QUERIES
48         +------------------------------------------------------------------------SASDOC*;
49         		/** DATE MANIPULATIONS FOR ORACLE **/
50             %LET STARTDAY=TODAY();  *** length of the most recent days a pt used RETAILS;
51             DATA _NULL_;
52               CALL SYMPUT('CLM_BEGIN_DT', PUT(&startday.-&RTL_HIS_DAYS,YYMMDDD10.));
53         		  CALL SYMPUT('CLM_END_DT', PUT(&STARTDAY,YYMMDDD10.));
54         
55             RUN;
56             DATA _NULL_;
57         		  CALL SYMPUT('CLM_BEGIN_DT_CONV', "TO_DATE('" ||"&CLM_BEGIN_DT" || "','YYYY-MM-DD')" );
58         		  CALL SYMPUT('CLM_END_DT_CONV', "TO_DATE('" || "&CLM_END_DT" || "','YYYY-MM-DD')" );
59         
60         		  CALL SYMPUT('CLM_BEGIN_DT_PLUS_1WK', "TO_DATE('"
3                                                          The SAS System                          11:47 Wednesday, February 6, 2013

60       ! ||PUT(INTNX('WEEK',INPUT("&CLM_BEGIN_DT",YYMMDD10.),-1,'BEGIN'),YYMMDD10.) || "','YYYY-MM-DD')" );
61         		  CALL SYMPUT('CLM_END_DT_PLUS_1WK', "TO_DATE('" ||
61       ! PUT(INTNX('WEEK',INPUT("&CLM_END_DT",YYMMDD10.),+1,'END'),YYMMDD10.) || "','YYYY-MM-DD')" );
62             RUN;
63         
64         		%PUT NOTE: CLM_BEGIN_DT_CONV = &CLM_BEGIN_DT_CONV;
65         		%PUT NOTE: CLM_END_DT_CONV = &CLM_END_DT_CONV;
66         		%PUT NOTE: CLM_BEGIN_DT_PLUS_1WK = &CLM_BEGIN_DT_PLUS_1WK;
67         		%PUT NOTE: CLM_END_DT_PLUS_1WK = &CLM_END_DT_PLUS_1WK;
68         
69         		/** CONSTRAINTS BASED ON DRUG SET-UP **/
70         
71         		%LET SELECT_DRUG_SEQ = %STR(,59 AS DRUG_CATEGORY_ID
72         				                    ,CLTDRG.GPI_GROUP
73                                             ,CLTDRG.GPI_CLASS);
74         
75         		%LET CLIENT_DRUG_TABLE = %STR(&&CLIENT_DRUG_TABLE_&ADJ_ENGINE. CLTDRG);
76         		%LET CLIENT_DRUG_TABLE2 = %STR(&&CLIENT_DRUG_TABLE_&ADJ_ENGINE. CLTDRG2);
77         
78         
79         		/** IF REFILL_FILL_QTY IS POPULATED IN TFILE AND TFILE_FIELD FOR
80         		    THE INITIATIVE THEN JOIN AGAINST V_CLAIM AND OBTAIN
81         		    SBMTD_REFIL_ATHZD (RX) OR ATHZD_REFIL_QTY (RE) AS REFILL_FILL_QTY
82         		    OTHERWISE LEAVE REFILL_FILL_QTY AS NULL  **/
83         
84         				PROC SQL NOPRINT;
85         					SELECT COUNT(*) INTO : REFILL_FILL_QTY
86         					FROM &HERCULES..TFILE_FIELD AS A,
87         					&HERCULES..TFIELD_DESCRIPTION AS B,
88         					&HERCULES..TPHASE_RVR_FILE AS C
89         					WHERE INITIATIVE_ID=&INITIATIVE_ID
90         					AND PHASE_SEQ_NB=&PHASE_SEQ_NB
91         					AND A.FILE_ID = C.FILE_ID
92         					AND A.FIELD_ID = B.FIELD_ID
93         					AND LEFT(TRIM(FIELD_NM)) IN ('REFILL_FILL_QY')
94         					;
95         				QUIT;
96         
97         				%IF &REFILL_FILL_QTY >= 1 %THEN %DO;
98         					%IF &ADJ_ENGINE. = RX %THEN %DO;
99         						%LET REFIL_QTY_CLM_TABLE = %STR(,&DSS_CLIN..V_CLAIM VCLM);
100        					%END;
101        					%ELSE %IF &ADJ_ENGINE. = RE %THEN %DO;
102        						%LET REFIL_QTY_CLM_TABLE = %STR(,&DSS_CLIN..V_CLAIM_ALV VCLM);
103        					%END;
104        					%LET REFIL_QTY_CLM_TABLE_CONS = %STR(AND CLAIM.CLAIM_GID = VCLM.CLAIM_GID
105        													 	 AND VCLM.BATCH_DATE BETWEEN &CLM_BEGIN_DT_PLUS_1WK. AND &CLM_END_DT_PLUS_1WK.);
106        				%END;
107        				%ELSE %DO;
108        					%LET REFIL_QTY_CLM_TABLE = %STR();
109        					%LET REFIL_QTY_CLM_TABLE_CONS = %STR();
110        					%LET REFILL_QTY = %STR(,0 AS REFILL_FILL_QY);
111        				%END;
112        
113        /*		%INCLUDE "/PRG/sas&sysmode.1/hercules/macros/delivery_sys_check.sas";*/
114        	    %INCLUDE "/herc&sysmode/prg/hercules/macros/delivery_sys_check_tbd.sas";
115        
116        		%IF &ADJ_ENGINE. = RX %THEN %LET CREATE_DELIVERY_SYSTEM_CD=&CREATE_DELIVERY_SYSTEM_CD_RX. ;
4                                                          The SAS System                          11:47 Wednesday, February 6, 2013

117        		%IF &ADJ_ENGINE. = RE %THEN %LET CREATE_DELIVERY_SYSTEM_CD=&CREATE_DELIVERY_SYSTEM_CD_RE. ;
118        /*		%IF &ADJ_ENGINE. = RX %THEN %LET DS_STRING_RX_RE=&DS_STRING_RX. ;*/
119        /*		%IF &ADJ_ENGINE. = RE %THEN %LET DS_STRING_RX_RE=&DS_STRING_RE. ;*/
120        
121        		%PUT NOTE: CREATE_DELIVERY_SYSTEM_CD = &CREATE_DELIVERY_SYSTEM_CD. ;
122        /*		%PUT NOTE: DS_STRING_RX_RE = &DS_STRING_RX_RE. ;*/
123        
124        		DATA _NULL_;
125        			CALL SYMPUT ('START_TM',PUT(%SYSFUNC(DATETIME()), DATETIME23.));
126        		RUN;
127        		%PUT NOTE: PULL FROM CLAIMS - START TIME - &START_TM;
128        
129        		%DROP_ORACLE_TABLE(TBL_NAME=&ORA_TMP..CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);
130        		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);
131        		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);
132        		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP2_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);
133        		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP3_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);
134        
135        		/** PRESCRIBER CONSTRAINTS TO USE
136        		    NOTE: IF IT IS A PARTICIPANT ONLY OR CARDHOLDER ONLY MAILING, THE PRESCRIBER
137        		          CONSTRAINT NEED NOT BE APPLIED **/
138        
139        		PROC SQL;
140        			SELECT TRGT_RECIPIENT_CD INTO :TRGT_RECIPIENT_CD
141        			FROM HERCULES.TPROGRAM_TASK
142        			WHERE PROGRAM_ID = &PROGRAM_ID. AND
143        			TASK_ID = &TASK_ID.;
144        		QUIT;
145        
146        		%IF &TRGT_RECIPIENT_CD EQ 1 OR &TRGT_RECIPIENT_CD EQ 4 %THEN %DO;
147        		  %LET PRSCR_CONS = %STR();
148        		%END;
149        		%ELSE %DO;
150        		  %LET PRSCR_CONS = %STR(AND PRCTR.REC_SRC_FLG = 0
151        							     AND PRCTR.PRCTR_ID_TYP_CD IN ('DH', 'FW', 'NP'));
152        		%END;
153        
154        		%IF &ADJ_ENGINE = RX %THEN %DO;
155        
156        			%LET HIERARCHY_CONS = %STR(
157        										ALGN.SRC_SYS_CD = 'X'
158        										AND TODAY() BETWEEN DATEPART(ALGN.ALGN_GRP_EFF_DT) AND DATEPART(ALGN.ALGN_GRP_END_DT)
159        										AND TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_1))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID1)))
160        										AND (CLTDRG.CLIENT_LEVEL_2 = ' ' OR CLTDRG.CLIENT_LEVEL_2 IS NULL OR
161        										TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_2))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID2))))
162        										AND (CLTDRG.CLIENT_LEVEL_3 = ' ' OR CLTDRG.CLIENT_LEVEL_3 IS NULL OR
163        										TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_3))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID3))))
164        			                            );
165        
166        
167        		%END;
168        
169        		%IF &ADJ_ENGINE = RE %THEN %DO;
170        
171        			%LET HIERARCHY_CONS = %STR( ALGN.SRC_SYS_CD = 'R'
172        										AND TODAY() BETWEEN DATEPART(ALGN.ALGN_GRP_EFF_DT) AND DATEPART(ALGN.ALGN_GRP_END_DT)
173        										AND TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_1))) = TRIM(LEFT(UPCASE(ALGN.RPT_OPT1_CD)))
174        				            AND (CLTDRG.CLIENT_LEVEL_2 = ' ' OR CLTDRG.CLIENT_LEVEL_2 IS NULL OR
5                                                          The SAS System                          11:47 Wednesday, February 6, 2013

175        				            TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_2))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID1))))
176        				            AND (CLTDRG.CLIENT_LEVEL_3 = ' ' OR CLTDRG.CLIENT_LEVEL_3 IS NULL OR
177        				            TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_3))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID3))))
178        			             	     	  );
179        		%END;
180        
181        		/** PULL THE CLIAMS BASED ON THE CLIENT LIST FOR ALL DRUGS AND THEN
182        		    SUBSET THE RESULTS FOR CLIENT SPECIFIC DRUG LIST, FOR FASTER PULL **/
183        
184        		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..CLT_LST_&INITIATIVE_ID._&ADJ_ENGINE.);
185        		PROC SQL;
186        		CREATE TABLE CLTLIST AS
187        		SELECT 	DISTINCT PROGRAM_ID, QL_CLIENT_ID,
188        				CLIENT_LEVEL_1, CLIENT_LEVEL_2, CLIENT_LEVEL_3
189        		FROM &CLIENT_DRUG_TABLE.
190        		WHERE TODAY() BETWEEN DATEPART(EFFECTIVE_DT) AND DATEPART(EXPIRATION_DT)
191        			  AND PROGRAM_ID = &PROGRAM_ID.;
192        		QUIT;
193        
194        		PROC SQL;
195        		 CREATE TABLE CLTLIST_GID AS
196        
197        		 SELECT DISTINCT CLTDRG.*,
198        				ALGN.ALGN_LVL_GID_KEY,
199        				ALGN.CUST_NM
200        
201        		 FROM CLTLIST CLTDRG
202        		      ,&DSS_CLIN..V_ALGN_LVL_DENORM ALGN
203        		WHERE  &HIERARCHY_CONS.
204        		 ORDER BY ALGN_LVL_GID_KEY;
205        		QUIT;
206        
207        		DATA &ORA_TMP..CLT_LST_&INITIATIVE_ID._&ADJ_ENGINE.;
208        			SET CLTLIST_GID;
209        		RUN;
210        
211        		PROC SQL;
212        			CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
213        			EXECUTE
214        			(
215        				CREATE TABLE &ORA_TMP..TMP_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. AS
216        				SELECT 	%BQUOTE(/)%BQUOTE(*)+ ORDERED %BQUOTE(*)%BQUOTE(/)
217        						 CLTDRG.ALGN_LVL_GID_KEY
218        						,CLTDRG.CUST_NM AS CLIENT_NM
219        						,CLTDRG.CLIENT_LEVEL_1
220        						,CLTDRG.CLIENT_LEVEL_2
221        						,CLTDRG.CLIENT_LEVEL_3
222        						,CLAIM.PAYER_ID
223        						,CLAIM.MBR_GID
224        						,CLAIM.PHMCY_GID
225        						,CLAIM.PRCTR_GID
226        						,CLAIM.DRUG_GID
227        						,CLAIM.DSPND_DATE
228        						,CLAIM.BATCH_DATE
229        						,CLAIM.AMT_COPAY
230        						,CLAIM.BNFT_LVL_CODE
231        						,CLAIM.PTNT_BRTH_DT
232        						,CLAIM.CLAIM_TYPE
6                                                          The SAS System                          11:47 Wednesday, February 6, 2013

233        /*						&REFILL_QTY.*/
234        			            ,0 AS REFILL_FILL_QY
235        		        		,CLAIM.RX_NBR AS RX_NB		
236        		        		,CLAIM.UNIT_QTY AS DISPENSED_QY
237        			            ,CAST(CLAIM.DAYS_SPLY as char(4)) as DAY_SUPPLY_QY /*ADDED DAY_SUPPLY_QY */
238        						,CLAIM.FRMLY_GID  /* NEWLY ADDDED COLUMNS    */
239        						,FRMLY.FRMLY_NB AS FORMULARY_TX
240        				FROM    &DSS_CLIN..V_CLAIM_CORE_PAID CLAIM
241        				INNER
242        				JOIN    &ORA_TMP..CLT_LST_&INITIATIVE_ID._&ADJ_ENGINE. CLTDRG
243        				ON      CLAIM.ALGN_LVL_GID = CLTDRG.ALGN_LVL_GID_KEY
244        				LEFT
245        				JOIN    &DSS_CLIN..V_FRMLY_HDR FRMLY
246        				ON      CLAIM.FRMLY_GID = FRMLY.FRMLY_GID
247        				WHERE
248        						CLTDRG.PROGRAM_ID = &PROGRAM_ID.
249        					AND	CLAIM.DSPND_DATE BETWEEN &CLM_BEGIN_DT_CONV. AND &CLM_END_DT_CONV.
250        					AND CLAIM.BATCH_DATE IS NOT NULL
251        					AND	CLAIM.SRC_SYS_CD = %BQUOTE('&SRC_SYS_CD')
252        					AND CLAIM.CLAIM_WSHD_CD IN ('P', 'W')
253        					AND (CLAIM.MBR_SUFFX_FLG = 'Y' OR CLAIM.MBR_SUFFX_FLG IS NULL)
254        					AND CLAIM.QL_VOID_IND <= 0
255        /*					&REFIL_QTY_CLM_TABLE_CONS.*/
256        /*					AND CLAIM.DRUG_GID = CLTDRG.DRUG_GID*/
257        
258        				ORDER BY PAYER_ID, MBR_GID
259        			) BY ORACLE;
260        		DISCONNECT FROM ORACLE;
261        		QUIT;
262        		
263        
264        		DATA _NULL_;
265        			CALL SYMPUT ('END_TM',PUT(%SYSFUNC(DATETIME()), DATETIME23.));
266        		RUN;
267        		%PUT NOTE: PULL FROM CLAIMS END TIME - &END_TM;
268        
269        
270        			PROC SQL;
271        			SELECT COUNT(*) INTO :EDW_CLAIM_CNT
272        			FROM &ORA_TMP..TMP_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.;
273        		QUIT;
274        
275        		%PUT NOTE: CLAIM COUNT FROM TMP_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT;
276        
277        		/** IF EDW_CLAIM_CNT > 0 THEN PROCEED TO JOIN AGAINST V_MBR TABLE
278        		    TO GET MEMBER INFORMATION. OTHERWISE GENERATE AN ERROR AND
279        		    SEND OUT AN EMAIL
280        			NOTE: THE JOIN AGAINST V_MBR IS SEPARATED OUT AS THE JOIN AGAINST
281        		          THIS TABLE TAKES A LOT OF TIME.
282        		          SO A TEMP TABLE IS CREATED WITH DISTINCT MBR_GID AND PAYER_ID
283        		          AND JOINED AGAINST V_MBR TABLE, WHICH HAS DRASTICALLY IMPROVED
284        		          THE PERFORMANCE.
285        		          ALSO IF THE DISTINCT COUNT OF MBR_GID AND PAYER_ID IN TEMP TABLE
286        		          IS GREATER THAN 10MIL THEN INDEX LOOKUP IS AVAOIDED AND SO FULL SCAN
287        		          IS ENABLED
288        		**/
289        
290        		%IF &EDW_CLAIM_CNT. > 0 %THEN %DO;
7                                                          The SAS System                          11:47 Wednesday, February 6, 2013

291        
292        		PROC SQL;
293        			CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
294        			EXECUTE
295        			(
296        				CREATE TABLE &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. AS
297        				SELECT 	%bquote(/)%bquote(*) +ORDERED %bquote(*)%bquote(/)
298        						%BQUOTE('&ADJ_ENGINE') AS ADJ_ENGINE
299        						,CLAIM.ALGN_LVL_GID_KEY
300        						,CLTDRG.QL_CLIENT_ID AS CLIENT_ID
301        						,CLAIM.CUST_NM AS CLIENT_NM
302        						,CLTDRG.CLIENT_LEVEL_1
303        						,CLTDRG.CLIENT_LEVEL_2
304        						,CLTDRG.CLIENT_LEVEL_3
305        						,PRCTR.PRCTR_ID AS PRACTITIONER_ID
306        						,PRCTR.QL_PRSCR_ID AS PRESCRIBER_ID
307        						,PRCTR.ENTITY_IND
308        						,PRCTR.DEGR_1_CD
309        						,PHMCY.NABP_CODE_6
310        						,CLAIM.PAYER_ID
311        						,CLAIM.MBR_GID
312        						,CLAIM.PHMCY_GID
313        						,CLAIM.PRCTR_GID
314        						,CLAIM.DSPND_DATE
315        						,CLAIM.BATCH_DATE
316        						,CLAIM.AMT_COPAY AS MEMBER_COST_AT
317        						,CLAIM.BNFT_LVL_CODE
318        						,SUBSTR(CLAIM.PTNT_BRTH_DT, 1, 10) AS BIRTH_DT
319        						,SUBSTR(CLAIM.DSPND_DATE, 1, 10) AS LAST_FILL_DT
320        						,CLAIM.CLAIM_TYPE AS RX_COUNT_QY
321        						,DRUG.DRUG_GID
322        						,DRUG.GCN_CODE
323        						,DRUG.GCN_NBR
324        						,DRUG.QL_NHU_TYPE_CD AS NHU_TYPE_CD
325        /*						,CAST(DRUG.QL_NHU_TYPE_CD AS INT) AS NHU_TYPE_CD*/
326        						,DRUG.NDC_CODE AS DRUG_NDC_ID
327        /*						,CAST(DRUG.NDC_CODE AS INT) AS DRUG_NDC_ID*/
328        						&SELECT_DRUG_SEQ.
329        						,DRUG.DSG_FORM AS DRUG_ABBR_DSG_NM
330        						,DRUG.BRAND_NAME AS DRUG_ABBR_PROD_NM
331        						,DRUG.STRGH_DESC AS DRUG_ABBR_STRG_NM
332        						,DRUG.QL_DRUG_BRND_CD as DRUG_BRAND_CD
333        						,DRUG.GPI_CODE AS GPI_THERA_CLS_CD
334        						,CLAIM.REFILL_FILL_QY
335        						,0 AS LTR_RULE_SEQ_NB
336         						,RX_NB
337         						,DISPENSED_QY
338          						,DAY_SUPPLY_QY /*ADDED DAY_SUPPLY_QY */
339        						,PHMCY.PHARMACY_NM	           /* NEWLY ADDED COLUMNS */
340        						,CLAIM.FRMLY_GID
341        						,CAST(PHMCY.PHMCY_DSPNS_TYPE AS NUMBER) AS LAST_DELIVERY_SYS
342        						,CASE WHEN DRUG.RECAP_GNRC_FLAG = '2' OR MULTI_TYPE_CODE IN ('M','O','N')
343        							        THEN 'B'
344        						            ELSE 'G'
345        						      END AS BRAND_GENERIC
346        						,PRCTR.PRCTR_NPI_ID AS PRESCRIBER_NPI_NB
347        						,CASE WHEN SUBSTR(PRCTR.PRCTR_ID,1,1) NOT IN
348        							   ('1','2','3','4','5','6','7','8','9','0') AND
8                                                          The SAS System                          11:47 Wednesday, February 6, 2013

349        							   SUBSTR(PRCTR.PRCTR_ID,2,1) NOT IN
350        							   ('1','2','3','4','5','6','7','8','9','0')
351        							   THEN PRCTR.PRCTR_ID
352        							   ELSE ' '
353        						     END AS DEA_NB
354        
355        
356        				FROM   &CLIENT_DRUG_TABLE.
357        						,&ORA_TMP..TMP_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. CLAIM
358        						,&DSS_CLIN..V_DRUG_DENORM DRUG
359        						,&DSS_CLIN..V_PRCTR_DENORM PRCTR
360        						,&DSS_CLIN..V_PHMCY_DENORM PHMCY
361        				WHERE
362        						CLTDRG.PROGRAM_ID = &PROGRAM_ID.
363        					AND CURRENT_TIMESTAMP BETWEEN CLTDRG.EFFECTIVE_DT AND CLTDRG.EXPIRATION_DT
364        					AND LTRIM(RTRIM(CLTDRG.CLIENT_LEVEL_1)) = LTRIM(RTRIM(CLAIM.CLIENT_LEVEL_1))
365        					AND LTRIM(RTRIM(NVL(CLTDRG.CLIENT_LEVEL_2,'00'))) = LTRIM(RTRIM(NVL(CLAIM.CLIENT_LEVEL_2,'00')))
366        					AND LTRIM(RTRIM(NVL(CLTDRG.CLIENT_LEVEL_3,'00'))) = LTRIM(RTRIM(NVL(CLAIM.CLIENT_LEVEL_3,'00')))
367        					AND CLAIM.DRUG_GID = CLTDRG.DRUG_GID
368        					AND CLAIM.PRCTR_GID = PRCTR.PRCTR_GID
369        					&PRSCR_CONS.
370        					AND CLAIM.PHMCY_GID = PHMCY.PHMCY_GID
371        					AND CLAIM.DRUG_GID = DRUG.DRUG_GID
372        					&MAIL_DELVRY_CD.
373        
374        				ORDER BY PAYER_ID, MBR_GID
375        			) BY ORACLE;
376        		DISCONNECT FROM ORACLE;
377        		QUIT;
378        
379        /*START OF RG ADDED*/
380        
381        		DATA CLT_SPEC_CLAIMS;
382        		SET &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.;
383        		RUN;
384        
385          *SASDOC--------------------------------------------------------------------------
386          |04 FEB 2013 - Hercules Stabilization
387          |Extract Client Specific MOR claims and delete them from clt_spec_claims, based on
388          |user setup pharmacy list.
389          +------------------------------------------------------------------------SASDOC*;
390          *SASDOC--------------------------------------------------------------------------
391          |RXCLAIM
392          +------------------------------------------------------------------------SASDOC*;
393        	%IF &ADJ_ENGINE. = RX %THEN %DO;
394        		   PROC SQL;
395        	       CREATE TABLE CLT_SPEC_RX_MORCLAIMS AS
396        	       SELECT A.NABP_CODE_6,
397        		  		  B.CARRIER_ID,
398        	  			  B.ACCOUNT_ID,
399        				  B.GROUP_CD,
400        	      	      B.NABP_ID
401        	       FROM DSS_CLIN.V_PHMCY_DENORM A,
402        	      	    QCPAP020.HCE_PHARMACY_ID_RX B
403        	       WHERE A.NABP_CODE_6 = B.NABP_ID
404                         AND TODAY() BETWEEN B.EFFECTIVE_DT AND B.EXPIRATION_DT;
405        	       QUIT;
406        
9                                                          The SAS System                          11:47 Wednesday, February 6, 2013

407        		   %LET HIERARCHY_CONS_RX =  %STR(B.CARRIER_ID = ('X'||A.CLIENT_LEVEL_1)
408                                               AND (B.ACCOUNT_ID = ' ' OR
409        				                        UPCASE(LEFT(TRIM(B.ACCOUNT_ID))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_2))))
410        				                              AND (B.GROUP_CD = ' ' OR
411        				                        UPCASE(LEFT(TRIM(B.GROUP_CD))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_3))))
412        				                             );
413        
414        	       PROC SQL;
415        	       DELETE FROM CLT_SPEC_CLAIMS A
416        	       WHERE EXISTS (  SELECT 1 FROM CLT_SPEC_RX_MORCLAIMS B
417        				           WHERE A.NABP_CODE_6 = B.NABP_ID
418        			               AND &HIERARCHY_CONS_RX.);
419        	      QUIT;
420        /*		  	       PROC SQL;*/
421        /*	       DELETE FROM CLT_SPEC_CLAIMS A*/
422        /*	       WHERE IN (  SELECT 1 FROM CLT_SPEC_RX_MORCLAIMS B*/
423        /*				           WHERE A.NABP_CODE_6 = B.NABP_ID*/
424        /*			               AND &HIERARCHY_CONS_RX.);*/
425        /*	      QUIT;*/
426        	%END;
427        
428          *SASDOC--------------------------------------------------------------------------
429          |RECAP
430          +------------------------------------------------------------------------SASDOC*;
431        
432        	%IF &ADJ_ENGINE. = RE %THEN %DO;
433        	 proc sql;
434              create table CLT_SPEC_RE_MORCLAIMS as
435              SELECT 	a.NABP_CODE_6,
436        		  		b.INSURANCE_CD,
437        				b.CARRIER_ID,
438        				b.GROUP_CD,
439              	   	 	b.NABP_ID
440              from DSS_CLIN.V_PHMCY_DENORM a,
441              	 QCPAP020.HCE_PHARMACY_ID_RE b
442              where a.NABP_CODE_6=b.NABP_ID
443        		and TODAY() BETWEEN B.EFFECTIVE_DT AND B.EXPIRATION_DT;
444              quit;
445        
446        		   %LET HIERARCHY_CONS_RE = %STR(B.INSURANCE_CD = A.CLIENT_LEVEL_1
447                                            AND (B.CARRIER_ID = ' ' OR
448                                            UPCASE(LEFT(TRIM(B.CARRIER_ID))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_2))))
449                                            AND (B.GROUP_CD = ' ' OR
450                                            UPCASE(LEFT(TRIM(B.GROUP_CD))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_3))))
451                                     );
452        
453        
454        	       PROC SQL;
455        	       DELETE FROM CLT_SPEC_CLAIMS A
456        	       WHERE EXISTS (
457        	              SELECT 1 FROM CLT_SPEC_RE_MORCLAIMS B
458        	              WHERE A.NABP_CODE_6 = B.NABP_ID
459                           		AND &HIERARCHY_CONS_RE.);
460        	      QUIT;
461        
462        /*		  	       PROC SQL;*/
463        /*	       DELETE FROM CLT_SPEC_CLAIMS A*/
464        /*	       WHERE IN (*/
10                                                         The SAS System                          11:47 Wednesday, February 6, 2013

465        /*	              SELECT 1 FROM CLT_SPEC_RE_MORCLAIMS B*/
466        /*	              WHERE A.NABP_CODE_6 = B.NABP_ID*/
467        /*                   		AND &HIERARCHY_CONS_RE.);*/
468        /*	      QUIT;*/
469            %END;
470        
471          *SASDOC--------------------------------------------------------------------------
472          |18AUG2009 - Hercules Version  2.1.2.02
473          |Extract CLT_SPEC MOR claims and delete them from CLT_SPEC_CLAIMS
474          |13JUN2012: Apply business rule 2 here for including CLT_SPEC MOR Claim overrides - AK
475          +------------------------------------------------------------------------SASDOC*;
476        
477              PROC SQL;
478              CREATE TABLE CLT_SPEC_MORCLAIMS AS
479              SELECT C.NABP_CODE_6,
480        			 C.MBR_GID,
481        			 C.CLIENT_LEVEL_1,
482         			 C.CLIENT_LEVEL_2,
483         			 C.CLIENT_LEVEL_3
484              FROM CLT_SPEC_CLAIMS C
485              WHERE C.NABP_CODE_6 IN ('482663','146603','032664','012929','398095','459822','032691','147389','458303','100229')
486                  ;
487              QUIT;
488        
489        /*	AK ADDED CODE 06/13/2012	*/
490        	  %IF &ADJ_ENGINE. = RX %THEN %DO;
491        %LET HIERARCHY_CONS =  %STR(B.CARRIER_ID = ('X'||A.CLIENT_LEVEL_1)
492                    			AND (B.ACCOUNT_ID = ' ' OR
493                         		UPCASE(LEFT(TRIM(B.ACCOUNT_ID))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_2))))
494                    			AND (B.GROUP_CD = ' ' OR
495                         		UPCASE(LEFT(TRIM(B.GROUP_CD))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_3))))
496                     		     );
497        	%LET RULE_TABLE = %STR(&HERCULES..TPGM_RXCLM_BSRL_HS);
498        	%LET KEY_COLUMN = %STR(CARRIER_ID);
499        %END;
500        
501        %IF &ADJ_ENGINE. = RE %THEN %DO;
502        	%LET HIERARCHY_CONS = %STR(B.INSURANCE_CD = A.CLIENT_LEVEL_1
503                    			AND (B.CARRIER_ID = ' ' OR
504                         		UPCASE(LEFT(TRIM(B.CARRIER_ID))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_2))))
505                    			AND (B.GROUP_CD = ' ' OR
506                         		UPCASE(LEFT(TRIM(B.GROUP_CD))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_3))))
507                     		     );
508        	%LET RULE_TABLE = %STR(&HERCULES..TPGM_RECAP_BSRL_HS);
509        	%LET KEY_COLUMN = %STR(INSURANCE_CD);
510        %END;
511        
512        
513        
514        		PROC SQL;
515        		CREATE TABLE DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES AS
516        		SELECT A.*
517        		FROM CLT_SPEC_MORCLAIMS A, &RULE_TABLE. B
518        		WHERE B.BUS_RULE_TYPE_CD  = 2 AND B.PROGRAM_ID = 72 AND &HIERARCHY_CONS.;
519        		QUIT;
520        
521        
522        		DATA DATA_PND.CLT_SPEC_MORCLAIMS_&ADJ_ENGINE.;
11                                                         The SAS System                          11:47 Wednesday, February 6, 2013

523        		SET DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES;
524        		RUN;
525        
526        		DATA DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES_&ADJ_ENGINE.;
527        		SET DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES;
528        		RUN;
529        
530        
531        /*proc sql;*/
532        /*select count(*) into: cnt_ovrides*/
533        /*from morclaims_overrides;*/
534        /*quit;*/
535        
536        		%IF %SYSFUNC(EXIST(CLT_SPEC_MORCLAIMS)) %THEN %DO;
537        		PROC SQL;
538        		DELETE FROM CLT_SPEC_MORCLAIMS A
539        		WHERE A.MBR_GID NOT IN (SELECT DISTINCT B.MBR_GID
540        		FROM DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES B);
541        		QUIT;
542        		%END;
543        
544        /*	END AK ADDED CODE	*/
545        
546        
547              PROC SQL;
548              DELETE FROM CLT_SPEC_CLAIMS A
549        	  WHERE A.MBR_GID IN ( SELECT B.MBR_GID
550        							FROM CLT_SPEC_MORCLAIMS B
551        							WHERE A.MBR_GID = B.MBR_GID );
552              QUIT;
553        
554        
555             PROC SQL;		
556             INSERT INTO &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.
557             SELECT *
558             FROM CLT_SPEC_CLAIMS;
559             QUIT;
560        
561        /*END OF RG CODE*/
562        
563        		PROC SQL;
564        			SELECT COUNT(*) INTO :EDW_CLAIM_CNT
565        			FROM &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.;
566        		QUIT;
567        
568        		%PUT NOTE: CLAIM COUNT FROM &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT;
569        
570        			PROC SQL;
571        			CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
572        			EXECUTE
573        			(
574        				CREATE TABLE &ORA_TMP..TMP2_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. AS
575        			     SELECT PAYER_ID, MBR_GID, COUNT(*) AS CNT
576        				 FROM &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.
577        				 GROUP BY PAYER_ID, MBR_GID
578        				 ORDER BY PAYER_ID, MBR_GID
579        			) BY ORACLE;
580        			DISCONNECT FROM ORACLE;
12                                                         The SAS System                          11:47 Wednesday, February 6, 2013

581        			QUIT;
582        
583        			PROC SQL;
584        				SELECT COUNT(*) INTO :EDW_CLAIM_CNT2
585        				FROM &ORA_TMP..TMP2_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.
586        			QUIT;
587        			%PUT "NOTE: CLAIM COUNT FROM &ORA_TMP..TMP2_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT2";
588        		
589        			%IF &EDW_CLAIM_CNT2. >= 25000000
590        			%THEN
591        				%LET AVOID_IX_LKP = %STR(/1);
592        			%ELSE
593        				%LET AVOID_IX_LKP = %STR();
594        
595        			DATA _NULL_;
596        				CALL SYMPUT ('START_TM',PUT(%SYSFUNC(DATETIME()), DATETIME23.));
597        			RUN;
598        			%PUT NOTE: JOIN CLAIMS WITH MBR START TIME - &START_TM;
599        
600        
601        /*+SASDOC----------------------------------------------------------------------
602        |26FEB2009 - Hercules Version  2.1.2.02
603        |G. DUDLEY - ADDED THE "MBR_REUSE_RISK_FLG" TO THE QUERY TO EXTRACT MEMBER
604        |            DEMOGRAPHICS FROM THE V-MBR VIEW.  THIS WILL BE USED TO EXCLUDE
605        |            SUSPECT MEMBERS DUE TO POSSIBLE MEBER ID REUSE.
606        +------------------------------------------------------------------------SASDOC*/
607        			PROC SQL;
608        				CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
609        				EXECUTE
610        				(
611        					CREATE TABLE &ORA_TMP..TMP3_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. AS
612        					SELECT
613        			         CLAIM.*
614        							,MBR.QL_BNFCY_ID AS PT_BENEFICIARY_ID
615        							,MBR.QL_CARDHLDR_BNFCY_ID AS CDH_BENEFICIARY_ID
616        							,MBR.MBR_ID AS MBR_ID
617        							,MBR.MBR_FIRST_NM
618        							,MBR.MBR_LAST_NM				
619        							,MBR.ADDR_LINE1_TXT			
620        							,MBR.ADDR_LINE2_TXT			
621        							,MBR.ADDR_CITY_NM				
622        							,MBR.ADDR_ST_CD				
623        							,MBR.ADDR_ZIP_CD
624                      ,MBR.SRC_SUFFX_PRSN_CD	
625        					FROM 	
626        							&ORA_TMP..TMP2_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. CLAIM
627        							,&DSS_CLIN..V_MBR MBR
628        					WHERE
629        							MBR.PAYER_ID&AVOID_IX_LKP. &PAYER_ID_CONS.
630        						AND CLAIM.PAYER_ID&AVOID_IX_LKP. = MBR.PAYER_ID&AVOID_IX_LKP.
631        						AND CLAIM.MBR_GID&AVOID_IX_LKP. = MBR.MBR_GID&AVOID_IX_LKP.
632                    AND MBR.MBR_REUSE_RISK_FLG IS NULL
633        				) BY ORACLE;
634        			DISCONNECT FROM ORACLE;
635        			QUIT;
636        
637        			PROC SQL;
638        				SELECT COUNT(*) INTO :EDW_CLAIM_CNT2
13                                                         The SAS System                          11:47 Wednesday, February 6, 2013

639        				FROM &ORA_TMP..TMP3_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.
640        			QUIT;
641        			%PUT "NOTE: CLAIM COUNT FROM &ORA_TMP..TMP3_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT2";
642        
643        
644        		/** PERFORM PARTICIPANT EXCLUSIONS, IF ANY, BASED ON PROGRAM_ID BY GOING AGAINST
645        			PARTICIPANT_EXCLUSION TABLE IN
646        			/DATA/%LOWCASE(SAS&SYSMODE.1/HERCULES/PARTICIPANT_EXCLUSIONS DIRECTORY
647        			THIS IS DONE BY CALLING MACRO PARTICIPANT_EXCLUSIONS **/
648        
649        
650        			PROC SQL;
651        				CONNECT TO ORACLE(PATH=&GOLD PRESERVE_COMMENTS);
652        				EXECUTE
653        				(
654        					CREATE TABLE &ORA_TMP..CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. AS
655        					SELECT
656        			         CLAIM.*
657        							,MBR.PT_BENEFICIARY_ID
658        							,MBR.CDH_BENEFICIARY_ID
659        							,MBR.MBR_ID
660        							,MBR.MBR_FIRST_NM
661        							,MBR.MBR_LAST_NM				
662        							,MBR.ADDR_LINE1_TXT			
663        							,MBR.ADDR_LINE2_TXT			
664        							,MBR.ADDR_CITY_NM				
665        							,MBR.ADDR_ST_CD				
666        							,MBR.ADDR_ZIP_CD
667                      ,MBR.SRC_SUFFX_PRSN_CD	
668        
669        					FROM 	
670        							&ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. CLAIM
671        							,&ORA_TMP..TMP3_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. MBR
672        					WHERE
673        						    CLAIM.MBR_GID = MBR.MBR_GID
674        						AND CLAIM.PAYER_ID = MBR.PAYER_ID
675        					ORDER BY
676        							 CLAIM.MBR_GID
677        	  					    ,CLAIM.ALGN_LVL_GID_KEY
678        							,CLAIM.DRUG_GID
679        							,CLAIM.PHMCY_GID
680        							,CLAIM.PRCTR_GID
681        				) BY ORACLE;
682        			DISCONNECT FROM ORACLE;
683        			QUIT;
684        
685        
686        			PROC SQL;
687        				SELECT COUNT(*) INTO :EDW_CLAIM_CNT2
688        				FROM &ORA_TMP..CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.
689        			QUIT;
690        			%PUT "NOTE: FINAL CLAIM COUNT FROM &ORA_TMP..CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT2";
691        
692        
693        			DATA _NULL_;
694        				CALL SYMPUT ('END_TM',PUT(%SYSFUNC(DATETIME()), DATETIME23.));
695        			RUN;
696        			%PUT NOTE: JOIN CLAIMS WITH MBR END TIME - &END_TM;
14                                                         The SAS System                          11:47 Wednesday, February 6, 2013

697        
698        		%END;
699        
700        		%ELSE %DO;
701        
702        			FILENAME MYMAIL EMAIL 'QCPAP020@DALCDCP';
703        		   		DATA _NULL_;
704        		     		FILE MYMAIL
705        		         	TO=(&EMAIL_USR)
706        		         	SUBJECT="CLIENT SPECIFIC EXTERNAL DRUG LIST" ;
707        					PUT 'HI,' ;
708        		     		PUT / "THIS IS AN AUTOMATICALLY GENERATED MESSAGE TO INFORM YOU THAT CLAIMS_PULL_EDW MACRO FOR CLIENT SPECIFIC
708      ! DRUG LIST RETURNED 0 ROWS FOR ADJ &ADJ_ENGINE.";
709        					PUT / 'PLEASE LET US KNOW OF ANY QUESTIONS.';
710        		    		PUT / 'THANKS,';
711        		     		PUT / 'HERCULES PRODUCTION SUPPORTS';
712        		   		RUN;
713        
714        /*			%LET ERR_FL = 1;*/
715        /**/
716        /*			%ON_ERROR( ACTION=ABORT*/
717        /*	          ,EM_TO=&PRIMARY_PROGRAMMER_EMAIL*/
718        /*	          ,EM_SUBJECT=HCE SUPPORT: NOTIFICATION OF ABEND INITIATIVE_ID &INITIATIVE_ID*/
719        /*	          ,EM_MSG=%STR(CLAIMS_PULL_EDW MACRO RETURNED 0 ROWS FOR ADJ &ADJ_ENGINE. */
720        /*                           SO THE EXECUTION OF THE MAILING PROGRAM HAS BEEN FORCED TO ABORT));*/
721                  options mprint mprintnest mlogic mlogicnest symbolgen source2;
722        
723        		%END;
724        
725        /*		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);*/
726        /*		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);*/
727        /*		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP2_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);*/
728        /*		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..TMP3_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE.);*/
729        /*		%DROP_ORACLE_TABLE(TBL_NAME = &ORA_TMP..CLT_LST_&INITIATIVE_ID._&ADJ_ENGINE.);*/
730        
731        /*			%LOAD_PARTICIPANT_EXCLUSION;*/
732        /*			%PARTICIPANT_EXCLUSIONS(TBL_NAME_IN = &ORA_TMP..TMP3_CLAIMS_PULL_&INITIATIVE_ID._&ADJ_ENGINE.);*/
733        
734        		%END;
735        
736        	%MEND EDW_CLAIMS;
737        
738        	%IF &RX_ADJ. = 1 AND %SYSFUNC(EXIST(&CLIENT_DRUG_TABLE_RX.)) %THEN %DO;
739        		%LET SRC_SYS_CD = %STR(X);
740        		%LET PAYER_ID_CONS = %STR(< 100000);
741        		%LET REFILL_QTY = %STR(,VCLM.SBMTD_REFIL_ATHZD AS REFILL_FILL_QY);
742        		%LET CARRIER_FIELD = CLIENT_LEVEL_1;
743        		%EDW_CLAIMS(ADJ_ENGINE = RX);
744        	%END;
745        
746        	%IF &RE_ADJ. = 1 AND %SYSFUNC(EXIST(&CLIENT_DRUG_TABLE_RE.)) %THEN %DO;
747        		%LET SRC_SYS_CD = %STR(R);
748        		%LET PAYER_ID_CONS = %STR(BETWEEN 500000 AND 2000000);
749        		%LET REFILL_QTY = %STR(,VCLM.ATHZD_REFIL_QTY AS REFILL_FILL_QY);
750        		%LET CARRIER_FIELD = CLIENT_LEVEL_2;
751        		%EDW_CLAIMS(ADJ_ENGINE = RE);
752        	%END;
753        
15                                                         The SAS System                          11:47 Wednesday, February 6, 2013

754        %MEND CLAIMS_PULL_PROACTIVE_CLTDRG;
755        
756        
757        /********************** EXAMPLE CALL *******************************/
758        
759        %set_sysmode(mode = sit2);
NOTE: Running from Hercules Macro library
NOTE: &SYSMODE=sit2
NOTE: &PRG_ROOT=/PRG/sassit2
NOTE: &DATA_ROOT=/DATA/sassit2
NOTE: &RPT_ROOT=/REPORTS_DOC/sit2
760        OPTIONS SYSPARM='initiative_id=8301 phase_seq_nb=1';
761        OPTIONS MLOGIC MPRINT SOURCE2;
762        %INCLUDE "/herc&sysmode/prg/hercules/hercules_in.sas";
NOTE: %INCLUDE (level 1) file /hercsit2/prg/hercules/hercules_in.sas is file /hercsit2/prg/hercules/hercules_in.sas.
763       +/*HEADER------------------------------------------------------------------------
764       +|
765       +| PROGRAM:  hercules_in.sas
766       +|
767       +| LOCATION: /PRG/sas&sysmode.1/hercules
768       +|
769       +| PURPOSE:  To define a standard environment and common parameters for Hercules
770       +|           Communication Engine programs.
771       +|
772       +|           Including:
773       +|           1) Parse &SYSPARM to get INITIATIVE_ID and PHASE_SEQ_NB
774       +|           2) Query HERCULES setup tables, and resolve macro parameters for the
775       +|              initiative. There are:
776       +|              SYSMODE
777       +|              PROGRAM_ID,          TASK_ID,            EXT_DRUG_LIST_IN,
778       +|              DFLT_INCLSN_IN,      DOCUMENT_LOC_CD,    PRT_CPNT_PARM_IN,
779       +|              PRESCRIBER_PARM_IN,  TRGT_RECIPIENT_CD,  DSPLY_CLT_SETUP_CD,
780       +|              DRG_DEFINITION_CD,   Email_USR,          EMAIL_IT,
781       +|              PRG_DIR,             DATA_DIR,           RPT_DIR,   LOG_DIR,
782       +|              TITLE_TX,            HERCULES ,          INITIATIVE_ID,
783       +|              DESTINATION_CD       FTP_HOST,           FTP_USER,
784       +|              FTP_PASS,            CLAIM_HIS_TBL,      TABLE_PREFIX  DB2_TMP,
785       +|              LETTER_TYPE_QY_CD    OVRD_CLT_SETUP_IN
786       +|           3) Define system mode and global directory and libname.
787       +|           4) Define destination (macro string) for file release including,
788       +|              pending files, final files and email.
789       +|
790       +|
791       +| INPUT:    Parameters:  SYSPARM INITIATIVE_ID, PHASE_SEQ_NB, MODE.
792       +|           data source: TINITIATIVE,      TPROGRAM,          TCMCTN_PROGRAM,
793       +|                        TPROGRAM_TASK,    TPHASE_RVR_FILE,   TCMCTN_ENGINE_CD,
794       +|                        ADM_LKP.ANALYTICS_USERS
795       +|
796       +| OUTPUT:   define HERCULES global macro parameters and setup the environment.
797       +|
798       +| USAGE:    The program will be called at the begining of the program level
799       +|           parameter file using %include. The SYSPARM must be available either
800       +|           through the nightly scheduling program or by specifying with OPTIONS:
801       +|           e.g. OPTIONS SYSPARM='408 1', where 408 is the initiative_id and
802       +|           1 is the phase_seq_nb.
803       +|           The initiative_id specified must be a valid initiative_id and available
804       +|           TINITIATIVE table.
805       +|
16                                                         The SAS System                          11:47 Wednesday, February 6, 2013

806       +| RS - 11/2007 - User's autoexec.sas must be contain the following
807       +| statement for each SAS environment.  This will cause SAS to look for MACROS in
808       +| Hercules macro library first.
809       +|%ADD_TO_MACROS_PATH(NEW_MACRO_PATH=/PRG/sasXXXX1/hercules/macros,New_path_position=FRONT);
810       +| where XXXX is the directory containing the code for that environment.
811       ++--------------------------------------------------------------------------------
812       +| HISTORY:  SEP, 2003 - J. Hou & Y. Vilk ORIGINAL
813       +|           19MAR2004 - J.Chen - Commented out hard-coded %LET statement for
814       +|                       sysmode
815       +|           AUG 2004 - resolving DOCUMENT_LOC_CD from table TPROGRAM_TASK instead of
816       +|                       TCMCTN_PROGRAM
817       +|           Hercules Version  2.0.1
818       +|           09NOV2007 - Ron Smith / Greg Dudley
819       +|                       Modified to support ADT and QAT environments
820       +|           07MAR2008 - N.WILLIAMS   - Hercules Version  2.0.01
821       +|                                      1. Initial code migration into Dimensions
822       +|                                         source safe control tool.
823       +|                                      2. Added references new program path.
824       +|Hercules Version  2.1.01
825       +| 22AUG2008 - G. Dudley
826       +|  1. Added the assignment of the macro variable DFL_CLT_INC_EXU_IN for new Client Setup
827       +|  2. Added the assignment of the macro variable DSPLY_CLT_SETUP_CD for new Client Setup
828       +|  3. Added assignment of Oracle Schema DSS_CLIN
829       +| 21OCT2008 - SR
830       +| 			-	Changed the assignment of macro variable ora_tmp from &user to dss_herc
831       +|           - Hercules Version  2.1.2.01
832       +|Hercules Version  2.1.3
833       +| 15MAY2012 - P. Landis
834       +|           - Modified to reference new hercdev2 server for testing procedures
835       ++------------------------------------------------------------------------HEADER*/
836       +
837       +*%include "/herc&sysmode./prg/hercules/macros/set_sysmode.sas" / nosource2;
838       +/*options mprint mprintnest mlogic mlogicnest symbolgen source2;*/
839       +
840       +
841       +%MACRO HERCULES_IN;
842       +
843       +  %*SASDOC----------------------------------------------------------------------
844       +  | Added GLOBAL variables for datasources.  Production variables will be set
845       +  | based on environment program is running in.
846       +  | 09NOV2007 - RS.
847       +  +---------------------------------------------------------------------SASDOC*;
848       +   *CCW4 - CC_RE_MIGR_IND ADDED;
849       +
850       +  %GLOBAL PROGRAM_ID        TASK_ID            	EXT_DRUG_LIST_IN
851       +        DFLT_INCLSN_IN      DOCUMENT_LOC_CD    	PRT_CPNT_PARM_IN
852       +        PRESCRIBER_PARM_IN  TRGT_RECIPIENT_CD  	DSPLY_CLT_SETUP_CD
853       +        DRG_DEFINITION_CD   EMAIL_USR          	EMAIL_IT
854       +        PRG_DIR             DATA_DIR           	RPT_DIR   LOG_DIR
855       +        TITLE_TX            HERCULES           	INITIATIVE_ID
856       +        DESTINATION_CD      FTP_HOST           	FTP_USER
857       +        FTP_PASS            SYSMODE            	CLAIM_HIS_TBL
858       +        TABLE_PREFIX        DB2_TMP            	LETTER_TYPE_QY_CD
859       +        ADHOC_DIR           CLAIMSA            	OVRD_CLT_SETUP_IN
860       +        DATA_CLEANSING_CD       				CC_RE_MIGR_IND
861       +	    UDBSPRP				UDBDWP				SUMMARY
862       +		UDBSPRP_DB          USER_UDBSPRP	   	PASSWORD_UDBSPRP
863       +		UDBDWP_DB			USER_UDBDWP		   	PASSWORD_UDBDWP
17                                                         The SAS System                          11:47 Wednesday, February 6, 2013

864       +		QL_ADJ				RX_ADJ				RE_ADJ
865       +		ORA_TMP				USER_EDW			PASSWORD_EDW
866       +		GOLD				DFL_CLT_INC_EXU_IN  DSS_CLIN
867       +		DSPLY_CLT_SETUP_CD  EDW_FTP_HOST EDW_FTP_USER EDW_FTP_PASS
868       +		DWHM DSS_HM GOLD_HA;
869       +
870       +  *** Assign Claim History Table name ***;
871       +  %LET CLAIM_HIS_TBL=TRXCLM_BASE;
872       +
873       +  %*SASDOC----------------------------------------------------------------------
874       +  | Determine the system mode based on the environment variable - $pwd
875       +  | 09NOV2007 - RS - Note: set_sysmode now running from hercules lib in order
876       +  | to support QAT environment
877       +  +---------------------------------------------------------------------SASDOC*;
878       +/*  %set_sysmode(mode=dev2);*/
879       +
880       +  /*--------------------------------------------------------------------------------------------------*/
881       +  /* PRODUCTION ENVIRONMENT                                                                           */
882       +  /*--------------------------------------------------------------------------------------------------*/
883       +  %IF &SYSMODE=prod %THEN %DO; /* 07MAR2008 - N.WILLIAMS */
884       +  	/*---------------- setup schemas ----------------*/
885       +	%LET HERCULES=HERCULES;
886       +	%LET QCPAP020=QCPAP020;
887       +	%LET CLAIMSA=CLAIMSA;
888       +	%LET CLAIMSP=CLAIMSP;
889       +	%LET HERCULEP=HERCULEP;
890       + 	%LET SUMMARY=SUMMARY;
891       +  	
892       +  	/*---------------- setup parametes for database LIBNAMES - Based on DATASOURCES */
893       + 	/*---------------- ZEUS ----------------*/
894       +	%LET UDBSPRP=&UDBSPRP;
895       +	%LET UDBSPRP_DB=UDBSPRP;
896       +	%LET USER_UDBSPRP=&USER_UDBSPRP;
897       +	%LET PASSWORD_UDBSPRP=&PASSWORD_UDBSPRP;
898       +	
899       +  	/*---------------- CDW ----------------*/
900       +	%LET UDBDWP=&UDBDWP;
901       +	%LET UDBDWP_DB=UDBDWP;
902       +	%LET USER_UDBDWP=&USER_UDBDWP;
903       +	%LET PASSWORD_UDBDWP=&PASSWORD_UDBDWP;
904       +	
905       +  	/*---------------- EDW ----------------*/
906       +	%LET DSS_CLIN=DSS_CLIN;
907       +	%LET USER_EDW=&USER_GOLD;
908       +	%LET PASSWORD_EDW=&PASSWORD_GOLD;
909       +	%LET GOLD=GOLD user=&USER_EDW pw=&PASSWORD_EDW;
910       +	%LET DSS_HM = DSS_HM;
911       +	%LET DWHM = DWHM;
912       +	
913       +  	/*---------------- LIBNAME Definitions ----------------*/
914       +	LIBNAME CLAIMSP  DB2 DSN=&UDBDWP  SCHEMA=&CLAIMSP  DEFER=YES;
915       +	LIBNAME HERCULEP DB2 DSN=&UDBDWP  SCHEMA=&HERCULEP DEFER=YES;
916       +	LIBNAME HERCULES DB2 DSN=&UDBSPRP SCHEMA=&HERCULES DEFER=YES;
917       +	LIBNAME QCPAP020 DB2 DSN=&UDBSPRP SCHEMA=&QCPAP020 DEFER=YES;
918       +	LIBNAME CLAIMSA  DB2 DSN=&UDBSPRP SCHEMA=&CLAIMSA  DEFER=YES;
919       +	LIBNAME SUMMARY  DB2 DSN=&UDBSPRP SCHEMA=&SUMMARY  DEFER=YES;
920       +	LIBNAME DSS_CLIN ORACLE SCHEMA=&DSS_CLIN PATH=&GOLD;
921       +	
18                                                         The SAS System                          11:47 Wednesday, February 6, 2013

922       +  	/*---------------- Health Alert Credentials ----------------*/	
923       +	%LET GOLD_HA=GOLD %substr(&GOLD02., %index(&GOLD02., USER));	
924       +	LIBNAME DSS_HM   ORACLE SCHEMA=&DSS_HM   PATH=&GOLD_HA DEFER=YES ;
925       +	LIBNAME DWHM     ORACLE SCHEMA=&DWHM     PATH=&GOLD_HA DEFER=YES ;
926       +
927       +  %END;
928       +  /*--------------------------------------------------------------------------------------------------*/
929       +  /* QAT ENVIRONMENT                                                                                  */
930       +  /*--------------------------------------------------------------------------------------------------*/
931       +  %IF &SYSMODE=sit3 %THEN %DO;
932       +  	/*---------------- setup schemas ----------------*/
933       +	%LET HERCULES=HERCULES;
934       +	%LET QCPAP020=QCPAP020;
935       +	%LET CLAIMSA=CLAIMSA;
936       +	%LET CLAIMSP=CLAIMSP;
937       +	%LET HERCULEP=HERCULET; /* Test CDW */
938       +	%LET SUMMARY=SUMMARY;
939       +	
940       +  	/*---------------- setup parametes for database LIBNAMES - Based on DATASOURCES */
941       +  	/*---------------- ZEUS ----------------*/
942       +	%LET UDBSPRP=&ANARPTQA;
943       +	%LET UDBSPRP_DB=ANARPTQA;
944       +	%LET USER_UDBSPRP=&USER_ANARPTQA;
945       +	%LET PASSWORD_UDBSPRP=&PASSWORD_ANARPTQA;
946       +	
947       +  	/*---------------- CDW ----------------*/
948       +	%LET UDBDWP=&UDBDWT;
949       +	%LET UDBDWP_DB=UDBDWT;
950       +	%LET USER_UDBDWP=&USER_UDBDWT;
951       +	%LET PASSWORD_UDBDWP=&PASSWORD_UDBDWT;
952       +	
953       +  	/*---------------- EDW ----------------*/
954       +	%LET DSS_CLIN=DSS_CLIN;
955       +	%LET USER_EDW=&USER_GOLD;
956       +	%LET PASSWORD_EDW=&PASSWORD_GOLD;
957       +	%LET GOLD=GOLD user=&USER_EDW pw=&PASSWORD_EDW;
958       +	%LET DSS_HM = DSS_HM;
959       +	%LET DWHM = DWHM;
960       +	
961       +  	/*---------------- LIBNAME Definitions ----------------*/
962       +	LIBNAME CLAIMSP  DB2 DSN=&UDBDWP  SCHEMA=&CLAIMSP  DEFER=YES;
963       +	LIBNAME HERCULEP DB2 DSN=&UDBDWP  SCHEMA=&HERCULEP DEFER=YES;
964       +	LIBNAME HERCULES DB2 DSN=&UDBSPRP SCHEMA=&HERCULES DEFER=YES;
965       +	LIBNAME QCPAP020 DB2 DSN=&UDBSPRP SCHEMA=&QCPAP020 DEFER=YES;
966       +	LIBNAME CLAIMSA  DB2 DSN=&UDBSPRP SCHEMA=&CLAIMSA  DEFER=YES;
967       +	LIBNAME SUMMARY  DB2 DSN=&UDBSPRP SCHEMA=&SUMMARY  DEFER=YES;
968       +	LIBNAME DSS_CLIN ORACLE SCHEMA=&DSS_CLIN PATH=&GOLD;
969       +	
970       +  	/*---------------- Health Alert Credentials ----------------*/	
971       +	%let GOLD_HA=&OAK.;
972       +	LIBNAME DSS_HM   ORACLE SCHEMA=&DSS_HM   PATH=&GOLD_HA DEFER=YES ;
973       +	LIBNAME DWHM     ORACLE SCHEMA=&DWHM     PATH=&GOLD_HA DEFER=YES ;
974       +  %END;
975       +  /*--------------------------------------------------------------------------------------------------*/
976       +  /* TEST ENVIRONMENT                                                                                 */
977       +  /*--------------------------------------------------------------------------------------------------*/
978       +  %IF &SYSMODE=dev2 or &SYSMODE=sit2  %THEN %DO;
979       +  	/*---------------- setup schemas ----------------*/
19                                                         The SAS System                          11:47 Wednesday, February 6, 2013

980       +	%LET HERCULES=HERCULES;
981       +	%LET QCPAP020=QCPAP020;
982       +	%LET CLAIMSA=CLAIMSA;
983       +	%LET CLAIMSP=CLAIMSP;
984       +	%LET HERCULEP=HERCULEP;
985       + 	%LET SUMMARY=SUMMARY;
986       +  	
987       +  	/*---------------- setup parametes for database LIBNAMES - Based on DATASOURCES */
988       + 	/*---------------- ZEUS ----------------*/
989       +/*	%LET UDBSPRP=&UDBSPRP;*/
990       +/*	%LET UDBSPRP_DB=UDBSPRP;*/
991       +	%LET UDBSPRP=&ANARPTAD;
992       +	%LET UDBSPRP_DB=ANARPTAD;
993       +	%LET USER_UDBSPRP=&USER_UDBSPRP;
994       +	%LET PASSWORD_UDBSPRP=&PASSWORD_UDBSPRP;
995       +	
996       +  	/*---------------- CDW ----------------*/
997       +	%LET UDBDWP=&UDBDWP;
998       +	%LET UDBDWP_DB=UDBDWP;
999       +	%LET USER_UDBDWP=&USER_UDBDWP;
1000      +	%LET PASSWORD_UDBDWP=&PASSWORD_UDBDWP;
1001      +	
1002      +  	/*---------------- EDW ----------------*/
1003      +	%LET DSS_CLIN=DSS_CLIN;
1004      +	%LET USER_EDW=&USER_GOLD;
1005      +	%LET PASSWORD_EDW=&PASSWORD_GOLD;
1006      +	%LET GOLD=GOLD user=&USER_EDW pw=&PASSWORD_EDW;
1007      +	%LET DSS_HM = DSS_HM;
1008      +	%LET DWHM = DWHM;
1009      +	
1010      +  	/*---------------- LIBNAME Definitions ----------------*/
1011      +	LIBNAME CLAIMSP  DB2 DSN=&UDBDWP  SCHEMA=&CLAIMSP  DEFER=YES;
1012      +	LIBNAME HERCULEP DB2 DSN=&UDBDWP  SCHEMA=&HERCULEP DEFER=YES;
1013      +	LIBNAME HERCULES DB2 DSN=&UDBSPRP SCHEMA=&HERCULES DEFER=YES;
1014      +	LIBNAME QCPAP020 DB2 DSN=&UDBSPRP SCHEMA=&QCPAP020 DEFER=YES;
1015      +	LIBNAME CLAIMSA  DB2 DSN=&UDBSPRP SCHEMA=&CLAIMSA  DEFER=YES;
1016      +	LIBNAME SUMMARY  DB2 DSN=&UDBSPRP SCHEMA=&SUMMARY  DEFER=YES;
1017      +	LIBNAME DSS_CLIN ORACLE SCHEMA=&DSS_CLIN PATH=&GOLD;
1018      +	
1019      +  	/*---------------- Health Alert Credentials ----------------*/	
1020      +	%LET GOLD_HA=GOLD %substr(&GOLD02., %index(&GOLD02., USER));	
1021      +	LIBNAME DSS_HM   ORACLE SCHEMA=&DSS_HM   PATH=&GOLD_HA DEFER=YES ;
1022      +	LIBNAME DWHM     ORACLE SCHEMA=&DWHM     PATH=&GOLD_HA DEFER=YES ;
1023      +  %END;
1024      +
1025      +
1026      +  %PUT NOTE: USER_EDW = &USER_EDW;
1027      +  %PUT NOTE: PASSWORD_EDW = &PASSWORD_EDW;
1028      +  %PUT NOTE: GOLD = &GOLD;
1029      +  %PUT NOTE: GOLD_HA = &GOLD_HA;
1030      +
1031      +  LIBNAME AUX_TAB "/herc&sysmode/data/hercules/auxtables";
1032      +  LIBNAME ADM_LKP "/herc&sysmode/data/Admin/auxtable";
1033      +
1034      +
1035      +  %GETPARMS;
1036      +
1037      +  %IF %LENGTH(&INITIATIVE_ID)=0 %THEN %DO;
20                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1038      +    %PUT WARNING: INITIATIVE_ID IS NOT SUPPLIED.;
1039      +    %GOTO EXIT;
1040      +  %END;
1041      +
1042      +  %*SASDOC----------------------------------------------------------------------
1043      +  | To start an initiative, an INITIATIVE_id will be given, the code needs to
1044      +  | resolve the associated PROGRAM_ID, TASK_ID, PHASE_SEQ_NB based on the setup
1045      +  | of TINITIATIVE and TINITIATIVE_PHASE tables.
1046      +  +---------------------------------------------------------------------SASDOC*;
1047      +  PROC SQL NOPRINT;
1048      +    CREATE   TABLE HERC_PARMS  AS
1049      +    SELECT   A.PROGRAM_ID,
1050      +             A.TASK_ID,
1051      +             '%nrbquote('||trim(left(A.TITLE_TX))||")" as title_tx,
1052      +             A.TRGT_RECIPIENT_CD,
1053      +             A.EXT_DRUG_LIST_IN,
1054      +             A.OVRD_CLT_SETUP_IN,
1055      +             B.DFLT_INCLSN_IN,
1056      +             C.DATA_CLEANSING_CD,
1057      +             C.DESTINATION_CD,
1058      +             D.DOCUMENT_LOC_CD,
1059      +             D.PRTCPNT_PARM_IN,
1060      +             D.PRESCRIBER_PARM_IN,
1061      +             D.DSPLY_CLT_SETUP_CD,
1062      +             D.DRG_DEFINITION_CD,
1063      +             D.LETTER_TYPE_QY_CD,
1064      +			 D.DFL_CLT_INC_EXU_IN,
1065      +			 D.DSPLY_CLT_SETUP_CD
1066      +
1067      +    FROM     &HERCULES..TINITIATIVE A,
1068      +             &CLAIMSA..TPROGRAM B,
1069      +             &HERCULES..TCMCTN_PROGRAM C,
1070      +             &HERCULES..TPROGRAM_TASK D
1071      +
1072      +    WHERE    A.INITIATIVE_ID = &INITIATIVE_ID  AND
1073      +             A.PROGRAM_ID = B.PROGRAM_ID       AND
1074      +             A.PROGRAM_ID = C.PROGRAM_ID       AND
1075      +             A.PROGRAM_ID = D.PROGRAM_ID       AND
1076      +             A.TASK_ID = D.TASK_ID;
1077      +
1078      +    SELECT COUNT(*) INTO :INIT_CNT
1079      +    FROM HERC_PARMS;
1080      +  QUIT;
1081      +
1082      +  %IF &INIT_CNT=0 %THEN %DO;
1083      +    %put;
1084      +	%put;
1085      +    %PUT WARNING: INITIATIVE_ID &initiative_id CAN NOT BE RESOLVED FROM RELEVENT TABLES.;
1086      +    %PUT WARNING: Please correct the initiative_id or specify your own global setup.;
1087      +	%put;
1088      +	%put;
1089      +  %end;
1090      +
1091      +  %IF &INIT_CNT=0 %THEN %GOTO EXIT;
1092      +
1093      +  %LET TABLE_PREFIX=T_%CMPRES(&INITIATIVE_ID)_%CMPRES(&PHASE_SEQ_NB);
1094      +
1095      +  DATA _NULL_;
21                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1096      +    SET HERC_PARMS;
1097      +    CALL SYMPUT('PROGRAM_ID', COMPRESS(PUT(PROGRAM_ID, 4.)));
1098      +    CALL SYMPUT('TASK_ID', COMPRESS(PUT(TASK_ID, 4.)));
1099      +    CALL SYMPUT('TITLE_TX', TRIM(LEFT(TITLE_TX)));
1100      +    CALL SYMPUT('TRGT_RECIPIENT_CD', PUT(TRGT_RECIPIENT_CD,1.));
1101      +    CALL SYMPUT('EXT_DRUG_LIST_IN', PUT(EXT_DRUG_LIST_IN,1.));
1102      +    CALL SYMPUT('OVRD_CLT_SETUP_IN', PUT(OVRD_CLT_SETUP_IN,1.));
1103      +    CALL SYMPUT('DFLT_INCLSN_IN', PUT(DFLT_INCLSN_IN,1.));
1104      +    CALL SYMPUT('DESTINATION_CD', PUT(DESTINATION_CD,1.));
1105      +    CALL SYMPUT('DATA_CLEANSING_CD', PUT(DATA_CLEANSING_CD,1.));
1106      +    CALL SYMPUT('DOCUMENT_LOC_CD', COMPRESS(PUT(DOCUMENT_LOC_CD,4.)));
1107      +    CALL SYMPUT('PRTCPNT_PARM_IN', PUT(PRTCPNT_PARM_IN,1.));
1108      +    CALL SYMPUT('PRESCRIBER_PARM_IN', PUT(PRESCRIBER_PARM_IN,1.));
1109      +    CALL SYMPUT('DSPLY_CLT_SETUP_CD', PUT(DSPLY_CLT_SETUP_CD,1.));
1110      +    CALL SYMPUT('DRG_DEFINITION_CD', PUT(DRG_DEFINITION_CD,1.));
1111      +    CALL SYMPUT('LETTER_TYPE_QY_CD', PUT(LETTER_TYPE_QY_CD,1.));
1112      +  	CALL SYMPUT('DFL_CLT_INC_EXU_IN', PUT(DFL_CLT_INC_EXU_IN,1.));
1113      +  	CALL SYMPUT('DSPLY_CLT_SETUP_CD', PUT(DSPLY_CLT_SETUP_CD,1.));
1114      +  RUN;
1115      +
1116      +  PROC TRANSPOSE DATA=HERC_PARMS(DROP=PROGRAM_ID TASK_ID)
1117      +                  OUT=TRNS_PARMS(DROP=_LABEL_)
1118      +                 NAME=CODE_NAME
1119      +               PREFIX=CODE;
1120      +  RUN;
1121      +
1122      +  PROC SQL NOPRINT;
1123      +    CREATE TABLE CMCTN_CD_DECODE AS
1124      +    SELECT C.CODE_NAME, C.CODE1, LONG_TX AS ENGIN_DECODE
1125      +    FROM   (SELECT A.*, B.*
1126      +            FROM   &HERCULES..TCMCTN_ENGINE_CD A,
1127      +                   &HERCULES..TCODE_COLUMN_XREF B
1128      +            WHERE  A.CMCTN_ENGN_TYPE_CD=B.CMCTN_ENGN_TYPE_CD) AS AB
1129      +    RIGHT JOIN TRNS_PARMS C
1130      +    ON    AB.COLUMN_NM=C.CODE_NAME AND
1131      +          AB.CMCTN_ENGINE_CD=C.CODE1;
1132      +  QUIT;
1133      +
1134      +  DATA _NULL_;
1135      +    SET CMCTN_CD_DECODE END=ENDFILE;
1136      +    IF ENGIN_DECODE= '' THEN DO;
1137      +      IF CODE1=1 THEN ENGIN_DECODE='APPLICABLE';
1138      +      ELSE IF CODE1=0 THEN ENGIN_DECODE='n/a';
1139      +    END;
1140      +    IF _N_=1 THEN DO;
1141      +      PUT "NOTE:";
1142      +      PUT @7 "PARAMETER SUMMARY FOR INITIATIVE &INITIATIVE_ID - &TITLE_TX (PROGRAM %cmpres(&PROGRAM_ID))";
1143      +      PUT @7 55*'_';
1144      +      PUT ' ';
1145      +      PUT @7 'CODE_NAME' @28 'CODE' @35 'ENGIN_DECODE';
1146      +      PUT @7 10*'-' @28 5*'-' @35 14*'-';
1147      +    END;
1148      +    PUT @7 CODE_NAME $20. @28 CODE1 3. @35 ENGIN_DECODE $35.;
1149      +    IF ENDFILE THEN DO;
1150      +      PUT @7 55*'_';
1151      +      PUT 'NOTE:';
1152      +      PUT ' ';
1153      +    END;
22                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1154      +  RUN;
1155      +
1156      +  proc sql;
1157      +      drop table CMCTN_CD_DECODE;
1158      +      drop table herc_parms;
1159      +      drop table trns_parms;
1160      +  quit;
1161      +
1162      +
1163      +  %*SASDOC----------------------------------------------------------------------
1164      +  | Define program level libname and fileref for data and file input/output.
1165      +  +----------------------------------------------------------------------SASDOC*;
1166      +  %IF %lowcase(&SYSMODE)=prod %THEN %DO;
1167      +  %LET DB2_TMP=TMP&PROGRAM_ID; /* 07MAR2008 - N.WILLIAMS */
1168      +/*	%LET ORA_TMP=&USER;*/
1169      +    %LET ORA_TMP=DSS_HERC; /** SR 21OCT2008 **/
1170      +  %END;
1171      +  %ELSE %DO;
1172      +	%LET DB2_TMP=TMP&PROGRAM_ID;
1173      +/*	%LET ORA_TMP=&USER;*/
1174      +    %LET ORA_TMP=DSS_HERC; /** SR 21OCT2008 **/
1175      +  %END;
1176      +
1177      +
1178      +  LIBNAME &DB2_TMP DB2 DSN=&UDBSPRP SCHEMA=&DB2_TMP DEFER=YES;
1179      +  LIBNAME &ORA_TMP ORACLE SCHEMA=&ORA_TMP PATH=&GOLD;
1180      +  %put *** folder assignments ***;
1181      +  %put *** folder assignments ***;
1182      +  %put *** folder assignments ***;
1183      +  %LET ADHOC_DIR=/herc&sysmode/adhoc/hercules;
1184      +  %LET PRG_DIR=/herc&sysmode/prg/hercules/%CMPRES(&PROGRAM_ID);
1185      +  %LET DATA_DIR=/herc&sysmode/data/hercules/%CMPRES(&PROGRAM_ID);
1186      +  %LET RPT_DIR=/herc&sysmode/report_doc/hercules/%CMPRES(&PROGRAM_ID);
1187      +  %LET LOG_DIR=/herc&sysmode/data/hercules/%CMPRES(&PROGRAM_ID)/logs;
1188      +
1189      + %chk_dir(&ADHOC_DIR.);
1190      + %chk_dir(&RPT_DIR.);
1191      + %chk_dir(&PRG_DIR.);
1192      + %chk_dir(&LOG_DIR.);
1193      + %chk_dir(&DATA_DIR./pending);
1194      + %chk_dir(&DATA_DIR./results);
1195      + %chk_dir(&DATA_DIR./archive);
1196      +
1197      +  FILENAME PROG "&PRG_DIR.";
1198      +  FILENAME RPT "&RPT_DIR.";
1199      +  LIBNAME DATA_PND "&DATA_DIR/pending";
1200      +  LIBNAME DATA_RES "&DATA_DIR/results";
1201      +  LIBNAME DATA_ARC "&DATA_DIR/archive";
1202      +  %*SASDOC----------------------------------------------------------------------
1203      +  | Create general email receipient list.
1204      +  +----------------------------------------------------------------------SASDOC*;
1205      +  PROC SQL NOPRINT;
1206      +    %IF %LENGTH(&INITIATIVE_ID)>0 %THEN %DO;
1207      +      SELECT HSU_USR_ID INTO: HSU_USR_ID
1208      +        FROM &HERCULES..TINITIATIVE_PHASE
1209      +       WHERE INITIATIVE_ID=(&INITIATIVE_ID);
1210      +
1211      +      SELECT QUOTE(TRIM(EMAIL)) INTO :EMAIL_USR SEPARATED BY ' '
23                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1212      +        FROM ADM_LKP.ANALYTICS_USERS
1213      +       WHERE UPCASE(QCP_ID) IN ("%UPCASE(&HSU_USR_ID)");
1214      +    %END;
1215      +    %ELSE %PUT %NRSTR(WARNING: &HSU_USR_ID and &EMAIL_USR cannot be resolved without an INITIATIVE_ID.);
1216      +
1217      +    SELECT QUOTE(TRIM(EMAIL)) INTO :EMAIL_IT SEPARATED BY ' '
1218      +      FROM ADM_LKP.ANALYTICS_USERS
1219      +     WHERE UPCASE(QCP_ID) = "&USER";
1220      +    QUIT;
1221      +
1222      +
1223      +  %*SASDOC----------------------------------------------------------------------
1224      +  | define file output FTP destinations
1225      +  +----------------------------------------------------------------------SASDOC*;
1226      +  DATA _NULL_;
1227      +    SET AUX_TAB.SET_FTP(WHERE=(DESTINATION_CD=&DESTINATION_CD));
1228      +    CALL SYMPUT('FTP_HOST', TRIM(LEFT(FTP_HOST)) );
1229      +    CALL SYMPUT('FTP_USER', TRIM(LEFT(FTP_USER)) );
1230      +    CALL SYMPUT('FTP_PASS', TRIM(LEFT(FTP_PASS)) );
1231      +  RUN;
1232      +
1233      +  %*SASDOC----------------------------------------------------------------------
1234      +  | define EDW FTP destinations
1235      +  +----------------------------------------------------------------------SASDOC*;
1236      +  DATA _NULL_;
1237      +    SET AUX_TAB.SET_FTP(WHERE=(DESTINATION_ROOT_DIR=upcase("&SYSMODE")
1238      +                           and DESTINATION_CD in (98,99)));
1239      +    CALL SYMPUT('EDW_FTP_HOST', TRIM(LEFT(FTP_HOST)) );
1240      +    CALL SYMPUT('EDW_FTP_USER', TRIM(LEFT(FTP_USER)) );
1241      +    CALL SYMPUT('EDW_FTP_PASS', TRIM(LEFT(FTP_PASS)) );
1242      +  RUN;
1243      +
1244      +  %put NOTE: EDW_FTP_HOST = &EDW_FTP_HOST. ;
1245      +  %put NOTE: EDW_FTP_USER = &EDW_FTP_USER. ;
1246      +  %put NOTE: EDW_FTP_PASS = &EDW_FTP_PASS. ;
1247      +
1248      +  %*SASDOC----------------------------------------------------------------------
1249      +  | definition of Health Alert credentials
1250      +  +----------------------------------------------------------------------SASDOC*;
1251      +  %put NOTE: GOLD_HA = &GOLD_HA. ;
1252      +
1253      +PROC SQL NOPRINT;
1254      +  CREATE TABLE PLATFORMS AS
1255      +  SELECT ADJ_ENGINE_CD
1256      +    FROM &HERCULES..TINIT_ADJUD_ENGINE
1257      +   WHERE INITIATIVE_ID=&INITIATIVE_ID;
1258      +QUIT;
1259      +
1260      +PROC SORT DATA = PLATFORMS;BY ADJ_ENGINE_CD;
1261      +RUN;
1262      +
1263      +%LET ADJ_ENGINE_CD1 = 0;
1264      +%LET ADJ_ENGINE_CD2 = 0;
1265      +%LET ADJ_ENGINE_CD3 = 0;
1266      +
1267      +DATA _NULL_;
1268      + SET PLATFORMS END = EOF;
1269      +  BY ADJ_ENGINE_CD;
24                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1270      +  IF FIRST.ADJ_ENGINE_CD THEN DO;
1271      +  FLAG+1;
1272      +  CALL SYMPUT('ADJ_ENGINE_CD'||PUT(ADJ_ENGINE_CD,8. -L),ADJ_ENGINE_CD);
1273      +  END;
1274      +  IF EOF THEN CALL SYMPUT('TOT',PUT(ADJ_ENGINE_CD,8. -L));
1275      +RUN;
1276      +
1277      +  %IF &ADJ_ENGINE_CD1 EQ 1 %THEN %LET QL_ADJ = 1; %ELSE %LET QL_ADJ = 0;
1278      +    %IF &ADJ_ENGINE_CD2 EQ 2 %THEN %LET RX_ADJ = 1 ; %ELSE %LET RX_ADJ = 0;
1279      +		%IF &ADJ_ENGINE_CD3 EQ 3 %THEN %LET RE_ADJ = 1 ; %ELSE %LET RE_ADJ = 0;
1280      +
1281      +%PUT NOTE:	QL_ADJ = &QL_ADJ;
1282      +%PUT NOTE:	RX_ADJ = &RX_ADJ;
1283      +%PUT NOTE:	RE_ADJ = &RE_ADJ;
1284      +
1285      +%PUT NOTE:	ADJ_ENGINE_CD1 = &ADJ_ENGINE_CD1;
1286      +%PUT NOTE:	ADJ_ENGINE_CD2 = &ADJ_ENGINE_CD2;
1287      +%PUT NOTE:	ADJ_ENGINE_CD3 = &ADJ_ENGINE_CD3;
1288      +
1289      +  %EXIT:;
1290      +
1291      +%MEND HERCULES_IN;
1292      +
1293      +%HERCULES_IN;
MLOGIC(HERCULES_IN):  Beginning execution.
MPRINT(HERCULES_IN):   *CCW4 - CC_RE_MIGR_IND ADDED;
MLOGIC(HERCULES_IN):  %GLOBAL  PROGRAM_ID        TASK_ID             EXT_DRUG_LIST_IN         DFLT_INCLSN_IN      DOCUMENT_LOC_CD   
        PRT_CPNT_PARM_IN         PRESCRIBER_PARM_IN  TRGT_RECIPIENT_CD   DSPLY_CLT_SETUP_CD         DRG_DEFINITION_CD   EMAIL_USR   
              EMAIL_IT         PRG_DIR             DATA_DIR            RPT_DIR   LOG_DIR         TITLE_TX            HERCULES       
           INITIATIVE_ID         DESTINATION_CD      FTP_HOST            FTP_USER         FTP_PASS            SYSMODE             
      CLAIM_HIS_TBL         TABLE_PREFIX        DB2_TMP             LETTER_TYPE_QY_CD         ADHOC_DIR           CLAIMSA           
        OVRD_CLT_SETUP_IN         DATA_CLEANSING_CD           CC_RE_MIGR_IND      UDBSPRP    UDBDWP    SUMMARY   UDBSPRP_DB         
       USER_UDBSPRP     PASSWORD_UDBSPRP   UDBDWP_DB   USER_UDBDWP      PASSWORD_UDBDWP   QL_ADJ    RX_ADJ    RE_ADJ   ORA_TMP    
      USER_EDW   PASSWORD_EDW   GOLD    DFL_CLT_INC_EXU_IN  DSS_CLIN   DSPLY_CLT_SETUP_CD  EDW_FTP_HOST EDW_FTP_USER EDW_FTP_PASS   
       DWHM DSS_HM GOLD_HA
MPRINT(HERCULES_IN):   *** Assign Claim History Table name ***;
MLOGIC(HERCULES_IN):  %LET (variable name is CLAIM_HIS_TBL)
MLOGIC(HERCULES_IN):  %IF condition &SYSMODE=prod is FALSE
MLOGIC(HERCULES_IN):  %IF condition &SYSMODE=sit3 is FALSE
MLOGIC(HERCULES_IN):  %IF condition &SYSMODE=dev2 or &SYSMODE=sit2 is TRUE
MLOGIC(HERCULES_IN):  %LET (variable name is HERCULES)
MLOGIC(HERCULES_IN):  %LET (variable name is QCPAP020)
MLOGIC(HERCULES_IN):  %LET (variable name is CLAIMSA)
MLOGIC(HERCULES_IN):  %LET (variable name is CLAIMSP)
MLOGIC(HERCULES_IN):  %LET (variable name is HERCULEP)
MLOGIC(HERCULES_IN):  %LET (variable name is SUMMARY)
MLOGIC(HERCULES_IN):  %LET (variable name is UDBSPRP)
MLOGIC(HERCULES_IN):  %LET (variable name is UDBSPRP_DB)
MLOGIC(HERCULES_IN):  %LET (variable name is USER_UDBSPRP)
MLOGIC(HERCULES_IN):  %LET (variable name is PASSWORD_UDBSPRP)
MLOGIC(HERCULES_IN):  %LET (variable name is UDBDWP)
MLOGIC(HERCULES_IN):  %LET (variable name is UDBDWP_DB)
MLOGIC(HERCULES_IN):  %LET (variable name is USER_UDBDWP)
MLOGIC(HERCULES_IN):  %LET (variable name is PASSWORD_UDBDWP)
MLOGIC(HERCULES_IN):  %LET (variable name is DSS_CLIN)
MLOGIC(HERCULES_IN):  %LET (variable name is USER_EDW)
MLOGIC(HERCULES_IN):  %LET (variable name is PASSWORD_EDW)
MLOGIC(HERCULES_IN):  %LET (variable name is GOLD)
25                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(HERCULES_IN):  %LET (variable name is DSS_HM)
MLOGIC(HERCULES_IN):  %LET (variable name is DWHM)
MPRINT(HERCULES_IN):   LIBNAME CLAIMSP DB2 DSN=UDBDWP USER=sasadm PASSWORD=_n_l_t_c SCHEMA=CLAIMSP DEFER=YES;
NOTE: Libref CLAIMSP was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: UDBDWP
MPRINT(HERCULES_IN):   LIBNAME HERCULEP DB2 DSN=UDBDWP USER=sasadm PASSWORD=_n_l_t_c SCHEMA=HERCULEP DEFER=YES;
NOTE: Libref HERCULEP was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: UDBDWP
MPRINT(HERCULES_IN):   LIBNAME HERCULES DB2 DSN=ANARPTAD USER=qcpap020 PASSWORD=anlt2web SCHEMA=HERCULES DEFER=YES;
NOTE: Libref HERCULES was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: ANARPTAD
MPRINT(HERCULES_IN):   LIBNAME QCPAP020 DB2 DSN=ANARPTAD USER=qcpap020 PASSWORD=anlt2web SCHEMA=QCPAP020 DEFER=YES;
NOTE: Libref QCPAP020 was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: ANARPTAD
MPRINT(HERCULES_IN):   LIBNAME CLAIMSA DB2 DSN=ANARPTAD USER=qcpap020 PASSWORD=anlt2web SCHEMA=CLAIMSA DEFER=YES;
NOTE: Libref CLAIMSA was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: ANARPTAD
MPRINT(HERCULES_IN):   LIBNAME SUMMARY DB2 DSN=ANARPTAD USER=qcpap020 PASSWORD=anlt2web SCHEMA=SUMMARY DEFER=YES;
NOTE: Libref SUMMARY was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: ANARPTAD
MPRINT(HERCULES_IN):   LIBNAME DSS_CLIN ORACLE SCHEMA=DSS_CLIN PATH=GOLD user=dss_herc pw=anlt2web;
NOTE: Libref DSS_CLIN was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
MLOGIC(HERCULES_IN):  %LET (variable name is GOLD_HA)
WARNING: Apparent symbolic reference GOLD02 not resolved.
WARNING: Apparent symbolic reference GOLD02 not resolved.
WARNING: Argument 2 to macro function %SUBSTR is out of range.
MPRINT(HERCULES_IN):   LIBNAME DSS_HM ORACLE SCHEMA=DSS_HM PATH=GOLD DEFER=YES ;
NOTE: Libref DSS_HM was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
MPRINT(HERCULES_IN):   LIBNAME DWHM ORACLE SCHEMA=DWHM PATH=GOLD DEFER=YES ;
NOTE: Libref DWHM was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
MLOGIC(HERCULES_IN):  %PUT NOTE: USER_EDW = &USER_EDW
NOTE: USER_EDW = dss_herc
MLOGIC(HERCULES_IN):  %PUT NOTE: PASSWORD_EDW = &PASSWORD_EDW
NOTE: PASSWORD_EDW = anlt2web
MLOGIC(HERCULES_IN):  %PUT NOTE: GOLD = &GOLD
NOTE: GOLD = GOLD user=dss_herc pw=anlt2web
MLOGIC(HERCULES_IN):  %PUT NOTE: GOLD_HA = &GOLD_HA
NOTE: GOLD_HA = GOLD
MPRINT(HERCULES_IN):   LIBNAME AUX_TAB "/hercsit2/data/hercules/auxtables";
NOTE: Libref AUX_TAB was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /hercsit2/data/hercules/auxtables
MPRINT(HERCULES_IN):   LIBNAME ADM_LKP "/hercsit2/data/Admin/auxtable";
NOTE: Libref ADM_LKP was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /hercsit2/data/Admin/auxtable
26                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(GETPARMS):  Beginning execution.
MLOGIC(GETPARMS):  This macro was compiled from the autocall file /PRG/sas_env/sas_macros/getparms.sas
MLOGIC(GETPARMS):  %LOCAL  DSID VAREXIST RC PARMS PARM DLM PFILE MVAR MVAL _I
MLOGIC(GETPARMS):  %LET (variable name is DSID)
MLOGIC(GETPARMS):  %LET (variable name is VAREXIST)
MLOGIC(GETPARMS):  %LET (variable name is RC)
MLOGIC(GETPARMS):  %IF condition &VAREXIST=1 AND %BQUOTE(&SYSPARM)^= is TRUE
MLOGIC(GETPARMS):  %LET (variable name is PARMS)
MLOGIC(GETPARMS):  %IF condition ^%INDEX(ABCDEFGHIJKLMNOPQRSTUVWXYZ_, %BQUOTE(%UPCASE(%SUBSTR(&PARMS,1,1)))) is FALSE
MLOGIC(GETPARMS):  %LET (variable name is DLM)
MLOGIC(GETPARMS):  %LET (variable name is PFILE)
MLOGIC(GETPARMS):  %LET (variable name is _I)
MLOGIC(GETPARMS):  %DO %WHILE(%BQUOTE(%QSCAN(&PARMS,&_I,"&DLM"))^=) loop beginning; condition is TRUE.  
MLOGIC(GETPARMS):  %LET (variable name is PARM)
MLOGIC(GETPARMS):  %LET (variable name is MVAR)
MLOGIC(TRIM):  Beginning execution.
MLOGIC(TRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/trim.sas
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(LEFT):  Parameter TEXT has value initiative_id
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value initiative_id
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 13; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(TRIM):  Parameter VALUE has value initiative_id
MLOGIC(TRIM):  %LOCAL  I
MLOGIC(TRIM):  %DO loop beginning; index variable I; start value is 13; stop value is 1; by value is -1.  
MLOGIC(TRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(TRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(TRIM):  %IF condition &i>0 is TRUE
MLOGIC(TRIM):  Ending execution.
MLOGIC(GETPARMS):  %LET (variable name is MVAL)
MLOGIC(TRIM):  Beginning execution.
MLOGIC(TRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/trim.sas
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(LEFT):  Parameter TEXT has value 8301
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 8301
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
27                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 4; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(TRIM):  Parameter VALUE has value 8301
MLOGIC(TRIM):  %LOCAL  I
MLOGIC(TRIM):  %DO loop beginning; index variable I; start value is 4; stop value is 1; by value is -1.  
MLOGIC(TRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(TRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(TRIM):  %IF condition &i>0 is TRUE
MLOGIC(TRIM):  Ending execution.
MLOGIC(GETPARMS):  %IF condition %UPCASE(&MVAR)=PARMFILE is FALSE
MLOGIC(GETPARMS):  %GLOBAL  &MVAR
MLOGIC(TRIM):  Beginning execution.
MLOGIC(TRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/trim.sas
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(LEFT):  Parameter TEXT has value INITIATIVE_ID
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value INITIATIVE_ID
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 13; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(TRIM):  Parameter VALUE has value INITIATIVE_ID
MLOGIC(TRIM):  %LOCAL  I
MLOGIC(TRIM):  %DO loop beginning; index variable I; start value is 13; stop value is 1; by value is -1.  
MLOGIC(TRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(TRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(TRIM):  %IF condition &i>0 is TRUE
MLOGIC(TRIM):  Ending execution.
MLOGIC(GETPARMS):  %LET (variable name is INITIATIVE_ID)
MLOGIC(GETPARMS):  %PUT NOTE: (GETPARMS): Parameter: &MVAR = &MVAL
NOTE: (GETPARMS): Parameter: INITIATIVE_ID = 8301
MLOGIC(GETPARMS):  %LET (variable name is _I)
MLOGIC(GETPARMS):  %DO %WHILE(%BQUOTE(%QSCAN(&PARMS,&_I,"&DLM"))^=) condition is TRUE; loop will  iterate again.
MLOGIC(GETPARMS):  %LET (variable name is PARM)
MLOGIC(GETPARMS):  %LET (variable name is MVAR)
MLOGIC(TRIM):  Beginning execution.
MLOGIC(TRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/trim.sas
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(LEFT):  Parameter TEXT has value phase_seq_nb
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
28                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value phase_seq_nb
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 12; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(TRIM):  Parameter VALUE has value phase_seq_nb
MLOGIC(TRIM):  %LOCAL  I
MLOGIC(TRIM):  %DO loop beginning; index variable I; start value is 12; stop value is 1; by value is -1.  
MLOGIC(TRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(TRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(TRIM):  %IF condition &i>0 is TRUE
MLOGIC(TRIM):  Ending execution.
MLOGIC(GETPARMS):  %LET (variable name is MVAL)
MLOGIC(TRIM):  Beginning execution.
MLOGIC(TRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/trim.sas
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(LEFT):  Parameter TEXT has value 1
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 1
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(TRIM):  Parameter VALUE has value 1
MLOGIC(TRIM):  %LOCAL  I
MLOGIC(TRIM):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is -1.  
MLOGIC(TRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(TRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(TRIM):  %IF condition &i>0 is TRUE
MLOGIC(TRIM):  Ending execution.
MLOGIC(GETPARMS):  %IF condition %UPCASE(&MVAR)=PARMFILE is FALSE
MLOGIC(GETPARMS):  %GLOBAL  &MVAR
MLOGIC(TRIM):  Beginning execution.
MLOGIC(TRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/trim.sas
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(LEFT):  Parameter TEXT has value PHASE_SEQ_NB
MLOGIC(LEFT):  %LOCAL  I
29                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value PHASE_SEQ_NB
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 12; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(TRIM):  Parameter VALUE has value PHASE_SEQ_NB
MLOGIC(TRIM):  %LOCAL  I
MLOGIC(TRIM):  %DO loop beginning; index variable I; start value is 12; stop value is 1; by value is -1.  
MLOGIC(TRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(TRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(TRIM):  %IF condition &i>0 is TRUE
MLOGIC(TRIM):  Ending execution.
MLOGIC(GETPARMS):  %LET (variable name is PHASE_SEQ_NB)
MLOGIC(GETPARMS):  %PUT NOTE: (GETPARMS): Parameter: &MVAR = &MVAL
NOTE: (GETPARMS): Parameter: PHASE_SEQ_NB = 1
MLOGIC(GETPARMS):  %LET (variable name is _I)
MLOGIC(GETPARMS):  %DO %WHILE() condition is FALSE; loop will not iterate again.
MLOGIC(GETPARMS):  %IF condition &PFILE is FALSE
MLOGIC(GETPARMS):  Ending execution.
MPRINT(HERCULES_IN):  ;
MLOGIC(HERCULES_IN):  %IF condition %LENGTH(&INITIATIVE_ID)=0 is FALSE
MPRINT(HERCULES_IN):   PROC SQL NOPRINT;
MPRINT(HERCULES_IN):   CREATE TABLE HERC_PARMS AS SELECT A.PROGRAM_ID, A.TASK_ID, '%nrbquote('||trim(left(A.TITLE_TX))||")" as 
title_tx, A.TRGT_RECIPIENT_CD, A.EXT_DRUG_LIST_IN, A.OVRD_CLT_SETUP_IN, B.DFLT_INCLSN_IN, C.DATA_CLEANSING_CD, C.DESTINATION_CD, 
D.DOCUMENT_LOC_CD, D.PRTCPNT_PARM_IN, D.PRESCRIBER_PARM_IN, D.DSPLY_CLT_SETUP_CD, D.DRG_DEFINITION_CD, D.LETTER_TYPE_QY_CD, 
D.DFL_CLT_INC_EXU_IN, D.DSPLY_CLT_SETUP_CD FROM HERCULES.TINITIATIVE A, CLAIMSA.TPROGRAM B, HERCULES.TCMCTN_PROGRAM C, 
HERCULES.TPROGRAM_TASK D WHERE A.INITIATIVE_ID = 8301 AND A.PROGRAM_ID = B.PROGRAM_ID AND A.PROGRAM_ID = C.PROGRAM_ID AND 
A.PROGRAM_ID = D.PROGRAM_ID AND A.TASK_ID = D.TASK_ID;
WARNING: Variable DSPLY_CLT_SETUP_CD already exists on file WORK.HERC_PARMS.
NOTE: Compressing data set WORK.HERC_PARMS increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: Table WORK.HERC_PARMS created, with 1 rows and 16 columns.

MPRINT(HERCULES_IN):   SELECT COUNT(*) INTO :INIT_CNT FROM HERC_PARMS;
MPRINT(HERCULES_IN):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.33 seconds
      cpu time            0.14 seconds
      

MLOGIC(HERCULES_IN):  %IF condition &INIT_CNT=0 is FALSE
MLOGIC(HERCULES_IN):  %IF condition &INIT_CNT=0 is FALSE
MLOGIC(HERCULES_IN):  %LET (variable name is TABLE_PREFIX)
MLOGIC(CMPRES):  Beginning execution.
MLOGIC(CMPRES):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/cmpres.sas
MLOGIC(CMPRES):  Parameter TEXT has value 8301
MLOGIC(CMPRES):  %LOCAL  I
MLOGIC(CMPRES):  %LET (variable name is I)
30                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(CMPRES):  %DO %WHILE(&i^=0) loop beginning; condition is FALSE.  Loop will not be executed.
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(QTRIM):  Beginning execution.
MLOGIC(QTRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/qtrim.sas
MLOGIC(QTRIM):  Parameter VALUE has value 8301
MLOGIC(QTRIM):  %LOCAL  I
MLOGIC(QTRIM):  %DO loop beginning; index variable I; start value is 4; stop value is 1; by value is -1.  
MLOGIC(QTRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(QTRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(QTRIM):  %IF condition &i>0 is TRUE
MLOGIC(QTRIM):  Ending execution.
MLOGIC(LEFT):  Parameter TEXT has value 8301
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 8301
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 4; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(CMPRES):  Ending execution.
MLOGIC(CMPRES):  Beginning execution.
MLOGIC(CMPRES):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/cmpres.sas
MLOGIC(CMPRES):  Parameter TEXT has value 1
MLOGIC(CMPRES):  %LOCAL  I
MLOGIC(CMPRES):  %LET (variable name is I)
MLOGIC(CMPRES):  %DO %WHILE(&i^=0) loop beginning; condition is FALSE.  Loop will not be executed.
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(QTRIM):  Beginning execution.
MLOGIC(QTRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/qtrim.sas
MLOGIC(QTRIM):  Parameter VALUE has value 1
MLOGIC(QTRIM):  %LOCAL  I
MLOGIC(QTRIM):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is -1.  
MLOGIC(QTRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(QTRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(QTRIM):  %IF condition &i>0 is TRUE
MLOGIC(QTRIM):  Ending execution.
MLOGIC(LEFT):  Parameter TEXT has value 1
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 1
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
31                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(CMPRES):  Ending execution.
MPRINT(HERCULES_IN):   DATA _NULL_;
MPRINT(HERCULES_IN):   SET HERC_PARMS;
MPRINT(HERCULES_IN):   CALL SYMPUT('PROGRAM_ID', COMPRESS(PUT(PROGRAM_ID, 4.)));
MPRINT(HERCULES_IN):   CALL SYMPUT('TASK_ID', COMPRESS(PUT(TASK_ID, 4.)));
MPRINT(HERCULES_IN):   CALL SYMPUT('TITLE_TX', TRIM(LEFT(TITLE_TX)));
MPRINT(HERCULES_IN):   CALL SYMPUT('TRGT_RECIPIENT_CD', PUT(TRGT_RECIPIENT_CD,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('EXT_DRUG_LIST_IN', PUT(EXT_DRUG_LIST_IN,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('OVRD_CLT_SETUP_IN', PUT(OVRD_CLT_SETUP_IN,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('DFLT_INCLSN_IN', PUT(DFLT_INCLSN_IN,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('DESTINATION_CD', PUT(DESTINATION_CD,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('DATA_CLEANSING_CD', PUT(DATA_CLEANSING_CD,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('DOCUMENT_LOC_CD', COMPRESS(PUT(DOCUMENT_LOC_CD,4.)));
MPRINT(HERCULES_IN):   CALL SYMPUT('PRTCPNT_PARM_IN', PUT(PRTCPNT_PARM_IN,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('PRESCRIBER_PARM_IN', PUT(PRESCRIBER_PARM_IN,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('DSPLY_CLT_SETUP_CD', PUT(DSPLY_CLT_SETUP_CD,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('DRG_DEFINITION_CD', PUT(DRG_DEFINITION_CD,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('LETTER_TYPE_QY_CD', PUT(LETTER_TYPE_QY_CD,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('DFL_CLT_INC_EXU_IN', PUT(DFL_CLT_INC_EXU_IN,1.));
MPRINT(HERCULES_IN):   CALL SYMPUT('DSPLY_CLT_SETUP_CD', PUT(DSPLY_CLT_SETUP_CD,1.));
MPRINT(HERCULES_IN):   RUN;

NOTE: There were 1 observations read from the data set WORK.HERC_PARMS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(HERCULES_IN):   PROC TRANSPOSE DATA=HERC_PARMS(DROP=PROGRAM_ID TASK_ID) OUT=TRNS_PARMS(DROP=_LABEL_) NAME=CODE_NAME 
PREFIX=CODE;
MPRINT(HERCULES_IN):   RUN;

NOTE: There were 1 observations read from the data set WORK.HERC_PARMS.
NOTE: The data set WORK.TRNS_PARMS has 13 observations and 2 variables.
NOTE: Compressing data set WORK.TRNS_PARMS increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(HERCULES_IN):   PROC SQL NOPRINT;
MPRINT(HERCULES_IN):   CREATE TABLE CMCTN_CD_DECODE AS SELECT C.CODE_NAME, C.CODE1, LONG_TX AS ENGIN_DECODE FROM (SELECT A.*, B.* 
FROM HERCULES.TCMCTN_ENGINE_CD A, HERCULES.TCODE_COLUMN_XREF B WHERE A.CMCTN_ENGN_TYPE_CD=B.CMCTN_ENGN_TYPE_CD) AS AB RIGHT JOIN 
TRNS_PARMS C ON AB.COLUMN_NM=C.CODE_NAME AND AB.CMCTN_ENGINE_CD=C.CODE1;
NOTE: Compressing data set WORK.CMCTN_CD_DECODE increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: Table WORK.CMCTN_CD_DECODE created, with 13 rows and 3 columns.

MPRINT(HERCULES_IN):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
32                                                         The SAS System                          11:47 Wednesday, February 6, 2013

      cpu time            0.04 seconds
      

MPRINT(HERCULES_IN):   DATA _NULL_;
MPRINT(HERCULES_IN):   SET CMCTN_CD_DECODE END=ENDFILE;
MPRINT(HERCULES_IN):   IF ENGIN_DECODE= '' THEN DO;
MPRINT(HERCULES_IN):   IF CODE1=1 THEN ENGIN_DECODE='APPLICABLE';
MPRINT(HERCULES_IN):   ELSE IF CODE1=0 THEN ENGIN_DECODE='n/a';
MPRINT(HERCULES_IN):   END;
MPRINT(HERCULES_IN):   IF _N_=1 THEN DO;
MPRINT(HERCULES_IN):   PUT "NOTE:";
MPRINT(HERCULES_IN):   PUT @7
MLOGIC(CMPRES):  Beginning execution.
MLOGIC(CMPRES):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/cmpres.sas
MLOGIC(CMPRES):  Parameter TEXT has value 72
MLOGIC(CMPRES):  %LOCAL  I
MLOGIC(CMPRES):  %LET (variable name is I)
MLOGIC(CMPRES):  %DO %WHILE(&i^=0) loop beginning; condition is FALSE.  Loop will not be executed.
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(QTRIM):  Beginning execution.
MLOGIC(QTRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/qtrim.sas
MLOGIC(QTRIM):  Parameter VALUE has value 72
MLOGIC(QTRIM):  %LOCAL  I
MLOGIC(QTRIM):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is -1.  
MLOGIC(QTRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(QTRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(QTRIM):  %IF condition &i>0 is TRUE
MLOGIC(QTRIM):  Ending execution.
MLOGIC(LEFT):  Parameter TEXT has value 72
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 72
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 2; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(CMPRES):  Ending execution.
MPRINT(HERCULES_IN):   "PARAMETER SUMMARY FOR INITIATIVE 8301 - QA-UAT TESTING - PROACTIVE REFILL - JAN15 (PROGRAM 72)";
MPRINT(HERCULES_IN):   PUT @7 55*'_';
MPRINT(HERCULES_IN):   PUT ' ';
MPRINT(HERCULES_IN):   PUT @7 'CODE_NAME' @28 'CODE' @35 'ENGIN_DECODE';
MPRINT(HERCULES_IN):   PUT @7 10*'-' @28 5*'-' @35 14*'-';
MPRINT(HERCULES_IN):   END;
MPRINT(HERCULES_IN):   PUT @7 CODE_NAME $20. @28 CODE1 3. @35 ENGIN_DECODE $35.;
MPRINT(HERCULES_IN):   IF ENDFILE THEN DO;
MPRINT(HERCULES_IN):   PUT @7 55*'_';
MPRINT(HERCULES_IN):   PUT 'NOTE:';
MPRINT(HERCULES_IN):   PUT ' ';
33                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MPRINT(HERCULES_IN):   END;
MPRINT(HERCULES_IN):   RUN;

NOTE:
      PARAMETER SUMMARY FOR INITIATIVE 8301 - QA-UAT TESTING - PROACTIVE REFILL - JAN15 (PROGRAM 72)
      _______________________________________________________

      CODE_NAME            CODE   ENGIN_DECODE
      ----------           -----  --------------
      DATA_CLEANSING_CD      2    REJECT ALL                         
      DESTINATION_CD         1    CLINICAL OPERATIONS                
      DFLT_INCLSN_IN         0    n/a                                
      DFL_CLT_INC_EXU_IN     0    n/a                                
      DOCUMENT_LOC_CD        2    PROGRAM                            
      DRG_DEFINITION_CD      2    PROGRAM                            
      DSPLY_CLT_SETUP_CD     3    PROGRAM                            
      EXT_DRUG_LIST_IN       0    n/a                                
      LETTER_TYPE_QY_CD      1    RECEIVER AND SUBJECT               
      OVRD_CLT_SETUP_IN      0    n/a                                
      PRESCRIBER_PARM_IN     0    n/a                                
      PRTCPNT_PARM_IN        0    n/a                                
      TRGT_RECIPIENT_CD      1    PARTICIPANT                        
      _______________________________________________________
NOTE:
NOTE: There were 13 observations read from the data set WORK.CMCTN_CD_DECODE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds
      

MPRINT(HERCULES_IN):   proc sql;
MPRINT(HERCULES_IN):   drop table CMCTN_CD_DECODE;
NOTE: Table WORK.CMCTN_CD_DECODE has been dropped.
MPRINT(HERCULES_IN):   drop table herc_parms;
NOTE: Table WORK.HERC_PARMS has been dropped.
MPRINT(HERCULES_IN):   drop table trns_parms;
NOTE: Table WORK.TRNS_PARMS has been dropped.
MPRINT(HERCULES_IN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(LOWCASE):  Beginning execution.
MLOGIC(LOWCASE):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/lowcase.sas
MLOGIC(LOWCASE):  Parameter STRING has value sit2
MLOGIC(LOWCASE):  Ending execution.
MLOGIC(HERCULES_IN):  %IF condition %lowcase(&SYSMODE)=prod is FALSE
MLOGIC(HERCULES_IN):  %LET (variable name is DB2_TMP)
MLOGIC(HERCULES_IN):  %LET (variable name is ORA_TMP)
MPRINT(HERCULES_IN):   LIBNAME TMP72 DB2 DSN=ANARPTAD USER=qcpap020 PASSWORD=anlt2web SCHEMA=TMP72 DEFER=YES;
NOTE: Libref TMP72 was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: ANARPTAD
MPRINT(HERCULES_IN):   LIBNAME DSS_HERC ORACLE SCHEMA=DSS_HERC PATH=GOLD user=dss_herc pw=anlt2web;
NOTE: Libref DSS_HERC was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
34                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(HERCULES_IN):  %PUT *** folder assignments ***
*** folder assignments ***
MLOGIC(HERCULES_IN):  %PUT *** folder assignments ***
*** folder assignments ***
MLOGIC(HERCULES_IN):  %PUT *** folder assignments ***
*** folder assignments ***
MLOGIC(HERCULES_IN):  %LET (variable name is ADHOC_DIR)
MLOGIC(HERCULES_IN):  %LET (variable name is PRG_DIR)
MLOGIC(CMPRES):  Beginning execution.
MLOGIC(CMPRES):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/cmpres.sas
MLOGIC(CMPRES):  Parameter TEXT has value 72
MLOGIC(CMPRES):  %LOCAL  I
MLOGIC(CMPRES):  %LET (variable name is I)
MLOGIC(CMPRES):  %DO %WHILE(&i^=0) loop beginning; condition is FALSE.  Loop will not be executed.
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(QTRIM):  Beginning execution.
MLOGIC(QTRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/qtrim.sas
MLOGIC(QTRIM):  Parameter VALUE has value 72
MLOGIC(QTRIM):  %LOCAL  I
MLOGIC(QTRIM):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is -1.  
MLOGIC(QTRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(QTRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(QTRIM):  %IF condition &i>0 is TRUE
MLOGIC(QTRIM):  Ending execution.
MLOGIC(LEFT):  Parameter TEXT has value 72
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 72
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 2; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(CMPRES):  Ending execution.
MLOGIC(HERCULES_IN):  %LET (variable name is DATA_DIR)
MLOGIC(CMPRES):  Beginning execution.
MLOGIC(CMPRES):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/cmpres.sas
MLOGIC(CMPRES):  Parameter TEXT has value 72
MLOGIC(CMPRES):  %LOCAL  I
MLOGIC(CMPRES):  %LET (variable name is I)
MLOGIC(CMPRES):  %DO %WHILE(&i^=0) loop beginning; condition is FALSE.  Loop will not be executed.
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(QTRIM):  Beginning execution.
MLOGIC(QTRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/qtrim.sas
MLOGIC(QTRIM):  Parameter VALUE has value 72
MLOGIC(QTRIM):  %LOCAL  I
MLOGIC(QTRIM):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is -1.  
MLOGIC(QTRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
35                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(QTRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(QTRIM):  %IF condition &i>0 is TRUE
MLOGIC(QTRIM):  Ending execution.
MLOGIC(LEFT):  Parameter TEXT has value 72
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 72
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 2; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(CMPRES):  Ending execution.
MLOGIC(HERCULES_IN):  %LET (variable name is RPT_DIR)
MLOGIC(CMPRES):  Beginning execution.
MLOGIC(CMPRES):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/cmpres.sas
MLOGIC(CMPRES):  Parameter TEXT has value 72
MLOGIC(CMPRES):  %LOCAL  I
MLOGIC(CMPRES):  %LET (variable name is I)
MLOGIC(CMPRES):  %DO %WHILE(&i^=0) loop beginning; condition is FALSE.  Loop will not be executed.
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(QTRIM):  Beginning execution.
MLOGIC(QTRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/qtrim.sas
MLOGIC(QTRIM):  Parameter VALUE has value 72
MLOGIC(QTRIM):  %LOCAL  I
MLOGIC(QTRIM):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is -1.  
MLOGIC(QTRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(QTRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(QTRIM):  %IF condition &i>0 is TRUE
MLOGIC(QTRIM):  Ending execution.
MLOGIC(LEFT):  Parameter TEXT has value 72
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 72
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 2; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(CMPRES):  Ending execution.
MLOGIC(HERCULES_IN):  %LET (variable name is LOG_DIR)
36                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(CMPRES):  Beginning execution.
MLOGIC(CMPRES):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/cmpres.sas
MLOGIC(CMPRES):  Parameter TEXT has value 72
MLOGIC(CMPRES):  %LOCAL  I
MLOGIC(CMPRES):  %LET (variable name is I)
MLOGIC(CMPRES):  %DO %WHILE(&i^=0) loop beginning; condition is FALSE.  Loop will not be executed.
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/left.sas
MLOGIC(QTRIM):  Beginning execution.
MLOGIC(QTRIM):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/qtrim.sas
MLOGIC(QTRIM):  Parameter VALUE has value 72
MLOGIC(QTRIM):  %LOCAL  I
MLOGIC(QTRIM):  %DO loop beginning; index variable I; start value is 2; stop value is 1; by value is -1.  
MLOGIC(QTRIM):  %IF condition %qsubstr(&value,&i,1)^=  is TRUE
MLOGIC(QTRIM):  %GOTO trimmed (label resolves to TRIMMED).
MLOGIC(QTRIM):  %IF condition &i>0 is TRUE
MLOGIC(QTRIM):  Ending execution.
MLOGIC(LEFT):  Parameter TEXT has value 72
MLOGIC(LEFT):  %LOCAL  I
MLOGIC(LEFT):  %IF condition %length(&text)=0 is FALSE
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sas/sas91/sasautos/verify.sas
MLOGIC(VERIFY):  Parameter TEXT has value 72
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 2; by value is 1.  
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is TRUE
MLOGIC(VERIFY):  %GOTO verfnd (label resolves to VERFND).
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is FALSE
MLOGIC(VERIFY):  Ending execution.
MLOGIC(LEFT):  %IF condition &i is TRUE
MLOGIC(LEFT):  Ending execution.
MLOGIC(CMPRES):  Ending execution.
MLOGIC(CHK_DIR):  Beginning execution.
MLOGIC(CHK_DIR):  This macro was compiled from the autocall file /PRG/sas_env/sas_macros/chk_dir.sas
MLOGIC(CHK_DIR):  Parameter DIR_NAME has value /hercsit2/adhoc/hercules
MPRINT(CHK_DIR):   DATA _NULL_;
MPRINT(CHK_DIR):   IF FILEEXIST("/hercsit2/adhoc/hercules")=0 THEN rc=SYSTEM("mkdir -p /hercsit2/adhoc/hercules");
MPRINT(CHK_DIR):   ELSE rc=0;
MPRINT(CHK_DIR):   CALL SYMPUT('err_cd',COMPRESS(PUT(rc,12.)));
MPRINT(CHK_DIR):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CHK_DIR):  %PUT err_cd=&err_cd.
err_cd=0
MLOGIC(CHK_DIR):  Ending execution.
MPRINT(HERCULES_IN):  ;
MLOGIC(CHK_DIR):  Beginning execution.
MLOGIC(CHK_DIR):  This macro was compiled from the autocall file /PRG/sas_env/sas_macros/chk_dir.sas
MLOGIC(CHK_DIR):  Parameter DIR_NAME has value /hercsit2/report_doc/hercules/72
MPRINT(CHK_DIR):   DATA _NULL_;
MPRINT(CHK_DIR):   IF FILEEXIST("/hercsit2/report_doc/hercules/72")=0 THEN rc=SYSTEM("mkdir -p /hercsit2/report_doc/hercules/72");
37                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MPRINT(CHK_DIR):   ELSE rc=0;
MPRINT(CHK_DIR):   CALL SYMPUT('err_cd',COMPRESS(PUT(rc,12.)));
MPRINT(CHK_DIR):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CHK_DIR):  %PUT err_cd=&err_cd.
err_cd=0
MLOGIC(CHK_DIR):  Ending execution.
MPRINT(HERCULES_IN):  ;
MLOGIC(CHK_DIR):  Beginning execution.
MLOGIC(CHK_DIR):  This macro was compiled from the autocall file /PRG/sas_env/sas_macros/chk_dir.sas
MLOGIC(CHK_DIR):  Parameter DIR_NAME has value /hercsit2/prg/hercules/72
MPRINT(CHK_DIR):   DATA _NULL_;
MPRINT(CHK_DIR):   IF FILEEXIST("/hercsit2/prg/hercules/72")=0 THEN rc=SYSTEM("mkdir -p /hercsit2/prg/hercules/72");
MPRINT(CHK_DIR):   ELSE rc=0;
MPRINT(CHK_DIR):   CALL SYMPUT('err_cd',COMPRESS(PUT(rc,12.)));
MPRINT(CHK_DIR):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CHK_DIR):  %PUT err_cd=&err_cd.
err_cd=0
MLOGIC(CHK_DIR):  Ending execution.
MPRINT(HERCULES_IN):  ;
MLOGIC(CHK_DIR):  Beginning execution.
MLOGIC(CHK_DIR):  This macro was compiled from the autocall file /PRG/sas_env/sas_macros/chk_dir.sas
MLOGIC(CHK_DIR):  Parameter DIR_NAME has value /hercsit2/data/hercules/72/logs
MPRINT(CHK_DIR):   DATA _NULL_;
MPRINT(CHK_DIR):   IF FILEEXIST("/hercsit2/data/hercules/72/logs")=0 THEN rc=SYSTEM("mkdir -p /hercsit2/data/hercules/72/logs");
MPRINT(CHK_DIR):   ELSE rc=0;
MPRINT(CHK_DIR):   CALL SYMPUT('err_cd',COMPRESS(PUT(rc,12.)));
MPRINT(CHK_DIR):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CHK_DIR):  %PUT err_cd=&err_cd.
err_cd=0
MLOGIC(CHK_DIR):  Ending execution.
MPRINT(HERCULES_IN):  ;
MLOGIC(CHK_DIR):  Beginning execution.
MLOGIC(CHK_DIR):  This macro was compiled from the autocall file /PRG/sas_env/sas_macros/chk_dir.sas
MLOGIC(CHK_DIR):  Parameter DIR_NAME has value /hercsit2/data/hercules/72/pending
MPRINT(CHK_DIR):   DATA _NULL_;
MPRINT(CHK_DIR):   IF FILEEXIST("/hercsit2/data/hercules/72/pending")=0 THEN rc=SYSTEM("mkdir -p 
/hercsit2/data/hercules/72/pending");
MPRINT(CHK_DIR):   ELSE rc=0;
MPRINT(CHK_DIR):   CALL SYMPUT('err_cd',COMPRESS(PUT(rc,12.)));
MPRINT(CHK_DIR):   RUN;
38                                                         The SAS System                          11:47 Wednesday, February 6, 2013


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CHK_DIR):  %PUT err_cd=&err_cd.
err_cd=0
MLOGIC(CHK_DIR):  Ending execution.
MPRINT(HERCULES_IN):  ;
MLOGIC(CHK_DIR):  Beginning execution.
MLOGIC(CHK_DIR):  This macro was compiled from the autocall file /PRG/sas_env/sas_macros/chk_dir.sas
MLOGIC(CHK_DIR):  Parameter DIR_NAME has value /hercsit2/data/hercules/72/results
MPRINT(CHK_DIR):   DATA _NULL_;
MPRINT(CHK_DIR):   IF FILEEXIST("/hercsit2/data/hercules/72/results")=0 THEN rc=SYSTEM("mkdir -p 
/hercsit2/data/hercules/72/results");
MPRINT(CHK_DIR):   ELSE rc=0;
MPRINT(CHK_DIR):   CALL SYMPUT('err_cd',COMPRESS(PUT(rc,12.)));
MPRINT(CHK_DIR):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CHK_DIR):  %PUT err_cd=&err_cd.
err_cd=0
MLOGIC(CHK_DIR):  Ending execution.
MPRINT(HERCULES_IN):  ;
MLOGIC(CHK_DIR):  Beginning execution.
MLOGIC(CHK_DIR):  This macro was compiled from the autocall file /PRG/sas_env/sas_macros/chk_dir.sas
MLOGIC(CHK_DIR):  Parameter DIR_NAME has value /hercsit2/data/hercules/72/archive
MPRINT(CHK_DIR):   DATA _NULL_;
MPRINT(CHK_DIR):   IF FILEEXIST("/hercsit2/data/hercules/72/archive")=0 THEN rc=SYSTEM("mkdir -p 
/hercsit2/data/hercules/72/archive");
MPRINT(CHK_DIR):   ELSE rc=0;
MPRINT(CHK_DIR):   CALL SYMPUT('err_cd',COMPRESS(PUT(rc,12.)));
MPRINT(CHK_DIR):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CHK_DIR):  %PUT err_cd=&err_cd.
err_cd=0
MLOGIC(CHK_DIR):  Ending execution.
MPRINT(HERCULES_IN):  ;
MPRINT(HERCULES_IN):   FILENAME PROG "/hercsit2/prg/hercules/72";
MPRINT(HERCULES_IN):   FILENAME RPT "/hercsit2/report_doc/hercules/72";
MPRINT(HERCULES_IN):   LIBNAME DATA_PND "/hercsit2/data/hercules/72/pending";
NOTE: Libref DATA_PND was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /hercsit2/data/hercules/72/pending
MPRINT(HERCULES_IN):   LIBNAME DATA_RES "/hercsit2/data/hercules/72/results";
NOTE: Libref DATA_RES was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /hercsit2/data/hercules/72/results
39                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MPRINT(HERCULES_IN):   LIBNAME DATA_ARC "/hercsit2/data/hercules/72/archive";
NOTE: Libref DATA_ARC was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /hercsit2/data/hercules/72/archive
MPRINT(HERCULES_IN):   PROC SQL NOPRINT;
MLOGIC(HERCULES_IN):  %IF condition %LENGTH(&INITIATIVE_ID)>0 is TRUE
MPRINT(HERCULES_IN):   SELECT HSU_USR_ID INTO: HSU_USR_ID FROM HERCULES.TINITIATIVE_PHASE WHERE INITIATIVE_ID=(8301);
MPRINT(HERCULES_IN):   SELECT QUOTE(TRIM(EMAIL)) INTO :EMAIL_USR SEPARATED BY ' ' FROM ADM_LKP.ANALYTICS_USERS WHERE UPCASE(QCP_ID) 
IN ("QCPI0P6");
NOTE: No rows were selected.
MPRINT(HERCULES_IN):   SELECT QUOTE(TRIM(EMAIL)) INTO :EMAIL_IT SEPARATED BY ' ' FROM ADM_LKP.ANALYTICS_USERS WHERE UPCASE(QCP_ID) 
= "QCPAP020";
MPRINT(HERCULES_IN):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MPRINT(HERCULES_IN):   DATA _NULL_;
MPRINT(HERCULES_IN):   SET AUX_TAB.SET_FTP(WHERE=(DESTINATION_CD=1));
NOTE: Data file AUX_TAB.SET_FTP.DATA is in a format native to another host or the file encoding does not match the session 
      encoding. Cross Environment Data Access will be used, which may require additional CPU resources and reduce performance.
MPRINT(HERCULES_IN):   CALL SYMPUT('FTP_HOST', TRIM(LEFT(FTP_HOST)) );
MPRINT(HERCULES_IN):   CALL SYMPUT('FTP_USER', TRIM(LEFT(FTP_USER)) );
MPRINT(HERCULES_IN):   CALL SYMPUT('FTP_PASS', TRIM(LEFT(FTP_PASS)) );
MPRINT(HERCULES_IN):   RUN;

NOTE: There were 1 observations read from the data set AUX_TAB.SET_FTP.
      WHERE DESTINATION_CD=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(HERCULES_IN):   DATA _NULL_;
MPRINT(HERCULES_IN):   SET AUX_TAB.SET_FTP(WHERE=(DESTINATION_ROOT_DIR=upcase("sit2") and DESTINATION_CD in (98,99)));
NOTE: Data file AUX_TAB.SET_FTP.DATA is in a format native to another host or the file encoding does not match the session 
      encoding. Cross Environment Data Access will be used, which may require additional CPU resources and reduce performance.
MPRINT(HERCULES_IN):   CALL SYMPUT('EDW_FTP_HOST', TRIM(LEFT(FTP_HOST)) );
MPRINT(HERCULES_IN):   CALL SYMPUT('EDW_FTP_USER', TRIM(LEFT(FTP_USER)) );
MPRINT(HERCULES_IN):   CALL SYMPUT('EDW_FTP_PASS', TRIM(LEFT(FTP_PASS)) );
MPRINT(HERCULES_IN):   RUN;

NOTE: There were 0 observations read from the data set AUX_TAB.SET_FTP.
      WHERE (DESTINATION_ROOT_DIR='SIT2') and DESTINATION_CD in (98, 99);
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(HERCULES_IN):  %PUT NOTE: EDW_FTP_HOST = &EDW_FTP_HOST.
NOTE: EDW_FTP_HOST =
MLOGIC(HERCULES_IN):  %PUT NOTE: EDW_FTP_USER = &EDW_FTP_USER.
NOTE: EDW_FTP_USER =
MLOGIC(HERCULES_IN):  %PUT NOTE: EDW_FTP_PASS = &EDW_FTP_PASS.
NOTE: EDW_FTP_PASS =
MLOGIC(HERCULES_IN):  %PUT NOTE: GOLD_HA = &GOLD_HA.
NOTE: GOLD_HA = GOLD
40                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MPRINT(HERCULES_IN):   PROC SQL NOPRINT;
MPRINT(HERCULES_IN):   CREATE TABLE PLATFORMS AS SELECT ADJ_ENGINE_CD FROM HERCULES.TINIT_ADJUD_ENGINE WHERE INITIATIVE_ID=8301;
NOTE: Compression was disabled for data set WORK.PLATFORMS because compression overhead would increase the size of the data set.
NOTE: Table WORK.PLATFORMS created, with 3 rows and 1 columns.

MPRINT(HERCULES_IN):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(HERCULES_IN):   PROC SORT DATA = PLATFORMS;
MPRINT(HERCULES_IN):  BY ADJ_ENGINE_CD;
MPRINT(HERCULES_IN):   RUN;

NOTE: There were 3 observations read from the data set WORK.PLATFORMS.
NOTE: The data set WORK.PLATFORMS has 3 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.02 seconds
      

MLOGIC(HERCULES_IN):  %LET (variable name is ADJ_ENGINE_CD1)
MLOGIC(HERCULES_IN):  %LET (variable name is ADJ_ENGINE_CD2)
MLOGIC(HERCULES_IN):  %LET (variable name is ADJ_ENGINE_CD3)
MPRINT(HERCULES_IN):   DATA _NULL_;
MPRINT(HERCULES_IN):   SET PLATFORMS END = EOF;
MPRINT(HERCULES_IN):   BY ADJ_ENGINE_CD;
MPRINT(HERCULES_IN):   IF FIRST.ADJ_ENGINE_CD THEN DO;
MPRINT(HERCULES_IN):   FLAG+1;
MPRINT(HERCULES_IN):   CALL SYMPUT('ADJ_ENGINE_CD'||PUT(ADJ_ENGINE_CD,8. -L),ADJ_ENGINE_CD);
MPRINT(HERCULES_IN):   END;
MPRINT(HERCULES_IN):   IF EOF THEN CALL SYMPUT('TOT',PUT(ADJ_ENGINE_CD,8. -L));
MPRINT(HERCULES_IN):   RUN;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1293:162   
NOTE: There were 3 observations read from the data set WORK.PLATFORMS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(HERCULES_IN):  %IF condition &ADJ_ENGINE_CD1 EQ 1 is TRUE
MLOGIC(HERCULES_IN):  %LET (variable name is QL_ADJ)
MLOGIC(HERCULES_IN):  %IF condition &ADJ_ENGINE_CD2 EQ 2 is TRUE
MLOGIC(HERCULES_IN):  %LET (variable name is RX_ADJ)
MLOGIC(HERCULES_IN):  %IF condition &ADJ_ENGINE_CD3 EQ 3 is TRUE
MLOGIC(HERCULES_IN):  %LET (variable name is RE_ADJ)
MLOGIC(HERCULES_IN):  %PUT NOTE: QL_ADJ = &QL_ADJ
NOTE: QL_ADJ = 1
MLOGIC(HERCULES_IN):  %PUT NOTE: RX_ADJ = &RX_ADJ
NOTE: RX_ADJ = 1
MLOGIC(HERCULES_IN):  %PUT NOTE: RE_ADJ = &RE_ADJ
NOTE: RE_ADJ = 1
MLOGIC(HERCULES_IN):  %PUT NOTE: ADJ_ENGINE_CD1 = &ADJ_ENGINE_CD1
NOTE: ADJ_ENGINE_CD1 =            1
MLOGIC(HERCULES_IN):  %PUT NOTE: ADJ_ENGINE_CD2 = &ADJ_ENGINE_CD2
41                                                         The SAS System                          11:47 Wednesday, February 6, 2013

NOTE: ADJ_ENGINE_CD2 =            2
MLOGIC(HERCULES_IN):  %PUT NOTE: ADJ_ENGINE_CD3 = &ADJ_ENGINE_CD3
NOTE: ADJ_ENGINE_CD3 =            3
MPRINT(HERCULES_IN):  ;
MLOGIC(HERCULES_IN):  Ending execution.
1294      +
NOTE: %INCLUDE (level 1) ending.
1295       %include "/herc&sysmode/prg/hercules/72/proactive_refill_in.sas";
NOTE: %INCLUDE (level 1) file /hercsit2/prg/hercules/72/proactive_refill_in.sas is file 
      /hercsit2/prg/hercules/72/proactive_refill_in.sas.
1296      +/*SASDOC ----------------------------------------------------------------------------------
1297      + | PROGRAM:   proactive_refill_in.SAS
1298      + |
1299      + | PURPOSE:   setup paremeters for proactive_refill.sas
1300      + |
1301      + | HISTORY:   OCT, 2003,
1302      + |            Dec. 28, 2005 - Gregory Dudley
1303      + |            Added macro variable &STARTDAY for job runs outside of a
1304      + |            production run.
1305      + |            15MAR2007 - N. Williams - change RTL_HIS_DAYS to point back 45 days per
1306      + |                                      business users request.
1307      + |26FEB2009 - Hercules Version  2.1.2.02
1308      + |G. DUDLEY - CHANGED THE FORMAT OF DATE MACRO VARIABLE USED IN ORACLE QUERIES
1309      + +-----------------------------------------------------------------------------------SASDOC*/
1310      +
1311      +
1312      +
1313      +options mlogic mlogicnest mprint mprintnest symbolgen source2;
1314      +
1315      +/*%include "/PRG/sas&sysmode.1/hercules/reports/client_initiative_summary.sas";*/
1316      +/*commented by sandeep for testing purpose*/
1317      +%include "/herc&sysmode/prg/hercules/reports/client_initiative_summary_in.sas";
SYMBOLGEN:  Macro variable SYSMODE resolves to sit2
NOTE: %INCLUDE (level 2) file /hercsit2/prg/hercules/reports/client_initiative_summary_in.sas is file 
      /hercsit2/prg/hercules/reports/client_initiative_summary_in.sas.
1318      +/* ----------------------------------------
1319      +   Code exported from SAS Enterprise Guide
1320      +   DATE: Tuesday, January 20, 2004      TIME: 11:27:03 AM
1321      +   PROJECT: Project
1322      +   PROJECT PATH:
1323      +---------------------------------------- */
1324      +/*HEADER----------------------------------------------------------------------
1325      +PROGRAM:
1326      +   client_initiative_summary_in.sas
1327      +
1328      +LOCATION:
1329      +   /PRG/sas&sysmode.1/hercules/reports/client_initiative_summary_in.sas
1330      +
1331      +PURPOSE:
1332      +   	Column Names are extracted from this file for the source
1333      +	program.
1334      +
1335      +INPUT:
1336      +	
1337      +OUTPUT:
1338      +
1339      +
1340      +AUTHOR/DATE:
42                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1341      +   Sayeed Shariff/September 2003.
1342      +
1343      +MODIFICATIONS:	Sayeed Shariff/January 2004.
1344      +
1345      +------------------------------------------------------------------------*/;
1346      +*SASDOC
1347      +   Create concatenated formats to decode initiative data.
1348      +   Create add_fmt_vars macro to add formatted variables.
1349      +*SASDOC;
1350      +
1351      +* Create format for client setup inclusion.;
1352      +
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
1353      +LIBNAME &HERCULES DB2
SYMBOLGEN:  Macro variable UDBSPRP resolves to ANARPTAD USER=qcpap020 PASSWORD=anlt2web
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
1353     !+                      DSN=&UDBSPRP SCHEMA=&HERCULES DEFER=YES;
NOTE: Libref HERCULES was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: ANARPTAD
1354      +
1355      +data _CLIENT_SETUP_INCLUSION;
1356      +retain COLUMN_NM 'CLIENT_SETUP_INCLUSION_CD';
1357      +input @1 CMCTN_ENGINE_CD @3 COLUMN_TX $char65.;
1358      +datalines;

NOTE: The data set WORK._CLIENT_SETUP_INCLUSION has 2 observations and 3 variables.
NOTE: Compressing data set WORK._CLIENT_SETUP_INCLUSION increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1361      +;
1362      +run;
1363      +
1364      +* Create concatenated formats to decode initiative data.;
1365      +proc sql noprint;
1366      +** Select columns for concatenated format.;
1367      +** Append lookup tables.                  ;
1368      +create table _LOAD_FMT_1 as
1369      +select left(A.COLUMN_NM) as COLUMN_NM label='COLUMN_NM',
1370      +       B.CMCTN_ENGINE_CD as CMCTN_ENGINE_CD label='CMCTN_ENGINE_CD',
1371      +       B.LONG_TX as COLUMN_TX label='COLUMN_TX'
1372      +  from &HERCULES..TCODE_COLUMN_XREF A, &HERCULES..TCMCTN_ENGINE_CD B
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
1373      + where A.CMCTN_ENGN_TYPE_CD eq B.CMCTN_ENGN_TYPE_CD
1374      +union corr
1375      +select 'PROGRAM_ID' as COLUMN_NM,
1376      +       PROGRAM_ID as CMCTN_ENGINE_CD,
1377      +       LONG_TX as COLUMN_TX
1378      +  from &CLAIMSA..TPROGRAM
SYMBOLGEN:  Macro variable CLAIMSA resolves to CLAIMSA
1379      +union corr
1380      +select 'TASK_ID' as COLUMN_NM,
1381      +       TASK_ID as CMCTN_ENGINE_CD,
43                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1382      +       SHORT_TX as COLUMN_TX
1383      +  from &HERCULES..TTASK
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
1384      +union corr
1385      +select COLUMN_NM,
1386      +       CMCTN_ENGINE_CD,
1387      +       COLUMN_TX
1388      +  from _CLIENT_SETUP_INCLUSION
1389      + order by COLUMN_NM, CMCTN_ENGINE_CD;
NOTE: Compressing data set WORK._LOAD_FMT_1 decreased size by 48.15 percent. 
      Compressed is 42 pages; un-compressed would require 81 pages.
NOTE: Table WORK._LOAD_FMT_1 created, with 5754 rows and 3 columns.

1390      +** Create macro variables for maximum format length.;
1391      +select compress("$"||put(max(length(COLUMN_NM)),8.)||"."),
1392      +       compress("Z"||put(length(input(put(max(CMCTN_ENGINE_CD),32.),$32.)),8.)||".")
1393      +  into :MAX_COLUMN_NM_LN_FMT, :MAX_CMCTN_ENGINE_CD_LN_FMT
1394      +  from _LOAD_FMT_1;
1395      +
1396      +** Create format control-in data.;
1397      +create table _LOAD_FMT_2 as
1398      +select '$_HERCF' as FMTNAME,
1399      +       'C' as TYPE,
1400      +       input(COLUMN_NM,&MAX_COLUMN_NM_LN_FMT)||
SYMBOLGEN:  Macro variable MAX_COLUMN_NM_LN_FMT resolves to $25.      
1401      +       put(CMCTN_ENGINE_CD,&MAX_CMCTN_ENGINE_CD_LN_FMT) as START,
SYMBOLGEN:  Macro variable MAX_CMCTN_ENGINE_CD_LN_FMT resolves to Z4.       
1402      +       COLUMN_TX as LABEL label='LABEL'
1403      +  from _LOAD_FMT_1
1404      + order by START;
NOTE: Compressing data set WORK._LOAD_FMT_2 decreased size by 43.37 percent. 
      Compressed is 47 pages; un-compressed would require 83 pages.
NOTE: Table WORK._LOAD_FMT_2 created, with 5754 rows and 4 columns.

1405      +quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.31 seconds
      cpu time            0.18 seconds
      

1406      +
1407      +** Assemble concatenated format;
1408      +proc format
1409      +   cntlin=_LOAD_FMT_2;
NOTE: Format $_HERCF has been output.
1410      +** create datetime format;
1411      +   picture dttime (default=38)
1412      +       .=.
1413      +/* other='%A, %B %0d, %0Y %0H:%0M:%0S' (datatype=datetime); */
1414      +   other='%b %0d, %0Y %0H:%0M' (datatype=datetime);
NOTE: Format DTTIME has been output.
1415      +run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: There were 5754 observations read from the data set WORK._LOAD_FMT_2.
44                                                         The SAS System                          11:47 Wednesday, February 6, 2013


1416      +
1417      +** Drop _temporary tables.;
1418      +proc sql noprint;
1419      +drop table
1420      +  _LOAD_FMT_1,
1421      +  _LOAD_FMT_2,
1422      +  _CLIENT_SETUP_INCLUSION;
NOTE: Table WORK._LOAD_FMT_1 has been dropped.
NOTE: Table WORK._LOAD_FMT_2 has been dropped.
NOTE: Table WORK._CLIENT_SETUP_INCLUSION has been dropped.
1423      +quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1424      +
1425      +* Create add_fmt_vars macro to add formatted variables.;
1426      +%macro add_fmt_vars(_IN_DSN,_OUT_DSN,_PRFX)/PBUFF;
1427      +** Parse arguments to create formatted variables.;
1428      +%local _NUM _CUR_VAR;
1429      +%let _NUM=4;
1430      +%let _CUR_VAR=%scan(&SYSPBUFF,&_NUM,%str(',)'));
1431      +   data &_OUT_DSN;
1432      +   set &_IN_DSN;
1433      +%do %while(%str(&_CUR_VAR) ne %str());
1434      +   &_PRFX.&_CUR_VAR=put(input(vname(&_CUR_VAR),&MAX_COLUMN_NM_LN_FMT)||
1435      +                        put(&_CUR_VAR,&MAX_CMCTN_ENGINE_CD_LN_FMT),$_hercf.);
1436      +   %let _NUM=%eval(&_NUM+1);
1437      +   %let _CUR_VAR=%scan(&SYSPBUFF,&_NUM,%str(',)'));
1438      +%end;
1439      +    run;
1440      +%mend add_fmt_vars;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
1441      +
1442      +proc sql NOPRINT;
1443      +     select EXT_DRUG_LIST_IN
1444      +     INTO:  EXT_DRUG_LIST_IN
1445      +     from &hercules..TINITIATIVE A
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
1446      +     WHERE PROGRAM_ID =&PROGRAM_ID
SYMBOLGEN:  Macro variable PROGRAM_ID resolves to 72
1447      +       AND INITIATIVE_ID=&INITIATIVE_ID
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
1448      +       AND TASK_ID=&TASK_ID;
SYMBOLGEN:  Macro variable TASK_ID resolves to 14
1449      + QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

1450      +
1451      +
1452      +   libname anllkp db2
SYMBOLGEN:  Macro variable UDBSPRP resolves to ANARPTAD USER=qcpap020 PASSWORD=anlt2web
45                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1452     !+                      DSN=&UDBSPRP SCHEMA=ANLLKP DEFER=YES;
NOTE: Libref ANLLKP was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: ANARPTAD
1453      +    libname SUMMARY DB2
SYMBOLGEN:  Macro variable UDBSPRP resolves to ANARPTAD USER=qcpap020 PASSWORD=anlt2web
1453     !+                        DSN=&UDBSPRP SCHEMA=SUMMARY DEFER=YES;
NOTE: Libref SUMMARY was successfully assigned as follows: 
      Engine:        DB2 
      Physical Name: ANARPTAD
1454      +    LIBNAME RPT "/&rpt_dir";
SYMBOLGEN:  Macro variable RPT_DIR resolves to /hercsit2/report_doc/hercules/72
NOTE: Libref RPT was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: //hercsit2/report_doc/hercules/72
1455      +/*Jan 09,2013For testing only commneted plz change  it back to 90 and 45 days as below for PROD */
1456      +/*    %LET MAIL_HIS_DAYS=90; *** number of days a participant DID NOT use a mail order;*/
1457      +/*    %LET RTL_HIS_DAYS=45;  *** length of the most recent days a pt used RETAILS;*/
1458      +
1459      +
1460      +	 %LET MAIL_HIS_DAYS=90; *** number of days a participant DID NOT use a mail order;
1461      +    %LET RTL_HIS_DAYS=45;  *** length of the most recent days a pt used RETAILS;
1462      +/*SASDOC ----------------------------------------------------------------------------------
1463      + | 12/28/2005 - god
1464      + | For adhoc run change macro variable STARTDAY to date needed for data extract.
1465      + | The default value should be TODAY().
1466      + +-----------------------------------------------------------------------------------SASDOC*/
1467      +  *SASDOC--------------------------------------------------------------------------
1468      +  |26FEB2009 - Hercules Version  2.1.2.02
1469      +  |G. DUDLEY - CHANGED THE FORMAT OF DATE MACRO VARIABLE USED IN ORACLE QUERIES
1470      +  +------------------------------------------------------------------------SASDOC*;
1471      +/*    %LET STARTDAY=today();  *** length of the most recent days a pt used RETAILS;*/
1472      + 	%LET STARTDAY='15JAN2013'd;
1473      +  data _null_;
1474      +      call symput('RUN_DT',  "'"||put(&startday.,MMDDYY10.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1475      +      call symput('SAS_RUN_DT',  "'"||put(&startday.,DATE9.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1476      +      call symput('RUN_MONTH',  put((&startday.-20),YYMMN6.));
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1477      +   ** setup  MAIL  History check dates, based on the number of days a pt DID NOT use mail;
1478      +      call symput('ml_hs_bgn_dt', put((&startday.-&MAIL_HIS_DAYS),10.));
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
SYMBOLGEN:  Macro variable MAIL_HIS_DAYS resolves to 90
1479      +      call symput('MAIL_BGN_MN', put((&startday.-&MAIL_HIS_DAYS),YYMMN6.));
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
SYMBOLGEN:  Macro variable MAIL_HIS_DAYS resolves to 90
1480      +      ** create DB2 date format;
1481      +      call symput('ml_hs_bgn_dt_d10', "'"||put((&startday.-&MAIL_HIS_DAYS),MMDDYY10.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
SYMBOLGEN:  Macro variable MAIL_HIS_DAYS resolves to 90
1482      +      call symput('MAIL_bgn_dt',  "'"||put((&startday.-&MAIL_HIS_DAYS),MMDDYY10.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
SYMBOLGEN:  Macro variable MAIL_HIS_DAYS resolves to 90
1483      +      call symput('MAIL_end_dt',  "'"||put(&startday.,MMDDYY10.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1484      +
1485      +   ** setup  RETAIL  History check dates, length of the most recent days a pt used RETAILS;
46                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1486      +   ** ---> FIND PARTICIPANTS FILLED A MAINTANENACE DRUG AT POS WITHIN THE LAST ?? DAYS;
1487      +      call symput('rtl_hs_bgn_dt', "'"||put((&startday.-&RTL_HIS_DAYS),MMDDYY10.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
SYMBOLGEN:  Macro variable RTL_HIS_DAYS resolves to 45
1488      +      call symput('RTL_BGN_MN', put(&startday.,YYMMN6.));
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1489      +      call symput('RTL_END_MN', put(&startday.,YYMMN6.));
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1490      +      call symput('RTL_END_DT', "'"||put(&startday.,MMDDYY10.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1491      +      CALL SYMPUT('TODAY_SAS', PUT(&startday., 6.) );
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1492      +    run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable RTL_HS_BGN_DT resolves to '12/01/2012'
1493      +
1494      +%LET RTL_BGN_DT=&RTL_HS_BGN_DT;
1495      +%LET RTL_END_DT=&RUN_DT;
SYMBOLGEN:  Macro variable RUN_DT resolves to '01/15/2013'
1496      +
1497      +%PUT RUN_DT = &RUN_DT;
SYMBOLGEN:  Macro variable RUN_DT resolves to '01/15/2013'
RUN_DT = '01/15/2013'
1498      +%PUT NOTE: RTL_BGN_DT=&RTL_BGN_DT;
SYMBOLGEN:  Macro variable RTL_BGN_DT resolves to '12/01/2012'
NOTE: RTL_BGN_DT='12/01/2012'
1499      +%PUT NOTE: RTL_END_DT=&RTL_END_DT;
SYMBOLGEN:  Macro variable RTL_END_DT resolves to '01/15/2013'
NOTE: RTL_END_DT='01/15/2013'
1500      +%PUT NOTE: MAIL_BGN_DT=&MAIL_BGN_DT;
SYMBOLGEN:  Macro variable MAIL_BGN_DT resolves to '10/17/2012'
NOTE: MAIL_BGN_DT='10/17/2012'
1501      +%PUT NOTE: MAIL_END_DT=&MAIL_END_DT;
SYMBOLGEN:  Macro variable MAIL_END_DT resolves to '01/15/2013'
NOTE: MAIL_END_DT='01/15/2013'
1502      +
1503      +		/** DATE MANIPULATIONS FOR ORACLE **/
1504      +    DATA _NULL_;
1505      +      CALL SYMPUT('CLM_BEGIN_DT', PUT(&startday.-&RTL_HIS_DAYS,YYMMDDD10.));
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
SYMBOLGEN:  Macro variable RTL_HIS_DAYS resolves to 45
1506      +		  CALL SYMPUT('CLM_END_DT', PUT(&STARTDAY,YYMMDDD10.));
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1507      +      CALL SYMPUT('MAIL_BGN_DT_EDW',  "'"||PUT((&STARTDAY.-&MAIL_HIS_DAYS),YYMMDDD10.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
SYMBOLGEN:  Macro variable MAIL_HIS_DAYS resolves to 90
1508      +      CALL SYMPUT('MAIL_END_DT_EDW',  "'"||PUT(&STARTDAY.,YYMMDDD10.)||"'");
SYMBOLGEN:  Macro variable STARTDAY resolves to '15JAN2013'd
1509      +
1510      +    RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
47                                                         The SAS System                          11:47 Wednesday, February 6, 2013

      cpu time            0.00 seconds
      

1511      +    DATA _NULL_;
1512      +		  CALL SYMPUT('CLM_BEGIN_DT_CONV', "TO_DATE('" ||"&CLM_BEGIN_DT" || "','YYYY-MM-DD')" );
SYMBOLGEN:  Macro variable CLM_BEGIN_DT resolves to 2012-12-01
1513      +		  CALL SYMPUT('CLM_END_DT_CONV', "TO_DATE('" || "&CLM_END_DT" || "','YYYY-MM-DD')" );
SYMBOLGEN:  Macro variable CLM_END_DT resolves to 2013-01-15
1514      +
1515      +      CALL SYMPUT('MAIL_BGN_EDW_DT', "TO_DATE(&MAIL_BGN_DT_EDW,'YYYY-MM-DD')" );
SYMBOLGEN:  Macro variable MAIL_BGN_DT_EDW resolves to '2012-10-17'
1516      +		  CALL SYMPUT('MAIL_END_EDW_DT', "TO_DATE(&MAIL_END_DT_EDW,'YYYY-MM-DD')" );
SYMBOLGEN:  Macro variable MAIL_END_DT_EDW resolves to '2013-01-15'
1517      +
1518      +		  CALL SYMPUT('CLM_BEGIN_DT_PLUS_1WK', "TO_DATE('"
1518     !+||PUT(INTNX('WEEK',INPUT("&CLM_BEGIN_DT",YYMMDD10.),-1,'BEGIN'),YYMMDD10.) || "','YYYY-MM-DD')" );
SYMBOLGEN:  Macro variable CLM_BEGIN_DT resolves to 2012-12-01
1519      +		  CALL SYMPUT('CLM_END_DT_PLUS_1WK', "TO_DATE('" ||
1519     !+PUT(INTNX('WEEK',INPUT("&CLM_END_DT",YYMMDD10.),+1,'END'),YYMMDD10.) || "','YYYY-MM-DD')" );
SYMBOLGEN:  Macro variable CLM_END_DT resolves to 2013-01-15
1520      +    RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable CLM_BEGIN_DT_CONV resolves to TO_DATE('2012-12-01','YYYY-MM-DD')
1521      +
1522      +		%PUT NOTE: CLM_BEGIN_DT_CONV = &CLM_BEGIN_DT_CONV;
NOTE: CLM_BEGIN_DT_CONV = TO_DATE('2012-12-01','YYYY-MM-DD')
1523      +		%PUT NOTE: CLM_END_DT_CONV = &CLM_END_DT_CONV;
SYMBOLGEN:  Macro variable CLM_END_DT_CONV resolves to TO_DATE('2013-01-15','YYYY-MM-DD')
NOTE: CLM_END_DT_CONV = TO_DATE('2013-01-15','YYYY-MM-DD')
1524      +		%PUT NOTE: CLM_BEGIN_DT_PLUS_1WK = &CLM_BEGIN_DT_PLUS_1WK;
SYMBOLGEN:  Macro variable CLM_BEGIN_DT_PLUS_1WK resolves to TO_DATE('2012-11-18','YYYY-MM-DD')
NOTE: CLM_BEGIN_DT_PLUS_1WK = TO_DATE('2012-11-18','YYYY-MM-DD')
1525      +		%PUT NOTE: CLM_END_DT_PLUS_1WK = &CLM_END_DT_PLUS_1WK;
SYMBOLGEN:  Macro variable CLM_END_DT_PLUS_1WK resolves to TO_DATE('2013-01-26','YYYY-MM-DD')
NOTE: CLM_END_DT_PLUS_1WK = TO_DATE('2013-01-26','YYYY-MM-DD')
1526      +    %PUT NOTE: MAIL_BGN_EDW_DT=&MAIL_BGN_EDW_DT;
SYMBOLGEN:  Macro variable MAIL_BGN_EDW_DT resolves to TO_DATE('2012-10-17','YYYY-MM-DD')
NOTE: MAIL_BGN_EDW_DT=TO_DATE('2012-10-17','YYYY-MM-DD')
1527      +    %PUT NOTE: MAIL_END_EDW_DT=&MAIL_END_EDW_DT;
SYMBOLGEN:  Macro variable MAIL_END_EDW_DT resolves to TO_DATE('2013-01-15','YYYY-MM-DD')
NOTE: MAIL_END_EDW_DT=TO_DATE('2013-01-15','YYYY-MM-DD')
NOTE: %INCLUDE (level 1) ending.
1528       
1529       %CLAIMS_PULL_PROACTIVE_CLTDRG(CLIENT_DRUG_TABLE_RX = &ORA_TMP..EXT_CLIENT_DRUG_TABLE_RX,
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  Beginning execution.
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
1530       							  CLIENT_DRUG_TABLE_RE = &ORA_TMP..EXT_CLIENT_DRUG_TABLE_RE
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
1531       				              );
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  Parameter CLIENT_DRUG_TABLE_RX has value DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  Parameter CLIENT_DRUG_TABLE_RE has value DSS_HERC.EXT_CLIENT_DRUG_TABLE_RE
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG):   OPTIONS MPRINT MPRINTNEST MLOGIC MLOGICNEST SYMBOLGEN SOURCE2;
SYMBOLGEN:  Macro variable RX_ADJ resolves to 1
48                                                         The SAS System                          11:47 Wednesday, February 6, 2013

SYMBOLGEN:  Macro variable CLIENT_DRUG_TABLE_RX resolves to DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %IF condition &RX_ADJ. = 1 AND %SYSFUNC(EXIST(&CLIENT_DRUG_TABLE_RX.)) is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %LET (variable name is SRC_SYS_CD)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %LET (variable name is PAYER_ID_CONS)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %LET (variable name is REFILL_QTY)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %LET (variable name is CARRIER_FIELD)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  Parameter ADJ_ENGINE has value RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable CLIENT_DRUG_TABLE_RX resolves to DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX
SYMBOLGEN:  Macro variable PROGRAM_ID resolves to 72
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SELECT COUNT(*) INTO :CNT FROM DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX WHERE 
PROGRAM_ID = 72;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The PROCEDURE SQL printed page 1.
NOTE: PROCEDURE SQL used (Total process time):
      real time           6.84 seconds
      cpu time            0.04 seconds
      

SYMBOLGEN:  Macro variable CNT resolves to   136834
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &CNT >= 1 is TRUE
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   
*SASDOC-------------------------------------------------------------------------- |26FEB2009 - Hercules Version 2.1.2.02 |G. DUDLEY 
- CHANGED THE FORMAT OF DATE MACRO VARIABLE USED IN ORACLE QUERIES 
+------------------------------------------------------------------------SASDOC*;
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is STARTDAY)
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   *** length of the most recent days a pt used RETAILS;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DATA _NULL_;
SYMBOLGEN:  Macro variable STARTDAY resolves to TODAY()
SYMBOLGEN:  Macro variable RTL_HIS_DAYS resolves to 45
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CALL SYMPUT('CLM_BEGIN_DT', PUT(TODAY()-45,YYMMDDD10.));
SYMBOLGEN:  Macro variable STARTDAY resolves to TODAY()
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CALL SYMPUT('CLM_END_DT', PUT(TODAY(),YYMMDDD10.));
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DATA _NULL_;
SYMBOLGEN:  Macro variable CLM_BEGIN_DT resolves to 2012-12-23
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CALL SYMPUT('CLM_BEGIN_DT_CONV', "TO_DATE('" ||"2012-12-23" || "','YYYY-MM-DD')" 
);
SYMBOLGEN:  Macro variable CLM_END_DT resolves to 2013-02-06
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CALL SYMPUT('CLM_END_DT_CONV', "TO_DATE('" || "2013-02-06" || "','YYYY-MM-DD')" 
);
SYMBOLGEN:  Macro variable CLM_BEGIN_DT resolves to 2012-12-23
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CALL SYMPUT('CLM_BEGIN_DT_PLUS_1WK', "TO_DATE('" 
||PUT(INTNX('WEEK',INPUT("2012-12-23",YYMMDD10.),-1,'BEGIN'),YYMMDD10.) || "','YYYY-MM-DD')" );
SYMBOLGEN:  Macro variable CLM_END_DT resolves to 2013-02-06
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CALL SYMPUT('CLM_END_DT_PLUS_1WK', "TO_DATE('" || 
PUT(INTNX('WEEK',INPUT("2013-02-06",YYMMDD10.),+1,'END'),YYMMDD10.) || "','YYYY-MM-DD')" );
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   RUN;

49                                                         The SAS System                          11:47 Wednesday, February 6, 2013

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: CLM_BEGIN_DT_CONV = &CLM_BEGIN_DT_CONV
SYMBOLGEN:  Macro variable CLM_BEGIN_DT_CONV resolves to TO_DATE('2012-12-23','YYYY-MM-DD')
NOTE: CLM_BEGIN_DT_CONV = TO_DATE('2012-12-23','YYYY-MM-DD')
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: CLM_END_DT_CONV = &CLM_END_DT_CONV
SYMBOLGEN:  Macro variable CLM_END_DT_CONV resolves to TO_DATE('2013-02-06','YYYY-MM-DD')
NOTE: CLM_END_DT_CONV = TO_DATE('2013-02-06','YYYY-MM-DD')
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: CLM_BEGIN_DT_PLUS_1WK = &CLM_BEGIN_DT_PLUS_1WK
SYMBOLGEN:  Macro variable CLM_BEGIN_DT_PLUS_1WK resolves to TO_DATE('2012-12-16','YYYY-MM-DD')
NOTE: CLM_BEGIN_DT_PLUS_1WK = TO_DATE('2012-12-16','YYYY-MM-DD')
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: CLM_END_DT_PLUS_1WK = &CLM_END_DT_PLUS_1WK
SYMBOLGEN:  Macro variable CLM_END_DT_PLUS_1WK resolves to TO_DATE('2013-02-16','YYYY-MM-DD')
NOTE: CLM_END_DT_PLUS_1WK = TO_DATE('2013-02-16','YYYY-MM-DD')
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is SELECT_DRUG_SEQ)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is CLIENT_DRUG_TABLE)
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable CLIENT_DRUG_TABLE_RX resolves to DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is CLIENT_DRUG_TABLE2)
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable CLIENT_DRUG_TABLE_RX resolves to DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL NOPRINT;
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable PHASE_SEQ_NB resolves to 1
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SELECT COUNT(*) INTO : REFILL_FILL_QTY FROM HERCULES.TFILE_FIELD AS A, 
HERCULES.TFIELD_DESCRIPTION AS B, HERCULES.TPHASE_RVR_FILE AS C WHERE INITIATIVE_ID=8301 AND PHASE_SEQ_NB=1 AND A.FILE_ID = 
C.FILE_ID AND A.FIELD_ID = B.FIELD_ID AND LEFT(TRIM(FIELD_NM)) IN ('REFILL_FILL_QY') ;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

SYMBOLGEN:  Macro variable REFILL_FILL_QTY resolves to        1
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &REFILL_FILL_QTY >= 1 is TRUE
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE. = RX is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is REFIL_QTY_CLM_TABLE)
SYMBOLGEN:  Macro variable DSS_CLIN resolves to DSS_CLIN
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is REFIL_QTY_CLM_TABLE_CONS)
SYMBOLGEN:  Macro variable CLM_BEGIN_DT_PLUS_1WK resolves to TO_DATE('2012-12-16','YYYY-MM-DD')
SYMBOLGEN:  Macro variable CLM_END_DT_PLUS_1WK resolves to TO_DATE('2013-02-16','YYYY-MM-DD')
SYMBOLGEN:  Macro variable SYSMODE resolves to sit2
NOTE: %INCLUDE (level 1) file /hercsit2/prg/hercules/macros/delivery_sys_check_tbd.sas is file 
      /hercsit2/prg/hercules/macros/delivery_sys_check_tbd.sas.
1532      +/*HEADER---------------------------------------------------------------------------------------------------------
1533      +|MACRO: DELIVERY_SYS_CHECK_TBD.SAS
1534      +|
1535      +|PURPOSE: RESOLVE EXCLUSION DELIVERY SYSTEM FOR RECAP AND RXCLAIM FOR TARGET BY DRUG (106) AND
1536      +|         DSA/ NCQA (105)
50                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1537      +|LOGIC:   DETERMINE IF ANY OF THE DELIVERY SYSTEMS SHOULD BE EXCLUDED FROM THE
1538      +|					INITIATIVE.  IF SO, FORM A STRING THAT WILL BE INSERTED INTO THE SQL THAT
1539      +|					QUERIES CLAIMS.
1540      +|					PROCESS WILL FIND OUT THE DELIVERY SYSTEM TO BE EXCLUDE ON RX OR RE
1541      +|					PLATFORMS AND ASSIGN IT INTO MACRO VARIABLES
1542      +|					( DS_STRING_RX_RE(RX,RE),MAIL_DELVRY_CD(RX,RE)
1543      +|								  RETAIL_DELVRY_CD(RX,RE),EDW_DELIVERY_SYSTEM(RX,RE))
1544      +|         MAIL ORDER = CVS/CAREMARK MAIL ORDER PHARMACIES
1545      +|						
1546      +|INPUT: DWCORP.T_IBEN_ECOE_MOC_PHMCY_CD					
1547      +|PARAMETERS:            GLOBAL MACRO VARIABLES: INITIATIVE_ID, PHASE_SEQ_NB.
1548      +|
1549      +|+-----------------------------------------------------------------------------------------------------------------
1550      +| HISTORY:
1551      +| FIRST RELEASE: JUNE 2012 - E BUKOWSKI(SLIOUNKOVA) - CREATED - TARGET BY DRUG/DSA AUTOMATION
1552      ++-----------------------------------------------------------------------------------------------------------HEADER*/
1553      +		LIBNAME DWCORP ORACLE
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
1553     !+                        SCHEMA=DWCORP PATH=&GOLD;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   LIBNAME DWCORP ORACLE SCHEMA=DWCORP PATH=GOLD user=dss_herc pw=anlt2web;
NOTE: Libref DWCORP was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
1554      +
1555      +%MACRO DELIVERY_SYS_CHECK_TBD(INITIATIVE_ID,HERCULES);
1556      +
1557      +	%GLOBAL DS_STRING DS_STRING_RX_RE RETAIL_DELVRY_CD MAIL_DELVRY_CD OMIT_DS_STR EDW_DELIVERY_SYSTEM OMIT_DS
1558      +		CREATE_DELIVERY_SYSTEM_CD_RX CREATE_DELIVERY_SYSTEM_CD_RE DS_STRING_RE DS_STRING_RX DS_STRING_SAS;
1559      +
1560      +
1561      +	PROC SQL NOPRINT;
1562      +	  SELECT COUNT(DELIVERY_SYSTEM_CD) INTO :OMIT_DS
1563      +	  FROM &HERCULES..TDELIVERY_SYS_EXCL
1564      +	  WHERE INITIATIVE_ID = &INITIATIVE_ID;
1565      +	QUIT;
1566      +
1567      +		%PUT NOTE:	OMIT_DS=&OMIT_DS;
1568      +
1569      +
1570      +
1571      +	PROC SQL NOPRINT;
1572      +	  SELECT "'" || SUBSTR(MOC_PHMCY_NPI_ID,1,10) ||"'" INTO :CMX_MAIL_NPI SEPARATED BY ','
1573      +	  FROM DWCORP.T_IBEN_ECOE_MOC_PHMCY_CD;
1574      +	QUIT;
1575      +
1576      +
1577      +
1578      +
1579      +	%IF &OMIT_DS > 0 %THEN %DO;
1580      +
1581      +		PROC SQL NOPRINT;
1582      +		  SELECT DELIVERY_SYSTEM_CD INTO :OMIT_DS_STR SEPARATED BY ','
1583      +		  FROM &HERCULES..TDELIVERY_SYS_EXCL
1584      +		  WHERE INITIATIVE_ID = &INITIATIVE_ID
1585      +		  ORDER BY DELIVERY_SYSTEM_CD;
1586      +		QUIT;
1587      +
1588      +		%LET DS_STRING=%STR( AND DELIVERY_SYSTEM_CD NOT IN (&OMIT_DS_STR));
51                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1589      +		%IF (&RX_ADJ EQ 1 OR &RE_ADJ EQ 1) %THEN %DO;
1590      +
1591      +
1592      +			    %IF &OMIT_DS_STR EQ 1 %THEN %DO;  /******* target mail and retail  */
1593      +					%LET DS_STRING_RE=%STR();
1594      +					%LET DS_STRING_RX=%STR();
1595      +					%LET DS_STRING_SAS=%STR();
1596      +			    %END;
1597      +			    %IF &OMIT_DS_STR EQ 2 %THEN %DO;   /******* target retail */
1598      +					%LET DS_STRING_RE=%STR(AND (SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN (&CMX_MAIL_NPI.)));
1599      +					%LET DS_STRING_RX=%STR(AND (SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN (&CMX_MAIL_NPI.)));
1600      +					%LET DS_STRING_SAS=%STR(IF DELIVERY_SYSTEM = 'RETAIL' THEN OUTPUT;);
1601      +			    %END;
1602      +			    %IF &OMIT_DS_STR EQ 3 %THEN %DO;   /******* target mail */
1603      +					%LET DS_STRING_RE=%STR(AND (SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN (&CMX_MAIL_NPI.)));
1604      +					%LET DS_STRING_RX=%STR(AND (SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN (&CMX_MAIL_NPI.)));
1605      +					%LET DS_STRING_SAS=%STR(IF DELIVERY_SYSTEM = 'MAIL' THEN OUTPUT;);
1606      +			    %END;
1607      +			    %IF &OMIT_DS_STR EQ 1,3 %THEN %DO; /******* target mail */
1608      +					%LET DS_STRING_RE=%STR(AND (SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN (&CMX_MAIL_NPI.)));
1609      +					%LET DS_STRING_RX=%STR(AND (SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN (&CMX_MAIL_NPI.)));
1610      +					%LET DS_STRING_SAS=%STR(IF DELIVERY_SYSTEM = 'MAIL' THEN OUTPUT;);
1611      +			    %END;
1612      +			    %IF &OMIT_DS_STR EQ 1,2 %THEN %DO; /******* target retail */
1613      +					%LET DS_STRING_RE=%STR(AND (SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN (&CMX_MAIL_NPI.)));
1614      +					%LET DS_STRING_RX=%STR(AND (SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN (&CMX_MAIL_NPI.)));
1615      +					%LET DS_STRING_SAS=%STR(IF DELIVERY_SYSTEM = 'RETAIL' THEN OUTPUT;);
1616      +			    %END;
1617      +			    %IF &OMIT_DS_STR EQ 2,3 %THEN %DO; /******* target paper-no results for RxClaim and RECAP */
1618      +					%LET DS_STRING_RE=%STR(AND (1>1));
1619      +					%LET DS_STRING_RX=%STR(AND (1>1));
1620      +					%LET DS_STRING_SAS=%STR();
1621      +			    %END;
1622      +
1623      +		 %END; /* END OF RX_ADJ EQ 1 OR RE_ADJ EQ 1*/
1624      +
1625      +	%END;  /* END OF OMIT_DS GT 0 */
1626      +	%ELSE %DO;
1627      +			%LET  DS_STRING=%STR();
1628      +			%LET  DS_STRING_RX_RE=%STR();
1629      +			%LET  DS_STRING_RE=%STR();
1630      +			%LET  DS_STRING_RX=%STR();
1631      +			%LET DS_STRING_SAS=%STR();
1632      +	%END;
1633      +
1634      +	
1635      +	%IF (&RX_ADJ EQ 1 OR &RE_ADJ EQ 1) %THEN %DO;
1636      +	
1637      +	   %LET RETAIL_DELVRY_CD = %STR(AND SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN (&CMX_MAIL_NPI.));
1638      +	   %LET MAIL_DELVRY_CD = %STR(AND SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN (&CMX_MAIL_NPI.));
1639      +	   %LET EDW_DELIVERY_SYSTEM = %STR( CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN (&CMX_MAIL_NPI.)
1640      +					      THEN 'RETAIL'
1641      +					      WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN (&CMX_MAIL_NPI.)
1642      +					      THEN 'MAIL'
1643      +					 END AS DELIVERY_SYSTEM );
1644      +					
1645      +	   %LET CREATE_DELIVERY_SYSTEM_CD_RE = %STR(CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN (&CMX_MAIL_NPI.)
1646      +					      THEN 'RETAIL'
52                                                         The SAS System                          11:47 Wednesday, February 6, 2013

1647      +					      WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN (&CMX_MAIL_NPI.)
1648      +					      THEN 'MAIL'
1649      +					 END AS DELIVERY_SYSTEM   );
1650      +	   %LET CREATE_DELIVERY_SYSTEM_CD_RX = %STR(CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN (&CMX_MAIL_NPI.)
1651      +					      THEN 'RETAIL'
1652      +					      WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN (&CMX_MAIL_NPI.)
1653      +					      THEN 'MAIL'
1654      +					 END AS DELIVERY_SYSTEM   );
1655      +	%END;
1656      +
1657      +	%PUT *********************************************************************************;
1658      +	%PUT NOTE: OMIT_DS_STR = &OMIT_DS_STR;
1659      +	%PUT NOTE: DS_STRING=&DS_STRING;
1660      +	%PUT NOTE: DS_STRING_RX_RE = &DS_STRING_RX_RE;
1661      +	%PUT NOTE: RETAIL_DELVRY_CD = &MAIL_DELVRY_CD;
1662      +	%PUT NOTE: MAIL_DELVRY_CD = &MAIL_DELVRY_CD;
1663      +	%PUT NOTE: CREATE_DELIVERY_SYSTEM_CD_RX = &CREATE_DELIVERY_SYSTEM_CD_RX;
1664      +	%PUT NOTE: CREATE_DELIVERY_SYSTEM_CD_RE = &CREATE_DELIVERY_SYSTEM_CD_RE;
1665      +	%PUT NOTE: DS_STRING_RX = &DS_STRING_RX;
1666      +	%PUT NOTE: DS_STRING_RE = &DS_STRING_RE;
1667      +	%PUT NOTE: DS_STRING_SAS = &DS_STRING_SAS;
1668      +	%PUT *********************************************************************************;
1669      +
1670      +%MEND DELIVERY_SYS_CHECK_TBD;
1671      +%DELIVERY_SYS_CHECK_TBD(&INITIATIVE_ID,&HERCULES);
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  Beginning execution.
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  Parameter INITIATIVE_ID has value 8301
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  Parameter HERCULES has value HERCULES
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %GLOBAL  DS_STRING DS_STRING_RX_RE RETAIL_DELVRY_CD 
      MAIL_DELVRY_CD OMIT_DS_STR EDW_DELIVERY_SYSTEM OMIT_DS   CREATE_DELIVERY_SYSTEM_CD_RX CREATE_DELIVERY_SYSTEM_CD_RE 
      DS_STRING_RE DS_STRING_RX DS_STRING_SAS
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):   PROC SQL NOPRINT;
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):   SELECT COUNT(DELIVERY_SYSTEM_CD) INTO :OMIT_DS FROM 
HERCULES.TDELIVERY_SYS_EXCL WHERE INITIATIVE_ID = 8301;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: OMIT_DS=&OMIT_DS
SYMBOLGEN:  Macro variable OMIT_DS resolves to                                0
NOTE: OMIT_DS=                               0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):   PROC SQL NOPRINT;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):   SELECT "'" || SUBSTR(MOC_PHMCY_NPI_ID,1,10) ||"'" INTO 
:CMX_MAIL_NPI SEPARATED BY ',' FROM DWCORP.T_IBEN_ECOE_MOC_PHMCY_CD;
NOTE: The following 2 column(s) in DWCORP.T_IBEN_ECOE_MOC_PHMCY_CD  have been automatically dropped because they have a datatype 
      that is not supported by this engine:
REC_ADD_TS 
REC_CHG_TS 

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      
53                                                         The SAS System                          11:47 Wednesday, February 6, 2013


SYMBOLGEN:  Macro variable OMIT_DS resolves to                                0
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %IF condition &OMIT_DS > 0 is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is DS_STRING)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is DS_STRING_RX_RE)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is DS_STRING_RE)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is DS_STRING_RX)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is DS_STRING_SAS)
SYMBOLGEN:  Macro variable RX_ADJ resolves to 1
SYMBOLGEN:  Macro variable RE_ADJ resolves to 1
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %IF condition (&RX_ADJ EQ 1 OR &RE_ADJ EQ 1) is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is RETAIL_DELVRY_CD)
SYMBOLGEN:  Macro variable CMX_MAIL_NPI resolves to '1750362653','1760464523','1841271764','1841271756','1578544474','1326029232'
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is MAIL_DELVRY_CD)
SYMBOLGEN:  Macro variable CMX_MAIL_NPI resolves to '1750362653','1760464523','1841271764','1841271756','1578544474','1326029232'
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is EDW_DELIVERY_SYSTEM)
SYMBOLGEN:  Macro variable CMX_MAIL_NPI resolves to '1750362653','1760464523','1841271764','1841271756','1578544474','1326029232'
SYMBOLGEN:  Macro variable CMX_MAIL_NPI resolves to '1750362653','1760464523','1841271764','1841271756','1578544474','1326029232'
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is CREATE_DELIVERY_SYSTEM_CD_RE)
SYMBOLGEN:  Macro variable CMX_MAIL_NPI resolves to '1750362653','1760464523','1841271764','1841271756','1578544474','1326029232'
SYMBOLGEN:  Macro variable CMX_MAIL_NPI resolves to '1750362653','1760464523','1841271764','1841271756','1578544474','1326029232'
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %LET (variable name is CREATE_DELIVERY_SYSTEM_CD_RX)
SYMBOLGEN:  Macro variable CMX_MAIL_NPI resolves to '1750362653','1760464523','1841271764','1841271756','1578544474','1326029232'
SYMBOLGEN:  Macro variable CMX_MAIL_NPI resolves to '1750362653','1760464523','1841271764','1841271756','1578544474','1326029232'
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT 
      *********************************************************************************
*********************************************************************************
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: OMIT_DS_STR = &OMIT_DS_STR
SYMBOLGEN:  Macro variable OMIT_DS_STR resolves to 
NOTE: OMIT_DS_STR =
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: DS_STRING=&DS_STRING
SYMBOLGEN:  Macro variable DS_STRING resolves to 
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: DS_STRING=
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: DS_STRING_RX_RE = &DS_STRING_RX_RE
SYMBOLGEN:  Macro variable DS_STRING_RX_RE resolves to 
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: DS_STRING_RX_RE = 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: RETAIL_DELVRY_CD = &MAIL_DELVRY_CD
SYMBOLGEN:  Macro variable MAIL_DELVRY_CD resolves to AND SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN 
            ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: RETAIL_DELVRY_CD = AND SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN 
('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: MAIL_DELVRY_CD = &MAIL_DELVRY_CD
SYMBOLGEN:  Macro variable MAIL_DELVRY_CD resolves to AND SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN 
            ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: MAIL_DELVRY_CD = AND SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN 
('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: CREATE_DELIVERY_SYSTEM_CD_RX = 
      &CREATE_DELIVERY_SYSTEM_CD_RX
SYMBOLGEN:  Macro variable CREATE_DELIVERY_SYSTEM_CD_RX resolves to CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN 
            ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')             THEN 'RETAIL'            
            WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')  
                      THEN 'MAIL'       END AS DELIVERY_SYSTEM   
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: CREATE_DELIVERY_SYSTEM_CD_RX = CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN 
54                                                         The SAS System                          11:47 Wednesday, February 6, 2013

('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')             THEN 'RETAIL'            WHEN 
SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')            THEN 
'MAIL'       END AS DELIVERY_SYSTEM   
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: CREATE_DELIVERY_SYSTEM_CD_RE = 
      &CREATE_DELIVERY_SYSTEM_CD_RE
SYMBOLGEN:  Macro variable CREATE_DELIVERY_SYSTEM_CD_RE resolves to CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN 
            ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')             THEN 'RETAIL'            
            WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')  
                      THEN 'MAIL'       END AS DELIVERY_SYSTEM   
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: CREATE_DELIVERY_SYSTEM_CD_RE = CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN 
('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')             THEN 'RETAIL'            WHEN 
SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')            THEN 
'MAIL'       END AS DELIVERY_SYSTEM   
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: DS_STRING_RX = &DS_STRING_RX
SYMBOLGEN:  Macro variable DS_STRING_RX resolves to 
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: DS_STRING_RX = 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: DS_STRING_RE = &DS_STRING_RE
SYMBOLGEN:  Macro variable DS_STRING_RE resolves to 
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: DS_STRING_RE = 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT NOTE: DS_STRING_SAS = &DS_STRING_SAS
SYMBOLGEN:  Macro variable DS_STRING_SAS resolves to 
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: DS_STRING_SAS = 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  %PUT 
      *********************************************************************************
*********************************************************************************
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DELIVERY_SYS_CHECK_TBD):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  ;
NOTE: %INCLUDE (level 1) ending.
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE. = RX is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is CREATE_DELIVERY_SYSTEM_CD)
SYMBOLGEN:  Macro variable CREATE_DELIVERY_SYSTEM_CD_RX resolves to CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN 
            ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')             THEN 'RETAIL'            
            WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')  
                      THEN 'MAIL'       END AS DELIVERY_SYSTEM   
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE. = RE is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: CREATE_DELIVERY_SYSTEM_CD = &CREATE_DELIVERY_SYSTEM_CD.
SYMBOLGEN:  Macro variable CREATE_DELIVERY_SYSTEM_CD resolves to CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN 
            ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')             THEN 'RETAIL'            
            WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')  
                      THEN 'MAIL'       END AS DELIVERY_SYSTEM   
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
NOTE: CREATE_DELIVERY_SYSTEM_CD = CASE WHEN SUBSTR(PHMCY.CURR_NPI_ID,1,10) NOT IN 
('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')             THEN 'RETAIL'            WHEN 
SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')            THEN 
'MAIL'       END AS DELIVERY_SYSTEM   
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DATA _NULL_;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CALL SYMPUT ('START_TM',PUT(1675770458.94168, DATETIME23.));
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
55                                                         The SAS System                          11:47 Wednesday, February 6, 2013

      cpu time            0.01 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: PULL FROM CLAIMS - START TIME - &START_TM
SYMBOLGEN:  Macro variable START_TM resolves to      06FEB2013:11:47:39
NOTE: PULL FROM CLAIMS - START TIME -      06FEB2013:11:47:39
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  This macro was compiled from the autocall file 
      /PRG/sasqat1/hercules_upgrade/macros/drop_oracle_table.sas
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Parameter TBL_NAME has value DSS_HERC.CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is POS)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is SCHEMA)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is TBL_NAME_SH)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
SYMBOLGEN:  Macro variable SCHEMA resolves to DSS_HERC
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   LIBNAME ORA_LBRF ORACLE schema=DSS_HERC PATH=GOLD 
user=dss_herc pw=anlt2web;
NOTE: Libref ORA_LBRF was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
SYMBOLGEN:  Macro variable TBL_NAME_SH resolves to CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition %SYSFUNC(EXIST(ORA_LBRF.&TBL_NAME_SH)) is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %PUT NOTE: TABLE &TBL_NAME. DOES NOT EXIST
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLM_CLTDRG_LST_8301_RX
NOTE: TABLE DSS_HERC.CLM_CLTDRG_LST_8301_RX DOES NOT EXIST
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  ;
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  This macro was compiled from the autocall file 
      /PRG/sasqat1/hercules_upgrade/macros/drop_oracle_table.sas
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Parameter TBL_NAME has value DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is POS)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is SCHEMA)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is TBL_NAME_SH)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
SYMBOLGEN:  Macro variable SCHEMA resolves to DSS_HERC
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   LIBNAME ORA_LBRF ORACLE schema=DSS_HERC PATH=GOLD 
user=dss_herc pw=anlt2web;
NOTE: Libref ORA_LBRF was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
SYMBOLGEN:  Macro variable TBL_NAME_SH resolves to TMP_CLM_CLTDRG_LST_8301_RX
56                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition %SYSFUNC(EXIST(ORA_LBRF.&TBL_NAME_SH)) is TRUE
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   DATA _NULL_;
SYMBOLGEN:  Macro variable TBL_NAME_SH resolves to TMP_CLM_CLTDRG_LST_8301_RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   CALL SYMPUT ('TBL_NAME_SH1' , "'" || 
"TMP_CLM_CLTDRG_LST_8301_RX" || "'");
SYMBOLGEN:  Macro variable SCHEMA resolves to DSS_HERC
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   CALL SYMPUT ('SCHEMA1' , "'" || "DSS_HERC" || "'");
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   PROC SQL NOPRINT;
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   CONNECT TO ORACLE(PATH=GOLD user=dss_herc pw=anlt2web );
SYMBOLGEN:  Macro variable TBL_NAME_SH1 resolves to 'TMP_CLM_CLTDRG_LST_8301_RX'
SYMBOLGEN:  Macro variable SCHEMA1 resolves to 'DSS_HERC'
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   SELECT CNT INTO :CNT FROM CONNECTION TO ORACLE ( SELECT 
count(*) AS CNT FROM USER_SYNONYMS where Synonym_name = 'TMP_CLM_CLTDRG_LST_8301_RX' AND TABLE_OWNER = 'DSS_HERC' );
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   DISCONNECT FROM ORACLE;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.56 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable CNT resolves to        0
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition &CNT = 1 is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is OBJECT_TYPE)
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   PROC SQL;
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   CONNECT TO ORACLE(PATH=GOLD user=dss_herc pw=anlt2web);
SYMBOLGEN:  Macro variable OBJECT_TYPE resolves to TABLE
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   EXECUTE ( DROP TABLE DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX )BY 
ORACLE;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   DISCONNECT FROM ORACLE;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           1.53 seconds
      cpu time            0.02 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  This macro was compiled from the autocall file 
      /PRG/sas_env/sas_macros/set_error_fl.sas
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Parameter ERR_FL_L has value 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Parameter SYSERR_L has value 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Parameter SQLRC_L has value 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Parameter SQLXRC_L has value 
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   OPTIONS NONOTES;
SYMBOLGEN:  Macro variable ERR_FL_L resolves to 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %IF condition &err_fl_l= is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %LET (variable name is ERR_FL_L)
SYMBOLGEN:  Macro variable ERR_FL resolves to 0
SYMBOLGEN:  Macro variable SYSERR_L resolves to 
57                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %IF condition &syserr_l= is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %LET (variable name is SYSERR_L)
SYMBOLGEN:  Macro variable SYSERR resolves to 0
SYMBOLGEN:  Macro variable SQLRC_L resolves to 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %IF condition &sqlrc_l= is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %LET (variable name is SQLRC_L)
SYMBOLGEN:  Macro variable SQLRC resolves to 0
SYMBOLGEN:  Macro variable SQLXRC_L resolves to 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %IF condition &sqlxrc_l= is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %LET (variable name is SQLXRC_L)
SYMBOLGEN:  Macro variable SQLXRC resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   DATA _NULL_;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   LENGTH err_fl err_fl_l syserr sqlrc sqlxrc 8;
SYMBOLGEN:  Macro variable ERR_FL resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   err_fl="0";
SYMBOLGEN:  Macro variable ERR_FL_L resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   err_fl_l="0";
SYMBOLGEN:  Macro variable SYSERR_L resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   syserr="0";
SYMBOLGEN:  Macro variable SQLRC_L resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   sqlrc="0";
SYMBOLGEN:  Macro variable SQLXRC_L resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   sqlxrc="0";
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   IF getoption('obs')=0 THEN err_fl=1;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   err_fl=MAX(0,ABS(err_fl),ABS(err_fl_l), 
ABS(syserr), ABS(sqlrc),ABS(sqlxrc));
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   err_fl=(err_fl >= 1);
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   CALL SYMPUT('err_fl',TRIM(LEFT(err_fl)));
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   RUN;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   OPTIONS NOTES;
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %PUT 'err_fl'=&err_fl
SYMBOLGEN:  Macro variable ERR_FL resolves to 0
'err_fl'=0
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  ;
SYMBOLGEN:  Macro variable ERR_FL resolves to 0
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition &ERR_FL = 0 is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %PUT NOTE: TABLE &TBL_NAME. HAS BEEN DROPPED
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX
NOTE: TABLE DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX HAS BEEN DROPPED
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  ;
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  This macro was compiled from the autocall file 
      /PRG/sasqat1/hercules_upgrade/macros/drop_oracle_table.sas
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Parameter TBL_NAME has value 
      DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is POS)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is SCHEMA)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is TBL_NAME_SH)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
58                                                         The SAS System                          11:47 Wednesday, February 6, 2013

SYMBOLGEN:  Macro variable SCHEMA resolves to DSS_HERC
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   LIBNAME ORA_LBRF ORACLE schema=DSS_HERC PATH=GOLD 
user=dss_herc pw=anlt2web;
NOTE: Libref ORA_LBRF was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
SYMBOLGEN:  Macro variable TBL_NAME_SH resolves to TMP1_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition %SYSFUNC(EXIST(ORA_LBRF.&TBL_NAME_SH)) is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %PUT NOTE: TABLE &TBL_NAME. DOES NOT EXIST
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX
NOTE: TABLE DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX DOES NOT EXIST
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  ;
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  This macro was compiled from the autocall file 
      /PRG/sasqat1/hercules_upgrade/macros/drop_oracle_table.sas
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Parameter TBL_NAME has value 
      DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is POS)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is SCHEMA)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is TBL_NAME_SH)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
SYMBOLGEN:  Macro variable SCHEMA resolves to DSS_HERC
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   LIBNAME ORA_LBRF ORACLE schema=DSS_HERC PATH=GOLD 
user=dss_herc pw=anlt2web;
NOTE: Libref ORA_LBRF was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
SYMBOLGEN:  Macro variable TBL_NAME_SH resolves to TMP2_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition %SYSFUNC(EXIST(ORA_LBRF.&TBL_NAME_SH)) is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %PUT NOTE: TABLE &TBL_NAME. DOES NOT EXIST
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX
NOTE: TABLE DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX DOES NOT EXIST
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  ;
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  This macro was compiled from the autocall file 
      /PRG/sasqat1/hercules_upgrade/macros/drop_oracle_table.sas
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Parameter TBL_NAME has value 
      DSS_HERC.TMP3_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is POS)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP3_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is SCHEMA)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP3_CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is TBL_NAME_SH)
59                                                         The SAS System                          11:47 Wednesday, February 6, 2013

SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP3_CLM_CLTDRG_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
SYMBOLGEN:  Macro variable SCHEMA resolves to DSS_HERC
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   LIBNAME ORA_LBRF ORACLE schema=DSS_HERC PATH=GOLD 
user=dss_herc pw=anlt2web;
NOTE: Libref ORA_LBRF was successfully assigned as follows: 
      Engine:        ORACLE 
      Physical Name: GOLD
SYMBOLGEN:  Macro variable TBL_NAME_SH resolves to TMP3_CLM_CLTDRG_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition %SYSFUNC(EXIST(ORA_LBRF.&TBL_NAME_SH)) is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %PUT NOTE: TABLE &TBL_NAME. DOES NOT EXIST
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.TMP3_CLM_CLTDRG_LST_8301_RX
NOTE: TABLE DSS_HERC.TMP3_CLM_CLTDRG_LST_8301_RX DOES NOT EXIST
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  ;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable PROGRAM_ID resolves to 72
SYMBOLGEN:  Macro variable TASK_ID resolves to 14
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SELECT TRGT_RECIPIENT_CD INTO :TRGT_RECIPIENT_CD FROM HERCULES.TPROGRAM_TASK 
WHERE PROGRAM_ID = 72 AND TASK_ID = 14;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The PROCEDURE SQL printed page 2.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

SYMBOLGEN:  Macro variable TRGT_RECIPIENT_CD resolves to      1
SYMBOLGEN:  Macro variable TRGT_RECIPIENT_CD resolves to      1
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &TRGT_RECIPIENT_CD EQ 1 OR &TRGT_RECIPIENT_CD EQ 4 is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is PRSCR_CONS)
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE = RX is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is HIERARCHY_CONS)
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE = RE is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  This macro was compiled from the autocall file 
      /PRG/sasqat1/hercules_upgrade/macros/drop_oracle_table.sas
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Parameter TBL_NAME has value DSS_HERC.CLT_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is POS)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLT_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is SCHEMA)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLT_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is TBL_NAME_SH)
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLT_LST_8301_RX
SYMBOLGEN:  Macro variable POS resolves to 9
SYMBOLGEN:  Macro variable SCHEMA resolves to DSS_HERC
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   LIBNAME ORA_LBRF ORACLE schema=DSS_HERC PATH=GOLD 
user=dss_herc pw=anlt2web;
NOTE: Libref ORA_LBRF was successfully assigned as follows: 
      Engine:        ORACLE 
60                                                         The SAS System                          11:47 Wednesday, February 6, 2013

      Physical Name: GOLD
SYMBOLGEN:  Macro variable TBL_NAME_SH resolves to CLT_LST_8301_RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition %SYSFUNC(EXIST(ORA_LBRF.&TBL_NAME_SH)) is TRUE
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   DATA _NULL_;
SYMBOLGEN:  Macro variable TBL_NAME_SH resolves to CLT_LST_8301_RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   CALL SYMPUT ('TBL_NAME_SH1' , "'" || "CLT_LST_8301_RX" || "'");
SYMBOLGEN:  Macro variable SCHEMA resolves to DSS_HERC
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   CALL SYMPUT ('SCHEMA1' , "'" || "DSS_HERC" || "'");
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   PROC SQL NOPRINT;
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   CONNECT TO ORACLE(PATH=GOLD user=dss_herc pw=anlt2web );
SYMBOLGEN:  Macro variable TBL_NAME_SH1 resolves to 'CLT_LST_8301_RX'
SYMBOLGEN:  Macro variable SCHEMA1 resolves to 'DSS_HERC'
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   SELECT CNT INTO :CNT FROM CONNECTION TO ORACLE ( SELECT 
count(*) AS CNT FROM USER_SYNONYMS where Synonym_name = 'CLT_LST_8301_RX' AND TABLE_OWNER = 'DSS_HERC' );
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   DISCONNECT FROM ORACLE;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.56 seconds
      cpu time            0.02 seconds
      

SYMBOLGEN:  Macro variable CNT resolves to        0
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition &CNT = 1 is FALSE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %LET (variable name is OBJECT_TYPE)
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   PROC SQL;
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   CONNECT TO ORACLE(PATH=GOLD user=dss_herc pw=anlt2web);
SYMBOLGEN:  Macro variable OBJECT_TYPE resolves to TABLE
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLT_LST_8301_RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   EXECUTE ( DROP TABLE DSS_HERC.CLT_LST_8301_RX )BY ORACLE;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   DISCONNECT FROM ORACLE;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.82 seconds
      cpu time            0.02 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  This macro was compiled from the autocall file 
      /PRG/sas_env/sas_macros/set_error_fl.sas
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Parameter ERR_FL_L has value 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Parameter SYSERR_L has value 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Parameter SQLRC_L has value 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Parameter SQLXRC_L has value 
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   OPTIONS NONOTES;
SYMBOLGEN:  Macro variable ERR_FL_L resolves to 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %IF condition &err_fl_l= is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %LET (variable name is ERR_FL_L)
SYMBOLGEN:  Macro variable ERR_FL resolves to 0
SYMBOLGEN:  Macro variable SYSERR_L resolves to 
61                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %IF condition &syserr_l= is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %LET (variable name is SYSERR_L)
SYMBOLGEN:  Macro variable SYSERR resolves to 0
SYMBOLGEN:  Macro variable SQLRC_L resolves to 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %IF condition &sqlrc_l= is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %LET (variable name is SQLRC_L)
SYMBOLGEN:  Macro variable SQLRC resolves to 0
SYMBOLGEN:  Macro variable SQLXRC_L resolves to 
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %IF condition &sqlxrc_l= is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %LET (variable name is SQLXRC_L)
SYMBOLGEN:  Macro variable SQLXRC resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   DATA _NULL_;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   LENGTH err_fl err_fl_l syserr sqlrc sqlxrc 8;
SYMBOLGEN:  Macro variable ERR_FL resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   err_fl="0";
SYMBOLGEN:  Macro variable ERR_FL_L resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   err_fl_l="0";
SYMBOLGEN:  Macro variable SYSERR_L resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   syserr="0";
SYMBOLGEN:  Macro variable SQLRC_L resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   sqlrc="0";
SYMBOLGEN:  Macro variable SQLXRC_L resolves to 0
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   sqlxrc="0";
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   IF getoption('obs')=0 THEN err_fl=1;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   err_fl=MAX(0,ABS(err_fl),ABS(err_fl_l), 
ABS(syserr), ABS(sqlrc),ABS(sqlxrc));
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   err_fl=(err_fl >= 1);
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   CALL SYMPUT('err_fl',TRIM(LEFT(err_fl)));
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   RUN;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):   OPTIONS NOTES;
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  %PUT 'err_fl'=&err_fl
SYMBOLGEN:  Macro variable ERR_FL resolves to 0
'err_fl'=0
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE.SET_ERROR_FL):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  ;
SYMBOLGEN:  Macro variable ERR_FL resolves to 0
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %IF condition &ERR_FL = 0 is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  %PUT NOTE: TABLE &TBL_NAME. HAS BEEN DROPPED
SYMBOLGEN:  Macro variable TBL_NAME resolves to DSS_HERC.CLT_LST_8301_RX
NOTE: TABLE DSS_HERC.CLT_LST_8301_RX HAS BEEN DROPPED
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS.DROP_ORACLE_TABLE):  Ending execution.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  ;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable CLIENT_DRUG_TABLE resolves to DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX CLTDRG
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable PROGRAM_ID resolves to 72
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CREATE TABLE CLTLIST AS SELECT DISTINCT PROGRAM_ID, QL_CLIENT_ID, 
CLIENT_LEVEL_1, CLIENT_LEVEL_2, CLIENT_LEVEL_3 FROM DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX CLTDRG WHERE TODAY() BETWEEN 
DATEPART(EFFECTIVE_DT) AND DATEPART(EXPIRATION_DT) AND PROGRAM_ID = 72;
NOTE: Compressing data set WORK.CLTLIST increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: Table WORK.CLTLIST created, with 3 rows and 5 columns.

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           5.24 seconds
      cpu time            0.98 seconds
      
62                                                         The SAS System                          11:47 Wednesday, February 6, 2013


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable DSS_CLIN resolves to DSS_CLIN
SYMBOLGEN:  Macro variable HIERARCHY_CONS resolves to             ALGN.SRC_SYS_CD = 'X'           AND TODAY() BETWEEN 
            DATEPART(ALGN.ALGN_GRP_EFF_DT) AND DATEPART(ALGN.ALGN_GRP_END_DT)           AND 
            TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_1))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID1)))           AND (CLTDRG.CLIENT_LEVEL_2 
            = ' ' OR CLTDRG.CLIENT_LEVEL_2 IS NULL OR            TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_2))) = 
            TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID2))))           AND (CLTDRG.CLIENT_LEVEL_3 = ' ' OR CLTDRG.CLIENT_LEVEL_3 IS NULL OR  
                      TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_3))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID3))))                           
                 
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CREATE TABLE CLTLIST_GID AS SELECT DISTINCT CLTDRG.*, ALGN.ALGN_LVL_GID_KEY, 
ALGN.CUST_NM FROM CLTLIST CLTDRG ,DSS_CLIN.V_ALGN_LVL_DENORM ALGN WHERE ALGN.SRC_SYS_CD = 'X' AND TODAY() BETWEEN 
DATEPART(ALGN.ALGN_GRP_EFF_DT) AND DATEPART(ALGN.ALGN_GRP_END_DT) AND TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_1))) = 
TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID1))) AND (CLTDRG.CLIENT_LEVEL_2 = ' ' OR CLTDRG.CLIENT_LEVEL_2 IS NULL OR 
TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_2))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID2)))) AND (CLTDRG.CLIENT_LEVEL_3 = ' ' OR 
CLTDRG.CLIENT_LEVEL_3 IS NULL OR TRIM(LEFT(UPCASE(CLTDRG.CLIENT_LEVEL_3))) = TRIM(LEFT(UPCASE(ALGN.EXTNL_LVL_ID3)))) ORDER BY 
ALGN_LVL_GID_KEY;
NOTE: Compressing data set WORK.CLTLIST_GID decreased size by 62.32 percent. 
      Compressed is 766 pages; un-compressed would require 2033 pages.
NOTE: Table WORK.CLTLIST_GID created, with 107683 rows and 7 columns.

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           3:29.26
      cpu time            53.06 seconds
      

SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DATA DSS_HERC.CLT_LST_8301_RX;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SET CLTLIST_GID;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   RUN;

NOTE: SAS variable labels, formats, and lengths are not written to DBMS tables.
NOTE: There were 107683 observations read from the data set WORK.CLTLIST_GID.
NOTE: The data set DSS_HERC.CLT_LST_8301_RX has 107683 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           35.08 seconds
      cpu time            2.20 seconds
      

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CONNECT TO ORACLE(PATH=GOLD user=dss_herc pw=anlt2web PRESERVE_COMMENTS);
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable DSS_CLIN resolves to DSS_CLIN
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable DSS_CLIN resolves to DSS_CLIN
SYMBOLGEN:  Macro variable PROGRAM_ID resolves to 72
SYMBOLGEN:  Macro variable CLM_BEGIN_DT_CONV resolves to TO_DATE('2012-12-23','YYYY-MM-DD')
SYMBOLGEN:  Macro variable CLM_END_DT_CONV resolves to TO_DATE('2013-02-06','YYYY-MM-DD')
SYMBOLGEN:  Macro variable SRC_SYS_CD resolves to X
63                                                         The SAS System                          11:47 Wednesday, February 6, 2013

SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   EXECUTE ( CREATE TABLE DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX AS SELECT /*+ ORDERED 
*/ CLTDRG.ALGN_LVL_GID_KEY ,CLTDRG.CUST_NM AS CLIENT_NM ,CLTDRG.CLIENT_LEVEL_1 ,CLTDRG.CLIENT_LEVEL_2 ,CLTDRG.CLIENT_LEVEL_3 
,CLAIM.PAYER_ID ,CLAIM.MBR_GID ,CLAIM.PHMCY_GID ,CLAIM.PRCTR_GID ,CLAIM.DRUG_GID ,CLAIM.DSPND_DATE ,CLAIM.BATCH_DATE 
,CLAIM.AMT_COPAY ,CLAIM.BNFT_LVL_CODE ,CLAIM.PTNT_BRTH_DT ,CLAIM.CLAIM_TYPE ,0 AS REFILL_FILL_QY ,CLAIM.RX_NBR AS RX_NB 
,CLAIM.UNIT_QTY AS DISPENSED_QY ,CAST(CLAIM.DAYS_SPLY as char(4)) as DAY_SUPPLY_QY ,CLAIM.FRMLY_GID ,FRMLY.FRMLY_NB AS FORMULARY_TX 
FROM DSS_CLIN.V_CLAIM_CORE_PAID CLAIM INNER JOIN DSS_HERC.CLT_LST_8301_RX CLTDRG ON CLAIM.ALGN_LVL_GID = CLTDRG.ALGN_LVL_GID_KEY 
LEFT JOIN DSS_CLIN.V_FRMLY_HDR FRMLY ON CLAIM.FRMLY_GID = FRMLY.FRMLY_GID WHERE CLTDRG.PROGRAM_ID = 72 AND CLAIM.DSPND_DATE BETWEEN 
TO_DATE('2012-12-23','YYYY-MM-DD') AND TO_DATE('2013-02-06','YYYY-MM-DD') AND CLAIM.BATCH_DATE IS NOT NULL AND CLAIM.SRC_SYS_CD = 
'X' AND CLAIM.CLAIM_WSHD_CD IN ('P', 'W') AND (CLAIM.MBR_SUFFX_FLG = 'Y' OR CLAIM.MBR_SUFFX_FLG IS NULL) AND CLAIM.QL_VOID_IND <= 0 
ORDER BY PAYER_ID, MBR_GID ) BY ORACLE;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DISCONNECT FROM ORACLE;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           22:39.64
      cpu time            1.54 seconds
      

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DATA _NULL_;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CALL SYMPUT ('END_TM',PUT(1675772079.14682, DATETIME23.));
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   RUN;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: PULL FROM CLAIMS END TIME - &END_TM
SYMBOLGEN:  Macro variable END_TM resolves to      06FEB2013:12:14:39
NOTE: PULL FROM CLAIMS END TIME -      06FEB2013:12:14:39
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SELECT COUNT(*) INTO :EDW_CLAIM_CNT FROM DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The PROCEDURE SQL printed page 3.
NOTE: PROCEDURE SQL used (Total process time):
      real time           6.42 seconds
      cpu time            0.02 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: CLAIM COUNT FROM TMP_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. - 
      &EDW_CLAIM_CNT
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable EDW_CLAIM_CNT resolves to  1974182
NOTE: CLAIM COUNT FROM TMP_CLM_CLTDRG_LST_8301_RX -  1974182
SYMBOLGEN:  Macro variable EDW_CLAIM_CNT resolves to  1974182
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &EDW_CLAIM_CNT. > 0 is TRUE
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CONNECT TO ORACLE(PATH=GOLD user=dss_herc pw=anlt2web PRESERVE_COMMENTS);
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable SELECT_DRUG_SEQ resolves to ,59 AS DRUG_CATEGORY_ID                           ,CLTDRG.GPI_GROUP          
64                                                         The SAS System                          11:47 Wednesday, February 6, 2013

                                          ,CLTDRG.GPI_CLASS
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable CLIENT_DRUG_TABLE resolves to DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX CLTDRG
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable DSS_CLIN resolves to DSS_CLIN
SYMBOLGEN:  Macro variable DSS_CLIN resolves to DSS_CLIN
SYMBOLGEN:  Macro variable DSS_CLIN resolves to DSS_CLIN
SYMBOLGEN:  Macro variable PROGRAM_ID resolves to 72
SYMBOLGEN:  Macro variable PRSCR_CONS resolves to 
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable MAIL_DELVRY_CD resolves to AND SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN 
            ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232')
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   EXECUTE ( CREATE TABLE DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX AS SELECT /* 
+ORDERED */ 'RX' AS ADJ_ENGINE ,CLAIM.ALGN_LVL_GID_KEY ,CLTDRG.QL_CLIENT_ID AS CLIENT_ID ,CLAIM.CUST_NM AS CLIENT_NM 
,CLTDRG.CLIENT_LEVEL_1 ,CLTDRG.CLIENT_LEVEL_2 ,CLTDRG.CLIENT_LEVEL_3 ,PRCTR.PRCTR_ID AS PRACTITIONER_ID ,PRCTR.QL_PRSCR_ID AS 
PRESCRIBER_ID ,PRCTR.ENTITY_IND ,PRCTR.DEGR_1_CD ,PHMCY.NABP_CODE_6 ,CLAIM.PAYER_ID ,CLAIM.MBR_GID ,CLAIM.PHMCY_GID 
,CLAIM.PRCTR_GID ,CLAIM.DSPND_DATE ,CLAIM.BATCH_DATE ,CLAIM.AMT_COPAY AS MEMBER_COST_AT ,CLAIM.BNFT_LVL_CODE 
,SUBSTR(CLAIM.PTNT_BRTH_DT, 1, 10) AS BIRTH_DT ,SUBSTR(CLAIM.DSPND_DATE, 1, 10) AS LAST_FILL_DT ,CLAIM.CLAIM_TYPE AS RX_COUNT_QY 
,DRUG.DRUG_GID ,DRUG.GCN_CODE ,DRUG.GCN_NBR ,DRUG.QL_NHU_TYPE_CD AS NHU_TYPE_CD ,DRUG.NDC_CODE AS DRUG_NDC_ID ,59 AS 
DRUG_CATEGORY_ID ,CLTDRG.GPI_GROUP ,CLTDRG.GPI_CLASS ,DRUG.DSG_FORM AS DRUG_ABBR_DSG_NM ,DRUG.BRAND_NAME AS DRUG_ABBR_PROD_NM 
,DRUG.STRGH_DESC AS DRUG_ABBR_STRG_NM ,DRUG.QL_DRUG_BRND_CD as DRUG_BRAND_CD ,DRUG.GPI_CODE AS GPI_THERA_CLS_CD 
,CLAIM.REFILL_FILL_QY ,0 AS LTR_RULE_SEQ_NB ,RX_NB ,DISPENSED_QY ,DAY_SUPPLY_QY ,PHMCY.PHARMACY_NM ,CLAIM.FRMLY_GID 
,CAST(PHMCY.PHMCY_DSPNS_TYPE AS NUMBER) AS LAST_DELIVERY_SYS ,CASE WHEN DRUG.RECAP_GNRC_FLAG = '2' OR MULTI_TYPE_CODE IN 
('M','O','N') THEN 'B' ELSE 'G' END AS BRAND_GENERIC ,PRCTR.PRCTR_NPI_ID AS PRESCRIBER_NPI_NB ,CASE WHEN SUBSTR(PRCTR.PRCTR_ID,1,1) 
NOT IN ('1','2','3','4','5','6','7','8','9','0') AND SUBSTR(PRCTR.PRCTR_ID,2,1) NOT IN ('1','2','3','4','5','6','7','8','9','0') 
THEN PRCTR.PRCTR_ID ELSE ' ' END AS DEA_NB FROM DSS_HERC.EXT_CLIENT_DRUG_TABLE_RX CLTDRG ,DSS_HERC.TMP_CLM_CLTDRG_LST_8301_RX CLAIM 
,DSS_CLIN.V_DRUG_DENORM DRUG ,DSS_CLIN.V_PRCTR_DENORM PRCTR ,DSS_CLIN.V_PHMCY_DENORM PHMCY WHERE CLTDRG.PROGRAM_ID = 72 AND 
CURRENT_TIMESTAMP BETWEEN CLTDRG.EFFECTIVE_DT AND CLTDRG.EXPIRATION_DT AND LTRIM(RTRIM(CLTDRG.CLIENT_LEVEL_1)) = 
LTRIM(RTRIM(CLAIM.CLIENT_LEVEL_1)) AND LTRIM(RTRIM(NVL(CLTDRG.CLIENT_LEVEL_2,'00'))) = LTRIM(RTRIM(NVL(CLAIM.CLIENT_LEVEL_2,'00'))) 
AND LTRIM(RTRIM(NVL(CLTDRG.CLIENT_LEVEL_3,'00'))) = LTRIM(RTRIM(NVL(CLAIM.CLIENT_LEVEL_3,'00'))) AND CLAIM.DRUG_GID = 
CLTDRG.DRUG_GID AND CLAIM.PRCTR_GID = PRCTR.PRCTR_GID AND CLAIM.PHMCY_GID = PHMCY.PHMCY_GID AND CLAIM.DRUG_GID = DRUG.DRUG_GID AND 
SUBSTR(PHMCY.CURR_NPI_ID,1,10) IN ('1750362653','1760464523','1841271764','1841271756','1578544474','1326029232') ORDER BY 
PAYER_ID, MBR_GID ) BY ORACLE;
ERROR: ORACLE execute error: ORA-00904: "PHMCY"."PHARMACY_NM": invalid identifier.
NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DISCONNECT FROM ORACLE;
NOTE: Statement not executed due to NOEXEC option.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.83 seconds
      cpu time            0.03 seconds
      


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DATA CLT_SPEC_CLAIMS;
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SET DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX;
ERROR: File DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX.DATA does not exist.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   RUN;

NOTE: Compression was disabled for data set WORK.CLT_SPEC_CLAIMS because compression overhead would increase the size of the data 
65                                                         The SAS System                          11:47 Wednesday, February 6, 2013

      set.
NOTE: The SAS System stopped processing this step because of errors.
NOTE: SAS set option OBS=0 and will continue to check statements. This may cause NOTE: No observations in data set.
WARNING: The data set WORK.CLT_SPEC_CLAIMS may be incomplete.  When this step was stopped there were 0 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
      


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   
*SASDOC-------------------------------------------------------------------------- |04 FEB 2013 - Hercules Stabilization |Extract 
Client Specific MOR claims and delete them from clt_spec_claims, based on |user setup pharmacy list. 
+------------------------------------------------------------------------SASDOC*;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   
*SASDOC-------------------------------------------------------------------------- |RXCLAIM 
+------------------------------------------------------------------------SASDOC*;
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE. = RX is TRUE
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CREATE TABLE CLT_SPEC_RX_MORCLAIMS AS SELECT A.NABP_CODE_6, B.CARRIER_ID, 
B.ACCOUNT_ID, B.GROUP_CD, B.NABP_ID FROM DSS_CLIN.V_PHMCY_DENORM A, QCPAP020.HCE_PHARMACY_ID_RX B WHERE A.NABP_CODE_6 = B.NABP_ID 
AND TODAY() BETWEEN B.EFFECTIVE_DT AND B.EXPIRATION_DT;
NOTE: Table WORK.CLT_SPEC_RX_MORCLAIMS created, with 0 rows and 5 columns.

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.26 seconds
      cpu time            0.02 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is HIERARCHY_CONS_RX)
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable HIERARCHY_CONS_RX resolves to B.CARRIER_ID = ('X'||A.CLIENT_LEVEL_1)                                     
               AND (B.ACCOUNT_ID = ' ' OR                              UPCASE(LEFT(TRIM(B.ACCOUNT_ID))) = 
            UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_2))))                                   AND (B.GROUP_CD = ' ' OR                        
                  UPCASE(LEFT(TRIM(B.GROUP_CD))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_3))))                                  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DELETE FROM CLT_SPEC_CLAIMS A WHERE EXISTS ( SELECT 1 FROM CLT_SPEC_RX_MORCLAIMS 
B WHERE A.NABP_CODE_6 = B.NABP_ID AND B.CARRIER_ID = ('X'||A.CLIENT_LEVEL_1) AND (B.ACCOUNT_ID = ' ' OR 
UPCASE(LEFT(TRIM(B.ACCOUNT_ID))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_2)))) AND (B.GROUP_CD = ' ' OR UPCASE(LEFT(TRIM(B.GROUP_CD))) = 
UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_3)))) );
ERROR: Table WORK.CLT_SPEC_CLAIMS doesn't have any columns. PROC SQL requires each of its tables to have at least 1 column.
ERROR: Column NABP_CODE_6 could not be found in the table/view identified with the correlation name A.
ERROR: Column CLIENT_LEVEL_1 could not be found in the table/view identified with the correlation name A.
ERROR: Column CLIENT_LEVEL_2 could not be found in the table/view identified with the correlation name A.
ERROR: Column CLIENT_LEVEL_3 could not be found in the table/view identified with the correlation name A.
NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   
      *SASDOC-------------------------------------------------------------------------- |RECAP 
      +------------------------------------------------------------------------SASDOC*;
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
66                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE. = RE is FALSE
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   
*SASDOC-------------------------------------------------------------------------- |18AUG2009 - Hercules Version 2.1.2.02 |Extract 
CLT_SPEC MOR claims and delete them from CLT_SPEC_CLAIMS |13JUN2012: Apply business rule 2 here for including CLT_SPEC MOR Claim 
overrides - AK +------------------------------------------------------------------------SASDOC*;


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CREATE TABLE CLT_SPEC_MORCLAIMS AS SELECT C.NABP_CODE_6, C.MBR_GID, 
C.CLIENT_LEVEL_1, C.CLIENT_LEVEL_2, C.CLIENT_LEVEL_3 FROM CLT_SPEC_CLAIMS C WHERE C.NABP_CODE_6 IN 
('482663','146603','032664','012929','398095','459822','032691','147389','458303','100229') ;
ERROR: Table WORK.CLT_SPEC_CLAIMS doesn't have any columns. PROC SQL requires each of its tables to have at least 1 column.
ERROR: Column NABP_CODE_6 could not be found in the table/view identified with the correlation name C.
ERROR: Column MBR_GID could not be found in the table/view identified with the correlation name C.
ERROR: Column CLIENT_LEVEL_1 could not be found in the table/view identified with the correlation name C.
ERROR: Column CLIENT_LEVEL_2 could not be found in the table/view identified with the correlation name C.
ERROR: Column CLIENT_LEVEL_3 could not be found in the table/view identified with the correlation name C.
ERROR: Column NABP_CODE_6 could not be found in the table/view identified with the correlation name C.
NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE. = RX is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is HIERARCHY_CONS)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is RULE_TABLE)
SYMBOLGEN:  Macro variable HERCULES resolves to HERCULES
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %LET (variable name is KEY_COLUMN)
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition &ADJ_ENGINE. = RE is FALSE


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable RULE_TABLE resolves to HERCULES.TPGM_RXCLM_BSRL_HS
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable HIERARCHY_CONS resolves to B.CARRIER_ID = ('X'||A.CLIENT_LEVEL_1)                AND (B.ACCOUNT_ID = ' ' 
            OR                     UPCASE(LEFT(TRIM(B.ACCOUNT_ID))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_2))))                AND 
            (B.GROUP_CD = ' ' OR                     UPCASE(LEFT(TRIM(B.GROUP_CD))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_3))))         
                        
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CREATE TABLE DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES AS SELECT A.* FROM 
CLT_SPEC_MORCLAIMS A, HERCULES.TPGM_RXCLM_BSRL_HS B WHERE B.BUS_RULE_TYPE_CD = 2 AND B.PROGRAM_ID = 72 AND B.CARRIER_ID = 
('X'||A.CLIENT_LEVEL_1) AND (B.ACCOUNT_ID = ' ' OR UPCASE(LEFT(TRIM(B.ACCOUNT_ID))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_2)))) AND 
(B.GROUP_CD = ' ' OR UPCASE(LEFT(TRIM(B.GROUP_CD))) = UPCASE(LEFT(TRIM(A.CLIENT_LEVEL_3)))) ;
ERROR: File WORK.CLT_SPEC_MORCLAIMS.DATA does not exist.
NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX


67                                                         The SAS System                          11:47 Wednesday, February 6, 2013

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DATA DATA_PND.CLT_SPEC_MORCLAIMS_RX;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SET DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   RUN;
NOTE: The data set DATA_PND.CLT_SPEC_MORCLAIMS_RX has 0 observations and 5 variables.
WARNING: Data set DATA_PND.CLT_SPEC_MORCLAIMS_RX was not replaced because this step was stopped.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DATA DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES_RX;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SET DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   RUN;

NOTE: The data set DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES_RX has 0 observations and 5 variables.
WARNING: Data set DATA_PND.CLT_SPEC_MORCLAIMS_OVERRIDES_RX was not replaced because this step was stopped.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %IF condition %SYSFUNC(EXIST(CLT_SPEC_MORCLAIMS)) is FALSE
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DELETE FROM CLT_SPEC_CLAIMS A WHERE A.MBR_GID IN ( SELECT B.MBR_GID FROM 
CLT_SPEC_MORCLAIMS B WHERE A.MBR_GID = B.MBR_GID );
ERROR: Table WORK.CLT_SPEC_CLAIMS doesn't have any columns. PROC SQL requires each of its tables to have at least 1 column.
ERROR: File WORK.CLT_SPEC_MORCLAIMS.DATA does not exist.
NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   INSERT INTO DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX SELECT * FROM CLT_SPEC_CLAIMS;
ERROR: File DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX.DATA does not exist.
ERROR: Table WORK.CLT_SPEC_CLAIMS doesn't have any columns. PROC SQL requires each of its tables to have at least 1 column.
NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.64 seconds
      cpu time            0.01 seconds
      

MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SELECT COUNT(*) INTO :EDW_CLAIM_CNT FROM DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX;
ERROR: File DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX.DATA does not exist.
68                                                         The SAS System                          11:47 Wednesday, February 6, 2013

NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
      
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT NOTE: CLAIM COUNT FROM 
      &ORA_TMP..TMP1_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable EDW_CLAIM_CNT resolves to  1974182
NOTE: CLAIM COUNT FROM DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX -  1974182


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable GOLD resolves to GOLD user=dss_herc pw=anlt2web
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   CONNECT TO ORACLE(PATH=GOLD user=dss_herc pw=anlt2web PRESERVE_COMMENTS);
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   EXECUTE ( CREATE TABLE DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX AS SELECT PAYER_ID, 
MBR_GID, COUNT(*) AS CNT FROM DSS_HERC.TMP1_CLM_CLTDRG_LST_8301_RX GROUP BY PAYER_ID, MBR_GID ORDER BY PAYER_ID, MBR_GID ) BY 
ORACLE;
ERROR: ORACLE execute error: ORA-00942: table or view does not exist.
NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   DISCONNECT FROM ORACLE;
NOTE: Statement not executed due to NOEXEC option.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.75 seconds
      cpu time            0.02 seconds
      


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SELECT COUNT(*) INTO :EDW_CLAIM_CNT2 FROM DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX 
QUIT;
ERROR: File DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX.DATA does not exist.
NOTE: PROC SQL set option NOEXEC and will continue to check the syntax of statements.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  %PUT "NOTE: CLAIM COUNT FROM 
      &ORA_TMP..TMP2_CLM_CLTDRG_LST_&INITIATIVE_ID._&ADJ_ENGINE. - &EDW_CLAIM_CNT2"
SYMBOLGEN:  Macro variable ORA_TMP resolves to DSS_HERC
SYMBOLGEN:  Macro variable INITIATIVE_ID resolves to 8301
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RX
WARNING: Apparent symbolic reference EDW_CLAIM_CNT2 not resolved.
"NOTE: CLAIM COUNT FROM DSS_HERC.TMP2_CLM_CLTDRG_LST_8301_RX - &EDW_CLAIM_CNT2"
WARNING: Apparent symbolic reference EDW_CLAIM_CNT2 not resolved.
ERROR: A character operand was found in the %EVAL function or %IF condition where a numeric operand is required. The condition was: 
       &EDW_CLAIM_CNT2. >= 25000000 
69                                                         The SAS System                          11:47 Wednesday, February 6, 2013

ERROR: The macro EDW_CLAIMS will stop executing.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  Ending execution.
SYMBOLGEN:  Macro variable RE_ADJ resolves to 1
SYMBOLGEN:  Macro variable CLIENT_DRUG_TABLE_RE resolves to DSS_HERC.EXT_CLIENT_DRUG_TABLE_RE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %IF condition &RE_ADJ. = 1 AND %SYSFUNC(EXIST(&CLIENT_DRUG_TABLE_RE.)) is TRUE
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %LET (variable name is SRC_SYS_CD)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %LET (variable name is PAYER_ID_CONS)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %LET (variable name is REFILL_QTY)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  %LET (variable name is CARRIER_FIELD)
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  Beginning execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  Parameter ADJ_ENGINE has value RE
NOTE: The SAS System stopped processing this step because of errors.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   PROC SQL;
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable ADJ_ENGINE resolves to RE
SYMBOLGEN:  Macro variable CLIENT_DRUG_TABLE_RE resolves to DSS_HERC.EXT_CLIENT_DRUG_TABLE_RE
SYMBOLGEN:  Macro variable PROGRAM_ID resolves to 72
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   SELECT COUNT(*) INTO :CNT FROM DSS_HERC.EXT_CLIENT_DRUG_TABLE_RE WHERE 
PROGRAM_ID = 72;
NOTE: No rows were selected.
MPRINT(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):   QUIT;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

WARNING: Apparent symbolic reference CNT not resolved.
ERROR: A character operand was found in the %EVAL function or %IF condition where a numeric operand is required. The condition was: 
       &CNT >= 1 
ERROR: The macro EDW_CLAIMS will stop executing.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG.EDW_CLAIMS):  Ending execution.
MLOGIC(CLAIMS_PULL_PROACTIVE_CLTDRG):  Ending execution.
1672       
1673       /********************** EXAMPLE CALL *******************************/

ERROR: Errors printed on pages 64,65,66,67,68,69.

NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           27:20.68
      cpu time            59.08 seconds
      
